{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to Doppler's Notes","text":"<p>\u6211\u662f DopplerYXC\uff0c\u6765\u81ea\u4e2d\u56fd\u5730\u8d28\u5927\u5b66\uff08\u5317\u4eac\uff09\u3002\u8be5\u7f51\u7ad9\u4e3a\u6211\u7684\u7b14\u8bb0\u5728\u7ebf\u6d4f\u89c8\u9875\uff0c\u901a\u8fc7 MkDocs \u6a21\u677f + Material \u4e3b\u9898 + Github Pages \u90e8\u7f72\u3002</p> <p>\u6211\u7684\u535a\u5ba2\uff0c\u57fa\u4e8e WordPress \u90e8\u7f72 Doppler's Blog\u3002</p> <p>\u4f7f\u7528 Vue3 \u5f00\u53d1\u7684\u731c CS \u9009\u624b\u5c0f\u6e38\u620f Guess And Guess\uff0c\u7075\u611f\u6765\u81ea blast.tv\u3002</p>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/","title":"Index","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/#_1","title":"\u76ee\u5f55","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/#_2","title":"\u57fa\u7840/\u6742\u9879","text":"<ul> <li>\u5feb\u8bfb\u5feb\u5199</li> <li>\u4e8c\u5206</li> <li>\u4e09\u5206</li> <li>\u5b57\u7b26\u4e32\u4e0e int \u7b49\u7c7b\u578b\u8f6c\u6362</li> <li>bitset</li> <li>\u5f52\u5e76\u6392\u5e8f\u6c42\u9006\u5e8f\u5bf9\u6570</li> <li>\u7ed3\u6784\u4f53\u91cd\u8f7d\u6bd4\u8f83\u8fd0\u7b97\u7b26</li> <li>\u5bf9\u9876\u5806</li> <li>vector \u53bb\u91cd</li> <li>iota \u751f\u6210\u8fde\u7eed\u6570\u5e8f\u5217</li> <li>sort \u4e2d\u4f7f\u7528 lambda \u7f16\u5199\u6392\u5e8f\u89c4\u5219</li> <li>\u6ed1\u52a8\u7a97\u53e3</li> <li>\u53cc\u5411\u5e7f\u641c</li> <li>\u5355\u8c03\u6808</li> <li>\u5168\u6392\u5217\u51fd\u6570 permutation</li> <li>\u5224\u65ad\u975e\u9012\u51cf is_sorted</li> <li>cout \u8f93\u51fa\u6d41\u63a7\u5236</li> <li>\u65e5\u671f\u6362\u7b97\uff08\u57fa\u59c6\u62c9\u5c14\u68ee\u516c\u5f0f\uff09</li> <li>__int128_t\u200b</li> <li>\u5229\u7528 auto + lambda + \u5f15\u7528\u6355\u83b7\u5728\u5185\u90e8\u7f16\u5199\u9012\u5f52\u51fd\u6570</li> <li>\u706b\u8f66\u5934\u5361\u5e38</li> <li>\u4e09\u7ef4\u524d\u7f00\u548c</li> <li>std::__builtin_popcount</li> <li>std::mt19937 &amp; std::shuffle \u968f\u673a\u6253\u4e71</li> </ul>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/#_3","title":"\u56fe\u8bba","text":"<ul> <li>Floyd</li> <li>Bellman_Ford</li> <li>Dijkstra</li> <li>Kruskal</li> <li>prim</li> <li>\u62d3\u6251\u6392\u5e8f</li> <li>\u540c\u4f59\u6700\u77ed\u8def</li> <li>\u4f20\u9012\u95ed\u5305</li> <li>\u6700\u5c0f\u73af\u95ee\u9898</li> <li>Johnson \u6c42\u5168\u6e90\u6700\u77ed\u8def</li> <li>\u6b27\u62c9\u8def</li> <li>\u4e8c\u5206\u56fe\u5339\u914d</li> <li>\u6b27\u62c9\u56de\u8def</li> <li>\u94fe\u5f0f\u524d\u5411\u661f</li> <li>\u6709\u5411\u65e0\u73af\u56fe DAG</li> <li>\u5272\u8fb9\u7f29\u70b9</li> <li>tarjan \u5f3a\u8fde\u901a\u5206\u91cf&amp;\u7f29\u70b9</li> </ul>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/#_4","title":"\u6570\u636e\u7ed3\u6784","text":"<ul> <li>\u5e76\u67e5\u96c6</li> <li>\u6811\u72b6\u6570\u7ec4</li> <li>\u5206\u5757</li> <li>\u4e3b\u5e2d\u6811</li> <li>\u66ff\u7f6a\u7f8a\u6811</li> <li>\u83ab\u961f</li> <li>ST \u8868</li> <li>\u626b\u63cf\u7ebf</li> </ul>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/#_5","title":"\u6811","text":"<ul> <li>\u6811\u7684\u76f4\u5f84</li> <li>\u6700\u8fd1\u516c\u5171\u7956\u5148 LCA</li> <li>\u6811\u7684\u91cd\u5fc3</li> </ul>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/#_6","title":"\u7ebf\u6bb5\u6811","text":"<ul> <li>\u5c01\u88c5\u533a\u95f4\u52a0\u3001\u533a\u95f4\u6700\u503c\u67e5\u8be2</li> <li>\u5c01\u88c5\u533a\u95f4\u52a0\u3001\u533a\u95f4\u4e58</li> <li>\u533a\u95f4\u8d4b\u503c</li> <li>\u5355\u70b9\u8d4b\u503c</li> <li>\u5feb\u901f\u7ebf\u6bb5\u6811 \u5355\u70b9\u4fee\u6539+\u533a\u95f4\u6700\u503c</li> <li>\u533a\u95f4\u53d6\u6a21</li> <li>\u533a\u95f4\u6700\u5927\u8fde\u7eed\u5b50\u6bb5\u548c</li> </ul>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/#_7","title":"\u5b57\u7b26\u4e32","text":"<ul> <li>manacher</li> <li>KMP</li> <li>\u540e\u7f00\u81ea\u52a8\u673a\u6216\u540e\u7f00\u6570\u7ec4\u6c42\u4e0d\u540c\u7684\u5b57\u4e32\u4e2a\u6570</li> <li>Z \u51fd\u6570\uff08\u6269\u5c55 KMP\uff09</li> <li>Trie \u5b57\u5178\u6811</li> <li>AC \u81ea\u52a8\u673a</li> <li>AC \u81ea\u52a8\u673a\u4f18\u5316\u52a0\u5f3a</li> <li>\u5b57\u7b26\u4e32\u54c8\u5e0c</li> <li>\u56de\u6587\u81ea\u52a8\u673a PAM\uff08\u56de\u6587\u6811\uff09</li> <li>\u524d\u540e\u7f00\u53bb\u91cd</li> </ul>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/#_8","title":"\u52a8\u6001\u89c4\u5212","text":"<ul> <li> <p>01 \u80cc\u5305</p> </li> <li> <p>\u5b8c\u5168\u80cc\u5305</p> </li> <li> <p>\u591a\u91cd\u80cc\u5305-\u4e8c\u8fdb\u5236\u4f18\u5316</p> </li> <li> <p>\u5355\u8c03\u961f\u5217\u4f18\u5316\u80cc\u5305</p> </li> <li> <p>\u5206\u7ec4\u80cc\u5305</p> </li> <li> <p>\u6709\u4f9d\u8d56\u80cc\u5305</p> </li> <li> <p>\u72b6\u538b DP</p> </li> <li> <p>\u6570\u4f4d DP</p> </li> <li> <p>\u6c42\u6700\u5927\u5b50\u6bb5\u548c</p> </li> </ul>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/#_9","title":"\u6570\u8bba","text":"<ul> <li>\u4e58\u6cd5\u53d6\u6a21</li> <li>\u5feb\u901f\u5e42\u53d6\u6a21</li> <li>\u77e9\u9635\u4e58\u6cd5&amp;\u5feb\u901f\u5e42</li> <li>GCD &amp; LCM</li> <li>\u6269\u5c55\u6b27\u51e0\u91cc\u5f97</li> <li>\u6c42\u89e3\u540c\u4f59\u65b9\u7a0b\uff08\u6c42\u9006\uff09</li> <li>\u8d39\u9a6c\u5c0f\u5b9a\u7406</li> <li>Miller-Rabin \u7d20\u6027\u6d4b\u8bd5</li> <li>\u6b27\u62c9\u7b5b</li> <li>\u6b27\u62c9\u51fd\u6570</li> <li>\u4e8c\u9879\u5f0f\u5b9a\u7406&amp;\u5362\u5361\u65af\u5b9a\u7406</li> <li>Bash Game</li> <li>\u7d20\u6570\u7b5b O(n)</li> <li>\u5206\u89e3\u8d28\u56e0\u6570</li> <li>\u7ea6\u6570</li> <li>\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 CRT</li> <li>\u7ea6\u745f\u592b\u95ee\u9898</li> <li>\u7ebf\u6027\u5224\u5b9a\u6392\u5217\u9006\u5e8f\u6570\u7684\u5947\u5076\u6027</li> <li>\u9884\u5904\u7406\u7ec4\u5408\u6570</li> <li>\u9632\u7206\u6a21\u4e58</li> <li>jiangly \u53d6\u6a21\u8fd0\u7b97+\u7ec4\u5408\u6570\u677f\u5b50</li> </ul>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/#_10","title":"\u7ec4\u5408\u6570\u5b66","text":"<ul> <li>\u65af\u7279\u6797\u6570</li> <li>\u5361\u7279\u5170\u6570</li> <li>\u9519\u6392\u516c\u5f0f</li> </ul>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/#_11","title":"\u8ba1\u7b97\u51e0\u4f55","text":"<ul> <li>\u70b9\u7ebf\u591a\u8fb9\u5f62\u5c01\u88c5</li> <li>\u57fa\u7840\u6570\u503c\u8ba1\u7b97</li> <li>\u4e8c\u7ef4\u51e0\u4f55\u677f\u5b50</li> <li>\u4e09\u7ef4\u51e0\u4f55\u677f\u5b50</li> <li>\u6781\u89d2\u6392\u5e8f</li> <li>\u8ddd\u79bb</li> <li>\u7ed9\u5b9a\u4e24\u77e9\u5f62\u6c42\u91cd\u53e0\u9762\u79ef</li> </ul>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/#_12","title":"\u9ad8\u7cbe\u5ea6","text":"<ul> <li>\u9ad8\u7cbe\u5ea6\u52a0\u51cf\u4e58\u9664</li> </ul>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/#stl","title":"STL","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/#atcoder","title":"atcoder \u5feb\u901f\u6a21\u4e58\u5c01\u88c5","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/#python","title":"python","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/AtcoderModel/","title":"AtcoderModel","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/AtcoderModel/#atcoder","title":"atcoder \u5feb\u901f\u6a21\u4e58\u5c01\u88c5","text":"<p>internal_math\u5c01\u88c5\u6e90\u4ee3\u7801\u5730\u5740-atcoder github</p> <p>modint\u5c01\u88c5\u6e90\u4ee3\u7801\u5730\u5740-atcoder github</p> <p>\u975e\u5e38\u91cf\u53d6\u6a21\u65f6\u4f7f\u7528\u9ad8\u6548\u7684\u6a21\u4e58\u7b97\u6cd5\u53ef\u4ee5\u5f97\u5230\u66f4\u5feb\u7684\u8fd0\u884c\u6548\u7387\uff0c\u4f8b\u5982 barrett reduction (atcoder::dynamic_modint \u4f7f\u7528\u4e86\u8fd9\u4e00\u7b97\u6cd5)</p> C++<pre><code>#include &lt;utility&gt;\n\nnamespace atcoder {\n\n    namespace internal {\n\n        // @param m `1 &lt;= m`\n        // @return x mod m\n        constexpr long long safe_mod(long long x, long long m) {\n            x %= m;\n            if (x &lt; 0) x += m;\n            return x;\n        }\n\n        // Fast modular multiplication by barrett reduction\n        // Reference: https://en.wikipedia.org/wiki/Barrett_reduction\n        // NOTE: reconsider after Ice Lake\n        struct barrett {\n            unsigned int _m;\n            unsigned long long im;\n\n            // @param m `1 &lt;= m`\n            explicit barrett(unsigned int m) : _m(m), im((unsigned long long)(-1) / m + 1) {}\n\n            // @return m\n            unsigned int umod() const { return _m; }\n\n            // @param a `0 &lt;= a &lt; m`\n            // @param b `0 &lt;= b &lt; m`\n            // @return `a * b % m`\n            unsigned int mul(unsigned int a, unsigned int b) const {\n                // [1] m = 1\n                // a = b = im = 0, so okay\n\n                // [2] m &gt;= 2\n                // im = ceil(2^64 / m)\n                // -&gt; im * m = 2^64 + r (0 &lt;= r &lt; m)\n                // let z = a*b = c*m + d (0 &lt;= c, d &lt; m)\n                // a*b * im = (c*m + d) * im = c*(im*m) + d*im = c*2^64 + c*r + d*im\n                // c*r + d*im &lt; m * m + m * im &lt; m * m + 2^64 + m &lt;= 2^64 + m * (m + 1) &lt; 2^64 * 2\n                // ((ab * im) &gt;&gt; 64) == c or c + 1\n                unsigned long long z = a;\n                z *= b;\n#ifdef _MSC_VER\n                unsigned long long x;\n                _umul128(z, im, &amp;x);\n#else\n                unsigned long long x =\n                    (unsigned long long)(((unsigned __int128)(z)*im) &gt;&gt; 64);\n#endif\n                unsigned long long y = x * _m;\n                return (unsigned int)(z - y + (z &lt; y ? _m : 0));\n            }\n        };\n\n        // @param n `0 &lt;= n`\n        // @param m `1 &lt;= m`\n        // @return `(x ** n) % m`\n        constexpr long long pow_mod_constexpr(long long x, long long n, int m) {\n            if (m == 1) return 0;\n            unsigned int _m = (unsigned int)(m);\n            unsigned long long r = 1;\n            unsigned long long y = safe_mod(x, m);\n            while (n) {\n                if (n &amp; 1) r = (r * y) % _m;\n                y = (y * y) % _m;\n                n &gt;&gt;= 1;\n            }\n            return r;\n        }\n\n        // Reference:\n        // M. Forisek and J. Jancina,\n        // Fast Primality Testing for Integers That Fit into a Machine Word\n        // @param n `0 &lt;= n`\n        constexpr bool is_prime_constexpr(int n) {\n            if (n &lt;= 1) return false;\n            if (n == 2 || n == 7 || n == 61) return true;\n            if (n % 2 == 0) return false;\n            long long d = n - 1;\n            while (d % 2 == 0) d /= 2;\n            constexpr long long bases[3] = {2, 7, 61};\n            for (long long a : bases) {\n                long long t = d;\n                long long y = pow_mod_constexpr(a, t, n);\n                while (t != n - 1 &amp;&amp; y != 1 &amp;&amp; y != n - 1) {\n                    y = y * y % n;\n                    t &lt;&lt;= 1;\n                }\n                if (y != n - 1 &amp;&amp; t % 2 == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        template &lt;int n&gt; constexpr bool is_prime = is_prime_constexpr(n);\n\n        // @param b `1 &lt;= b`\n        // @return pair(g, x) s.t. g = gcd(a, b), xa = g (mod b), 0 &lt;= x &lt; b/g\n        constexpr std::pair&lt;long long, long long&gt; inv_gcd(long long a, long long b) {\n            a = safe_mod(a, b);\n            if (a == 0) return {b, 0};\n\n            // Contracts:\n            // [1] s - m0 * a = 0 (mod b)\n            // [2] t - m1 * a = 0 (mod b)\n            // [3] s * |m1| + t * |m0| &lt;= b\n            long long s = b, t = a;\n            long long m0 = 0, m1 = 1;\n\n            while (t) {\n                long long u = s / t;\n                s -= t * u;\n                m0 -= m1 * u;  // |m1 * u| &lt;= |m1| * s &lt;= b\n\n                // [3]:\n                // (s - t * u) * |m1| + t * |m0 - m1 * u|\n                // &lt;= s * |m1| - t * u * |m1| + t * (|m0| + |m1| * u)\n                // = s * |m1| + t * |m0| &lt;= b\n\n                auto tmp = s;\n                s = t;\n                t = tmp;\n                tmp = m0;\n                m0 = m1;\n                m1 = tmp;\n            }\n            // by [3]: |m0| &lt;= b/g\n            // by g != b: |m0| &lt; b/g\n            if (m0 &lt; 0) m0 += b / s;\n            return {s, m0};\n        }\n\n        // Compile time primitive root\n        // @param m must be prime\n        // @return primitive root (and minimum in now)\n        constexpr int primitive_root_constexpr(int m) {\n            if (m == 2) return 1;\n            if (m == 167772161) return 3;\n            if (m == 469762049) return 3;\n            if (m == 754974721) return 11;\n            if (m == 998244353) return 3;\n            int divs[20] = {};\n            divs[0] = 2;\n            int cnt = 1;\n            int x = (m - 1) / 2;\n            while (x % 2 == 0) x /= 2;\n            for (int i = 3; (long long)(i)*i &lt;= x; i += 2) {\n                if (x % i == 0) {\n                    divs[cnt++] = i;\n                    while (x % i == 0) {\n                        x /= i;\n                    }\n                }\n            }\n            if (x &gt; 1) {\n                divs[cnt++] = x;\n            }\n            for (int g = 2;; g++) {\n                bool ok = true;\n                for (int i = 0; i &lt; cnt; i++) {\n                    if (pow_mod_constexpr(g, (m - 1) / divs[i], m) == 1) {\n                        ok = false;\n                        break;\n                    }\n                }\n                if (ok) return g;\n            }\n        }\n        template &lt;int m&gt; constexpr int primitive_root = primitive_root_constexpr(m);\n\n        // @param n `n &lt; 2^32`\n        // @param m `1 &lt;= m &lt; 2^32`\n        // @return sum_{i=0}^{n-1} floor((ai + b) / m) (mod 2^64)\n        unsigned long long floor_sum_unsigned(unsigned long long n,\n            unsigned long long m,\n            unsigned long long a,\n            unsigned long long b) {\n            unsigned long long ans = 0;\n            while (true) {\n                if (a &gt;= m) {\n                    ans += n * (n - 1) / 2 * (a / m);\n                    a %= m;\n                }\n                if (b &gt;= m) {\n                    ans += n * (b / m);\n                    b %= m;\n                }\n\n                unsigned long long y_max = a * n + b;\n                if (y_max &lt; m) break;\n                // y_max &lt; m * (n + 1)\n                // floor(y_max / m) &lt;= n\n                n = (unsigned long long)(y_max / m);\n                b = (unsigned long long)(y_max % m);\n                std::swap(m, a);\n            }\n            return ans;\n        }\n\n    }  // namespace internal\n\n}  // namespace atcoder\n\n#include &lt;cassert&gt;\n#include &lt;numeric&gt;\n#include &lt;type_traits&gt;\n\nnamespace atcoder {\n\n    namespace internal {\n\n#ifndef _MSC_VER\n        template &lt;class T&gt;\n        using is_signed_int128 =\n            typename std::conditional&lt;std::is_same&lt;T, __int128_t&gt;::value ||\n            std::is_same&lt;T, __int128&gt;::value,\n            std::true_type,\n            std::false_type&gt;::type;\n\n        template &lt;class T&gt;\n        using is_unsigned_int128 =\n            typename std::conditional&lt;std::is_same&lt;T, __uint128_t&gt;::value ||\n            std::is_same&lt;T, unsigned __int128&gt;::value,\n            std::true_type,\n            std::false_type&gt;::type;\n\n        template &lt;class T&gt;\n        using make_unsigned_int128 =\n            typename std::conditional&lt;std::is_same&lt;T, __int128_t&gt;::value,\n            __uint128_t,\n            unsigned __int128&gt;;\n\n        template &lt;class T&gt;\n        using is_integral = typename std::conditional&lt;std::is_integral&lt;T&gt;::value ||\n            is_signed_int128&lt;T&gt;::value ||\n            is_unsigned_int128&lt;T&gt;::value,\n            std::true_type,\n            std::false_type&gt;::type;\n\n        template &lt;class T&gt;\n        using is_signed_int = typename std::conditional&lt;(is_integral&lt;T&gt;::value&amp;&amp;\n            std::is_signed&lt;T&gt;::value) ||\n            is_signed_int128&lt;T&gt;::value,\n            std::true_type,\n            std::false_type&gt;::type;\n\n        template &lt;class T&gt;\n        using is_unsigned_int =\n            typename std::conditional&lt;(is_integral&lt;T&gt;::value&amp;&amp;\n                std::is_unsigned&lt;T&gt;::value) ||\n            is_unsigned_int128&lt;T&gt;::value,\n            std::true_type,\n            std::false_type&gt;::type;\n\n        template &lt;class T&gt;\n        using to_unsigned = typename std::conditional&lt;\n            is_signed_int128&lt;T&gt;::value,\n            make_unsigned_int128&lt;T&gt;,\n            typename std::conditional&lt;std::is_signed&lt;T&gt;::value,\n            std::make_unsigned&lt;T&gt;,\n            std::common_type&lt;T&gt;&gt;::type&gt;::type;\n\n#else\n\n        template &lt;class T&gt; using is_integral = typename std::is_integral&lt;T&gt;;\n\n        template &lt;class T&gt;\n        using is_signed_int =\n            typename std::conditional&lt;is_integral&lt;T&gt;::value&amp;&amp; std::is_signed&lt;T&gt;::value,\n            std::true_type,\n            std::false_type&gt;::type;\n\n        template &lt;class T&gt;\n        using is_unsigned_int =\n            typename std::conditional&lt;is_integral&lt;T&gt;::value&amp;&amp;\n            std::is_unsigned&lt;T&gt;::value,\n            std::true_type,\n            std::false_type&gt;::type;\n\n        template &lt;class T&gt;\n        using to_unsigned = typename std::conditional&lt;is_signed_int&lt;T&gt;::value,\n            std::make_unsigned&lt;T&gt;,\n            std::common_type&lt;T&gt;&gt;::type;\n\n#endif\n\n        template &lt;class T&gt;\n        using is_signed_int_t = std::enable_if_t&lt;is_signed_int&lt;T&gt;::value&gt;;\n\n        template &lt;class T&gt;\n        using is_unsigned_int_t = std::enable_if_t&lt;is_unsigned_int&lt;T&gt;::value&gt;;\n\n        template &lt;class T&gt; using to_unsigned_t = typename to_unsigned&lt;T&gt;::type;\n\n    }  // namespace internal\n\n}  // namespace atcoder\n\n#include &lt;cassert&gt;\n#include &lt;numeric&gt;\n#include &lt;type_traits&gt;\n\n#ifdef _MSC_VER\n#include &lt;intrin.h&gt;\n#endif\n\nnamespace atcoder {\n\n    namespace internal {\n\n        struct modint_base {};\n        struct static_modint_base : modint_base {};\n\n        template &lt;class T&gt; using is_modint = std::is_base_of&lt;modint_base, T&gt;;\n        template &lt;class T&gt; using is_modint_t = std::enable_if_t&lt;is_modint&lt;T&gt;::value&gt;;\n\n    }  // namespace internal\n\n    template &lt;int m, std::enable_if_t&lt;(1 &lt;= m)&gt;* = nullptr&gt;\n    struct static_modint : internal::static_modint_base {\n        using mint = static_modint;\n\n    public:\n        static constexpr int mod() { return m; }\n        static mint raw(int v) {\n            mint x;\n            x._v = v;\n            return x;\n        }\n\n        static_modint() : _v(0) {}\n        template &lt;class T, internal::is_signed_int_t&lt;T&gt;* = nullptr&gt;\n        static_modint(T v) {\n            long long x = (long long)(v % (long long)(umod()));\n            if (x &lt; 0) x += umod();\n            _v = (unsigned int)(x);\n        }\n        template &lt;class T, internal::is_unsigned_int_t&lt;T&gt;* = nullptr&gt;\n        static_modint(T v) {\n            _v = (unsigned int)(v % umod());\n        }\n        static_modint(bool v) { _v = ((unsigned int)(v) % umod()); }\n\n        unsigned int val() const { return _v; }\n\n        mint&amp; operator++() {\n            _v++;\n            if (_v == umod()) _v = 0;\n            return *this;\n        }\n        mint&amp; operator--() {\n            if (_v == 0) _v = umod();\n            _v--;\n            return *this;\n        }\n        mint operator++(int) {\n            mint result = *this;\n            ++*this;\n            return result;\n        }\n        mint operator--(int) {\n            mint result = *this;\n            --*this;\n            return result;\n        }\n\n        mint&amp; operator+=(const mint&amp; rhs) {\n            _v += rhs._v;\n            if (_v &gt;= umod()) _v -= umod();\n            return *this;\n        }\n        mint&amp; operator-=(const mint&amp; rhs) {\n            _v -= rhs._v;\n            if (_v &gt;= umod()) _v += umod();\n            return *this;\n        }\n        mint&amp; operator*=(const mint&amp; rhs) {\n            unsigned long long z = _v;\n            z *= rhs._v;\n            _v = (unsigned int)(z % umod());\n            return *this;\n        }\n        mint&amp; operator/=(const mint&amp; rhs) { return *this = *this * rhs.inv(); }\n\n        mint operator+() const { return *this; }\n        mint operator-() const { return mint() - *this; }\n\n        mint pow(long long n) const {\n            assert(0 &lt;= n);\n            mint x = *this, r = 1;\n            while (n) {\n                if (n &amp; 1) r *= x;\n                x *= x;\n                n &gt;&gt;= 1;\n            }\n            return r;\n        }\n        mint inv() const {\n            if (prime) {\n                assert(_v);\n                return pow(umod() - 2);\n            }\n            else {\n                auto eg = internal::inv_gcd(_v, m);\n                assert(eg.first == 1);\n                return eg.second;\n            }\n        }\n\n        friend mint operator+(const mint&amp; lhs, const mint&amp; rhs) {\n            return mint(lhs) += rhs;\n        }\n        friend mint operator-(const mint&amp; lhs, const mint&amp; rhs) {\n            return mint(lhs) -= rhs;\n        }\n        friend mint operator*(const mint&amp; lhs, const mint&amp; rhs) {\n            return mint(lhs) *= rhs;\n        }\n        friend mint operator/(const mint&amp; lhs, const mint&amp; rhs) {\n            return mint(lhs) /= rhs;\n        }\n        friend bool operator==(const mint&amp; lhs, const mint&amp; rhs) {\n            return lhs._v == rhs._v;\n        }\n        friend bool operator!=(const mint&amp; lhs, const mint&amp; rhs) {\n            return lhs._v != rhs._v;\n        }\n\n    private:\n        unsigned int _v;\n        static constexpr unsigned int umod() { return m; }\n        static constexpr bool prime = internal::is_prime&lt;m&gt;;\n    };\n\n    template &lt;int id&gt; struct dynamic_modint : internal::modint_base {\n        using mint = dynamic_modint;\n\n    public:\n        static int mod() { return (int)(bt.umod()); }\n        static void set_mod(int m) {\n            assert(1 &lt;= m);\n            bt = internal::barrett(m);\n        }\n        static mint raw(int v) {\n            mint x;\n            x._v = v;\n            return x;\n        }\n\n        dynamic_modint() : _v(0) {}\n        template &lt;class T, internal::is_signed_int_t&lt;T&gt;* = nullptr&gt;\n        dynamic_modint(T v) {\n            long long x = (long long)(v % (long long)(mod()));\n            if (x &lt; 0) x += mod();\n            _v = (unsigned int)(x);\n        }\n        template &lt;class T, internal::is_unsigned_int_t&lt;T&gt;* = nullptr&gt;\n        dynamic_modint(T v) {\n            _v = (unsigned int)(v % mod());\n        }\n        dynamic_modint(bool v) { _v = ((unsigned int)(v) % mod()); }\n\n        unsigned int val() const { return _v; }\n\n        mint&amp; operator++() {\n            _v++;\n            if (_v == umod()) _v = 0;\n            return *this;\n        }\n        mint&amp; operator--() {\n            if (_v == 0) _v = umod();\n            _v--;\n            return *this;\n        }\n        mint operator++(int) {\n            mint result = *this;\n            ++*this;\n            return result;\n        }\n        mint operator--(int) {\n            mint result = *this;\n            --*this;\n            return result;\n        }\n\n        mint&amp; operator+=(const mint&amp; rhs) {\n            _v += rhs._v;\n            if (_v &gt;= umod()) _v -= umod();\n            return *this;\n        }\n        mint&amp; operator-=(const mint&amp; rhs) {\n            _v += mod() - rhs._v;\n            if (_v &gt;= umod()) _v -= umod();\n            return *this;\n        }\n        mint&amp; operator*=(const mint&amp; rhs) {\n            _v = bt.mul(_v, rhs._v);\n            return *this;\n        }\n        mint&amp; operator/=(const mint&amp; rhs) { return *this = *this * rhs.inv(); }\n\n        mint operator+() const { return *this; }\n        mint operator-() const { return mint() - *this; }\n\n        mint pow(long long n) const {\n            assert(0 &lt;= n);\n            mint x = *this, r = 1;\n            while (n) {\n                if (n &amp; 1) r *= x;\n                x *= x;\n                n &gt;&gt;= 1;\n            }\n            return r;\n        }\n        mint inv() const {\n            auto eg = internal::inv_gcd(_v, mod());\n            assert(eg.first == 1);\n            return eg.second;\n        }\n\n        friend mint operator+(const mint&amp; lhs, const mint&amp; rhs) {\n            return mint(lhs) += rhs;\n        }\n        friend mint operator-(const mint&amp; lhs, const mint&amp; rhs) {\n            return mint(lhs) -= rhs;\n        }\n        friend mint operator*(const mint&amp; lhs, const mint&amp; rhs) {\n            return mint(lhs) *= rhs;\n        }\n        friend mint operator/(const mint&amp; lhs, const mint&amp; rhs) {\n            return mint(lhs) /= rhs;\n        }\n        friend bool operator==(const mint&amp; lhs, const mint&amp; rhs) {\n            return lhs._v == rhs._v;\n        }\n        friend bool operator!=(const mint&amp; lhs, const mint&amp; rhs) {\n            return lhs._v != rhs._v;\n        }\n\n    private:\n        unsigned int _v;\n        static internal::barrett bt;\n        static unsigned int umod() { return bt.umod(); }\n    };\n    template &lt;int id&gt; internal::barrett dynamic_modint&lt;id&gt;::bt(998244353);\n\n    using modint998244353 = static_modint&lt;998244353&gt;;\n    using modint1000000007 = static_modint&lt;1000000007&gt;;\n    using modint = dynamic_modint&lt;-1&gt;;\n\n    namespace internal {\n\n        template &lt;class T&gt;\n        using is_static_modint = std::is_base_of&lt;internal::static_modint_base, T&gt;;\n\n        template &lt;class T&gt;\n        using is_static_modint_t = std::enable_if_t&lt;is_static_modint&lt;T&gt;::value&gt;;\n\n        template &lt;class&gt; struct is_dynamic_modint : public std::false_type {};\n        template &lt;int id&gt;\n        struct is_dynamic_modint&lt;dynamic_modint&lt;id&gt;&gt; : public std::true_type {};\n\n        template &lt;class T&gt;\n        using is_dynamic_modint_t = std::enable_if_t&lt;is_dynamic_modint&lt;T&gt;::value&gt;;\n\n    }  // namespace internal\n\n}  // namespace atcoder\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/AtcoderModel/#_1","title":"\u98df\u7528\u65b9\u6cd5","text":"<p>https://atcoder.github.io/ac-library/production/document_en/modint.html</p> C++<pre><code>using MINT = atcoder::modint;\n\nMINT C[N][N]; // \u58f0\u660e\u53d8\u91cf\n\nint mod;\nstd::cin &gt;&gt; mod;\nMINT::set_mod(mod); // \u8bbe\u7f6e\u6a21\u6570\n\nC[0][0] = 1;\nfor(int i = 1; i &lt;= N; i++) {\n    C[i][0] = 1;\n    for(int j = 1; j &lt;= i; j++)\n        C[i][j] = C[i - 1][j] + C[i - 1][j - 1]; // \u6b63\u5e38\u8fd0\u7b97\uff0c\u81ea\u52a8\u53d6\u6a21\n}\n\ncout &lt;&lt; C[n][m].val() &lt;&lt; '\\n'; // \u8f93\u51fa\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Basic_and_others/","title":"Basic and others","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Basic_and_others/#1","title":"1 \u5feb\u8bfb\u5feb\u5199","text":"C++<pre><code>// \u5173\u95ed\u540c\u6b65\u6d41\uff08\u52a0\u901f\uff09\nstd::ios::sync_with_stdio(false), std::cin.tie(0), std::cout.tie(0);\n\n// \u66f4\u5feb\u4f46\u590d\u6742\u7684\u5feb\u8bfb\u5feb\u5199\nint read() {\n    int x = 0, w = 1;\n    char ch = 0;\n    while (ch &lt; '0' || ch &gt; '9')\n    {\n        if (ch == '-')\n            w = -1;\n        ch = getchar();\n    }\n    while (ch &gt;= '0' &amp;&amp; ch &lt;= '9')\n    {\n        x = x * 10 + (ch - '0');\n        ch = getchar();\n    }\n    return x * w;\n}\nvoid write(int x) {\n    if (x &lt; 0)\n    {\n        x = -x;\n        putchar('-');\n    }\n    if (x &gt; 9)\n        write(x / 10);\n    putchar(x % 10 + '0');\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Basic_and_others/#2","title":"2 \u4e8c\u5206","text":"C++<pre><code>int arr[N];\nbool check(int x) {\n    // check function\n}\n// \u67e5\u627e\u7b26\u5408\u6761\u4ef6\u7684\u6700\u5927\u503c\nint binarySearch() {\n    int l = 0, r = INF, res = 0;\n    while (l &lt;= r) {\n        int mid = l + r &gt;&gt; 1;\n        if (check(mid)) {\n            res = mid;\n            l = mid + 1;\n        }\n        else {\n            r = mid - 1;\n        }\n    }\n    return res;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Basic_and_others/#3","title":"3 \u4e09\u5206","text":"C++<pre><code>int tri_search(int l, int r) {\n    // \u6c42\u51f9\u51fd\u6570\u7684\u6781\u5c0f\u503c\n    int f1, f2;\n    while(l &lt; r) {\n        int lp = l + (r - l) / 3;\n        int rp = r - (r - l) / 3;\n        f1 = check(lp),f2 = check(rp);\n        if(f1 &lt;= f2) \n            r = rp - 1;\n        else \n            l = lp + 1;\n    }\n    //\u67e5\u627e\u7684\u662f\u6781\u5c0f\u503c\n    return min(f1, f2);\n    //\u67e5\u627e\u7684\u662f\u6781\u5c0f\u503c\u5bf9\u5e94\u7684\u4e0b\u6807\n    return f1 &lt; f2 ? l : r;\n} \n\nint tri_search(int l, int r) {\n    // \u6c42\u51f8\u51fd\u6570\u7684\u6781\u5927\u503c\n    int f1, f2;\n    while(l &lt; r) {\n        int lp = l + (r - l) / 3;\n        int rp = r - (r - l) / 3;\n        f1 = check(lp),f2 = check(rp);\n        if(f1 &gt;= f2) \n            l = lp + 1;\n        else\n            r = rp - 1;\n    }\n    //\u67e5\u627e\u7684\u662f\u6781\u5927\u503c\n    return max(f1, f2);\n    //\u67e5\u627e\u7684\u662f\u6781\u5927\u503c\u5bf9\u5e94\u7684\u4e0b\u6807\n    return f1 &gt; f2 ? l : r;\n} \n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Basic_and_others/#4","title":"4 \u5b57\u7b26\u4e32\u4e0e\u5176\u4ed6\u7c7b\u578b\u8f6c\u6362","text":"C++<pre><code>// \u6574\u6570\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\nint num;\nstring s = to_string(num);\n\n// \u5c06\u4e00\u4e32 x \u8fdb\u5236\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a int \u578b\u6570\u5b57\nstring s;\nint a = stoi(s, 0, x);\nlong long b = stoll(s, 0, x);\nstoull stold stod \u540c\u7406\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Basic_and_others/#5-bitset","title":"5 bitset","text":"C++<pre><code>// \u6784\u9020\u65b9\u6cd5\nbitset&lt;4&gt; bitset1;\u3000\u3000//\u65e0\u53c2\u6784\u9020\uff0c\u957f\u5ea6\u4e3a\uff14\uff0c\u9ed8\u8ba4\u6bcf\u4e00\u4f4d\u4e3a\uff10\nbitset&lt;8&gt; bitset2(12);\u3000//\u957f\u5ea6\u4e3a\uff18\uff0c\u4e8c\u8fdb\u5236\u4fdd\u5b58\uff0c\u524d\u9762\u7528\uff10\u8865\u5145\n\nstring s = \"100101\";\nbitset&lt;10&gt; bitset3(s);\u3000\u3000//\u957f\u5ea6\u4e3a 10\uff0c\u524d\u9762\u7528\uff10\u8865\u5145\n\nchar s2[] = \"10101\";\nbitset&lt;13&gt; bitset4(s2);\u3000\u3000//\u957f\u5ea6\u4e3a 13\uff0c\u524d\u9762\u7528\uff10\u8865\u5145\n\ncout &lt;&lt; bitset1 &lt;&lt; endl;\u3000\u3000//0000\ncout &lt;&lt; bitset2 &lt;&lt; endl;\u3000\u3000//00001100\ncout &lt;&lt; bitset3 &lt;&lt; endl;\u3000\u3000//0000100101\ncout &lt;&lt; bitset4 &lt;&lt; endl;\u3000\u3000//0000000010101\n\n// \u6570\u636e\u8bbf\u95ee\ncout &lt;&lt; foo[0] &lt;&lt; endl;//1, \u4e0b\u6807\u4ece 0 \u5f00\u59cb\uff0c\u8868\u793a\u4e8c\u8fdb\u5236\u7684\u6700\u4f4e\u4f4d\n\n// \u6570\u636e\u64cd\u4f5c\nfoo[i] = 0;//\u7ed9\u7b2c i \u4f4d\u8d4b\u503c\nfoo.flip();//\u53cd\u8f6c\u5168\u90e8\nfoo.flip(i);//\u53cd\u8f6c\u4e0b\u6807\u4e3a i \u7684\u4f4d\nfoo.set();//\u5168\u90e8\u7f6e 1\nfoo.set(i);//\u7b2c i \u4f4d\u7f6e 1\nfoo.set(i,0);//\u7b2c i \u4f4d\u7f6e 0\nfoo.reset();//\u5168\u90e8\u7f6e 0\nfoo.reset(i);//\u7b2c i \u4f4d\u7f6e 0\n\n// \u6570\u636e\u8f6c\u6362\nbitset&lt;8&gt; foo (\"10011011\");\nstring s = foo.to_string();\u3000\u3000//\u5c06 bitset \u8f6c\u6362\u6210 string \u7c7b\u578b\nunsigned long a = foo.to_ulong();\u3000\u3000//\u5c06 bitset \u8f6c\u6362\u6210 unsigned long \u7c7b\u578b\nunsigned long long b = foo.to_ullong();\u3000\u3000//\u5c06 bitset \u8f6c\u6362\u6210 unsigned long long \u7c7b\u578b\n\n// \u5e38\u7528\u51fd\u6570\nbitset&lt;8&gt; foo (\"10011011\");\ncout &lt;&lt; foo.count() &lt;&lt; endl;\u3000\u3000//5\u3000\u3000\uff08count \u51fd\u6570\u7528\u6765\u6c42 bitset \u4e2d 1 \u7684\u4f4d\u6570\uff0cfoo \u4e2d\u5171\u6709\uff15\u4e2a\uff11\ncout &lt;&lt; foo.size() &lt;&lt; endl;\u3000\u3000 //8\u3000\u3000\uff08size \u51fd\u6570\u7528\u6765\u6c42 bitset \u7684\u5927\u5c0f\uff0c\u4e00\u5171\u6709\uff18\u4f4d\ncout &lt;&lt; foo.test(0) &lt;&lt; endl;\u3000\u3000//true\u3000\u3000\uff08test \u51fd\u6570\u7528\u6765\u67e5\u4e0b\u6807\u5904\u7684\u5143\u7d20\u662f\uff10\u8fd8\u662f\uff11\uff0c\u5e76\u8fd4\u56de false \u6216 true\uff0c\u6b64\u5904 foo[0] \u4e3a\uff11\uff0c\u8fd4\u56de true\ncout &lt;&lt; foo.test(2) &lt;&lt; endl;\u3000\u3000//false\u3000\u3000\uff08\u540c\u7406\uff0cfoo[2] \u4e3a\uff10\uff0c\u8fd4\u56de false\ncout &lt;&lt; foo.any() &lt;&lt; endl;\u3000\u3000//true\u3000\u3000\uff08any \u51fd\u6570\u68c0\u67e5 bitset \u4e2d\u662f\u5426\u6709\uff11\ncout &lt;&lt; foo.none() &lt;&lt; endl;\u3000\u3000//false\u3000\u3000\uff08none \u51fd\u6570\u68c0\u67e5 bitset \u4e2d\u662f\u5426\u6ca1\u6709\uff11\ncout &lt;&lt; foo.all() &lt;&lt; endl;\u3000\u3000//false\u3000\u3000\uff08all \u51fd\u6570\u68c0\u67e5 bitset \u4e2d\u662f\u5168\u90e8\u4e3a\uff11\n\n// \u4f4d\u64cd\u4f5c\u7b26\nbitset&lt;4&gt; foo (string(\"1001\"));\nbitset&lt;4&gt; bar (string(\"0011\"));\ncout &lt;&lt; (foo^=bar) &lt;&lt; endl;       // 1010 (foo \u5bf9 bar \u6309\u4f4d\u5f02\u6216\u540e\u8d4b\u503c\u7ed9 foo)\ncout &lt;&lt; (foo&amp;=bar) &lt;&lt; endl;       // 0010 \uff08\u6309\u4f4d\u4e0e\u540e\u8d4b\u503c\u7ed9 foo)\ncout &lt;&lt; (foo|=bar) &lt;&lt; endl;       // 0011 \uff08\u6309\u4f4d\u6216\u540e\u8d4b\u503c\u7ed9 foo)\ncout &lt;&lt; (foo&lt;&lt;=2) &lt;&lt; endl;        // 1100 \uff08\u5de6\u79fb\uff12\u4f4d\uff0c\u4f4e\u4f4d\u8865\uff10\uff0c\u6709\u81ea\u8eab\u8d4b\u503c\uff09\ncout &lt;&lt; (foo&gt;&gt;=1) &lt;&lt; endl;        // 0110 \uff08\u53f3\u79fb\uff11\u4f4d\uff0c\u9ad8\u4f4d\u8865\uff10\uff0c\u6709\u81ea\u8eab\u8d4b\u503c\uff09\ncout &lt;&lt; (~bar) &lt;&lt; endl;           // 1100 \uff08\u6309\u4f4d\u53d6\u53cd\uff09\ncout &lt;&lt; (bar&lt;&lt;1) &lt;&lt; endl;         // 0110 \uff08\u5de6\u79fb\uff0c\u4e0d\u8d4b\u503c\uff09\ncout &lt;&lt; (bar&gt;&gt;1) &lt;&lt; endl;         // 0001 \uff08\u53f3\u79fb\uff0c\u4e0d\u8d4b\u503c\uff09\ncout &lt;&lt; (foo==bar) &lt;&lt; endl;       // false (0110==0011 \u4e3a false)\ncout &lt;&lt; (foo!=bar) &lt;&lt; endl;       // true  (0110!=0011 \u4e3a true)\ncout &lt;&lt; (foo&amp;bar) &lt;&lt; endl;        // 0010 \uff08\u6309\u4f4d\u4e0e\uff0c\u4e0d\u8d4b\u503c\uff09\ncout &lt;&lt; (foo|bar) &lt;&lt; endl;        // 0111 \uff08\u6309\u4f4d\u6216\uff0c\u4e0d\u8d4b\u503c\uff09\ncout &lt;&lt; (foo^bar) &lt;&lt; endl;        // 0101 \uff08\u6309\u4f4d\u5f02\u6216\uff0c\u4e0d\u8d4b\u503c\uff09\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Basic_and_others/#6","title":"6 \u5f52\u5e76\u6392\u5e8f\u6c42\u9006\u5e8f\u5bf9\u6570","text":"C++<pre><code>int tmp[N];\nvoid mergeSort(int l, int r, std::vector&lt;int&gt;&amp; a, int&amp; ans) {\n    if (l &gt;= r) return;\n    int mid = (l + r) &gt;&gt; 1, i = l, j = mid + 1, cnt = 0;\n    mergeSort(l, mid, a, ans);\n    mergeSort(mid + 1, r, a, ans);\n    while (i &lt;= mid || j &lt;= r)\n        if (j &gt; r || (i &lt;= mid &amp;&amp; a[i] &lt;= a[j]))\n            tmp[cnt++] = a[i++];\n        else\n            tmp[cnt++] = a[j++], ans += mid - i + 1;\n    for (int k = 0; k &lt; r - l + 1; k++)\n        a[l + k] = tmp[k];\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Basic_and_others/#7","title":"7 \u7ed3\u6784\u4f53\u91cd\u8f7d\u6bd4\u8f83\u8fd0\u7b97\u7b26","text":"C++<pre><code>struct node {\n    int dis, u;\n    bool operator &gt; (const node&amp; a) const { return dis &gt; a.dis; }\n};\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Basic_and_others/#8","title":"8 \u5bf9\u9876\u5806","text":"<p>\u5b9a\u4e49\u4e24\u4e2a\u5806\uff0c\u5927\u6839\u5806\u7ef4\u62a4\u8f83\u5c0f\u503c\uff0c\u5c0f\u6839\u5806\u7ef4\u62a4\u8f83\u5927\u503c\u3002\u5c06\u5927\u4e8e\u5927\u6839\u5806\u9876\u7684\u503c\u653e\u5230\u5c0f\u6839\u5806\uff0c\u5c06\u5c0f\u4e8e\u7b49\u4e8e\u5927\u6839\u5806\u9876\u503c\u7684\u6570\u653e\u5165\u5927\u6839\u5806\uff0c\u7136\u540e\u7ef4\u62a4\u4e24\u4e2a\u5806\u7684 size \u7684\u5dee\u503c\u4e0d\u5927\u4e8e 1\uff0c\u5143\u7d20\u8f83\u591a\u7684\u5806\u7684\u5806\u9876\u503c\u5373\u4e3a\u5f53\u524d\u4e2d\u4f4d\u6570\u3002</p> C++<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\npriority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt; g;\npriority_queue&lt;int, vector&lt;int&gt;, less&lt;int&gt; &gt; l;\nint main()\n{\n    ios::sync_with_stdio(false), cin.tie(0);\n    int n, x;\n    cin &gt;&gt; n &gt;&gt; x;\n    int mid = x;\n    cout &lt;&lt; mid &lt;&lt; '\\n';\n    for(int i = 2; i &lt;= n; i++) {\n        int x;\n        cin &gt;&gt; x;\n        if(x &gt; mid) g.push(x);\n        else l.push(x);\n        if(i % 2) {\n            while(g.size() &gt; l.size()) {\n                l.push(mid);\n                mid = g.top();\n                g.pop();\n            }\n            while(l.size() &gt; g.size()) {\n                g.push(mid);\n                mid = l.top();\n                l.pop();\n            }\n            cout &lt;&lt; mid &lt;&lt; '\\n';\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Basic_and_others/#9-vector","title":"9 vector \u53bb\u91cd","text":"C++<pre><code>vector&lt;int&gt; a;\nsort(a.begin(), a.end());\na.erase(unique(a.begin(), a.end()), a.end());\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Basic_and_others/#10-iota","title":"10 iota \u751f\u6210\u8fde\u7eed\u6570\u5e8f\u5217","text":"C++<pre><code>// C++ 11 \u5f15\u5165\nvector&lt;int&gt; v(n);\niota(v.begin(), v.end(), 1); // \u751f\u6210 1-n\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Basic_and_others/#11-sort-lambda","title":"11 sort \u4e2d\u4f7f\u7528 lambda \u7f16\u5199\u6392\u5e8f\u89c4\u5219","text":"C++<pre><code>vector&lt;int&gt; q;\niota(q.begin(), q.end(), 1);\nvector&lt;int&gt; v;\n// \u6309\u7167 v \u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u5bf9 p \u8fdb\u884c\u6392\u5e8f\nsort(q.begin(), q.end(),n, [&amp;](int i, int j) {\n    return v[i] &lt; v[j] || (v[i] == v[j] &amp;&amp; i &lt; j);\n});\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Basic_and_others/#12","title":"12 \u6ed1\u52a8\u7a97\u53e3","text":"C++<pre><code>int n, k; // k for length of windows\nint mx[N], a[N]; // mx \u4e0b\u6807\u4ece k \u5230 n\ndeque&lt;int&gt; q;\nvoid solve() {\n    cin &gt;&gt; n &gt;&gt; k;\n    for(int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i];\n    for(int i = 1; i &lt;= n; i++) {\n        while (!q.empty() &amp;&amp; a[q.back()] &lt; a[i]) q.pop_back();\n        q.push_back(i);\n        if (i &gt;= k) {\n            while (q.size() &amp;&amp; q.front() &lt;= i - k) q.pop_front();\n            mx[i] = a[q.front()];\n        }\n    }\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Basic_and_others/#13","title":"13 \u53cc\u5411\u5e7f\u641c","text":"<p>\u53cc\u5411\u641c\u7d22\uff0c\u641c\u7d22\u5230\u91cd\u590d\u72b6\u6001\u5c31\u505c\u6b62\uff0c\u4ea4\u66ff\u63d0\u53d6\u4ece start \u548c end \u6f14\u53d8\u6765\u7684\u72b6\u6001\uff0c\u8fdb\u884c\u641c\u7d22</p> <p>\u80fd\u591f\u5c06\u641c\u7d22\u6b21\u6570\u4ece \\(a^b\\) \u4f18\u5316\u5230 \\(2a^{(b/2)}\\)</p> <p>\u4f8b\u9898\uff1aP1032 [NOIP2002 \u63d0\u9ad8\u7ec4] \u5b57\u4e32\u53d8\u6362</p> <p>\u5df2\u77e5\u6709\u4e24\u4e2a\u5b57\u4e32 A,B \u53ca\u4e00\u7ec4\u5b57\u4e32\u53d8\u6362\u7684\u89c4\u5219\uff08\u81f3\u591a 6 \u4e2a\u89c4\u5219\uff09\uff0c\u89c4\u5219\u7684\u542b\u4e49\u4e3a\uff1a\u5728 A \u4e2d\u7684\u5b50\u4e32 \\(A_1\\) \u53ef\u4ee5\u53d8\u6362\u4e3a \\(B_1\\)\uff0c\\(A_2\\) \u53ef\u4ee5\u53d8\u6362\u4e3a \\(B_2\\)\u22ef</p> <p>\u82e5\u5728 10 \u6b65\uff08\u5305\u542b 10 \u6b65\uff09\u4ee5\u5185\u80fd\u5c06 A \u53d8\u6362\u4e3a B\uff0c\u5219\u8f93\u51fa\u6700\u5c11\u7684\u53d8\u6362\u6b65\u6570\uff1b\u5426\u5219\u8f93\u51fa <code>NO ANSWER!</code></p> C++<pre><code>#include &lt;bits/stdc++.h&gt;\n#define ll long long\nusing namespace std;\nstring s, t, a[10], b[10];\nint cnt, ans = 11;\nmap&lt;string, int&gt; ma, mb;\nint main()\n{\n    cin &gt;&gt; s &gt;&gt; t;\n    while (cin &gt;&gt; a[cnt] &gt;&gt; b[cnt]) cnt++;\n    queue&lt;string&gt; qa, qb;\n    qa.push(s);\n    qb.push(t);\n    ma[s] = mb[t] = 0;\n    while (qa.size() &amp;&amp; qb.size()) {\n        if (qa.size() &lt; qb.size()) {\n            string tmp = qa.front();\n            qa.pop();\n            int len = tmp.length();\n            bool f = 0;\n            for (int i = 0; i &lt; len; i++) {\n                for (int j = 0; j &lt; cnt; j++) {\n                    int l = a[j].length();\n                    if (tmp.substr(i, l) != a[j]) continue;\n                    string str = tmp.substr(0, i) + b[j] + tmp.substr(i + l);\n                    if (mb.find(str) != mb.end()) {\n                        ans = min(ans, ma[tmp] + 1 + mb[str]);\n                        f = 1;\n                        break;\n                    }\n                    if (ma.find(str) != ma.end()) continue;\n                    ma[str] = ma[tmp] + 1;\n                    qa.push(str);\n                }\n                if (f) break;\n            }\n        }\n        else {\n            string tmp = qb.front();\n            qb.pop();\n            int len = tmp.length();\n            bool f = 0;\n            for (int i = 0; i &lt; len; i++) {\n                for (int j = 0; j &lt; cnt; j++) {\n                    int l = b[j].length();\n                    if (tmp.substr(i, l) != b[j]) continue;\n                    string str = tmp.substr(0, i) + a[j] + tmp.substr(i + l);\n                    if (ma.find(str) != ma.end()) {\n                        ans = min(ans, mb[tmp] + 1 + ma[str]);\n                        f = 1;\n                        break;\n                    }\n                    if (mb.find(str) != mb.end()) continue;\n                    mb[str] = mb[tmp] + 1;\n                    qb.push(str);\n                }\n                if (f) break;\n            }\n        }\n        if (ans &lt;= 10) break;\n    }\n    if (ans == 11) cout &lt;&lt; \"NO ANSWER!\";\n    else cout &lt;&lt; ans;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Basic_and_others/#14","title":"14 \u5355\u8c03\u6808","text":"C++<pre><code>//\u5355\u8c03\u6808\uff1a\u8f93\u51fa\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u6bd4\u5b83\u5c0f\u7684\u6570\uff0c\u5982\u679c\u6ca1\u6709\u8f93\u51fa-1\nint s[N];\nint top;\nint main() {\n    int n, i, j, a;\n    cin &gt;&gt; n;\n    for (i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a;\n        while (top &gt; 0 &amp;&amp; s[top] &gt;= a)\n            top--;\n        if (top == 0)    cout &lt;&lt; \"-1 \";\n        else    cout &lt;&lt; s[top] &lt;&lt; \" \";\n        s[++top] = a;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Basic_and_others/#15-permutation","title":"15 \u5168\u6392\u5217\u51fd\u6570 permutation","text":"C++<pre><code>vector&lt;int&gt; a(n);\niota(a.begin(), a.end(), 1);\n\ndo {\n    for (auto it : a) cout &lt;&lt; it &lt;&lt; \" \";\n    cout &lt;&lt; endl;\n} while (next_permutation(a.begin(), a.end()));\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Basic_and_others/#16-is_sorted","title":"16 \u5224\u65ad\u975e\u9012\u51cf is_sorted","text":"C++<pre><code>//a \u6570\u7ec4 [start,end) \u533a\u95f4\u662f\u5426\u662f\u975e\u9012\u51cf\u7684\uff0c\u8fd4\u56de bool \u578b\ncout &lt;&lt; is_sorted(a + start, a + end);\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Basic_and_others/#17-cout","title":"17 cout \u8f93\u51fa\u6d41\u63a7\u5236","text":"C++<pre><code>stew(x) \u8865\u5168 x \u4f4d\u8f93\u51fa\uff0c\u9ed8\u8ba4\u7528\u7a7a\u683c\u8865\u5168\nsetfill(char) \u8bbe\u5b9a\u8865\u5168\u7c7b\u578b\ncout &lt;&lt; setw(12) &lt;&lt; setfill('*') &lt;&lt; 12 &lt;&lt; endl;\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Basic_and_others/#18","title":"18 \u65e5\u671f\u6362\u7b97\uff08\u57fa\u59c6\u62c9\u5c14\u68ee\u516c\u5f0f\uff09","text":"C++<pre><code>\u5df2\u77e5\u5e74\u6708\u65e5\uff0c\u6c42\u661f\u671f\u6570\u3002\nint week(int y,int m,int d){\n    if(m&lt;=2)m+=12,y--;\n    return (d+2*m+3*(m+1)/5+y+y/4-y/100+y/400)%7+1;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Basic_and_others/#19-__int128_t","title":"19 __int128_t","text":"<p>\u82e5\u8ba1\u7b97\u8fc7\u7a0b\u51fa\u73b0\u4e86\u8d85\u8fc7 long long \u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>__int128_t</code>, \u4f46\u8981\u6ce8\u610f\u8f93\u5165\u8f93\u51fa\u8981\u81ea\u5df1\u5199\uff0c\u6216\u8f93\u5165 longlong \u7136\u540e\u8d4b\u503c\u7ed9__int128_t</p> <p><code>\u6ce8\u610f</code>: \u53ea\u80fd\u5728\u975e windows \u73af\u5883\u4f7f\u7528</p> C++<pre><code>using i128 = __int128_t;\ni128 read() {\n    i128 ans = 0, f = 1; char c = getchar();\n    while (!isdigit(c)) { if (c == '-')f = -1; c = getchar(); }\n    while (isdigit(c)) { ans = ans * 10 + c - '0'; c = getchar(); }\n    return ans * f;\n}\nvoid write(i128 x) {\n    if (x &lt; 0) x = -x, putchar('-');\n    if (x &gt; 9) write(x / 10);\n    putchar(x % 10 + '0');\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Basic_and_others/#20-auto-lambda","title":"20 \u5229\u7528 auto + lambda + \u5f15\u7528\u6355\u83b7\u5728\u5185\u90e8\u7f16\u5199\u9012\u5f52\u51fd\u6570","text":"C++<pre><code>std::vector&lt;int&gt; d;\nstd::vector&lt;bool&gt; vis(n + 1, 0);\nauto dfs = [&amp;](auto&amp;&amp; self, int u, int f) -&gt; void {\n    d.push_back(u);\n    for (int v : ed[u]) {\n        if (v == f || vis[v]) continue;\n        vis[v] = 1;\n        self(self, v, u);\n    }\n    d.push_back(u);\n};\ndfs(dfs, 1, 0);\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Basic_and_others/#21","title":"21 \u706b\u8f66\u5934\u5361\u5e38","text":"C++<pre><code>#pragma GCC optimize(\"O2\")\n#pragma GCC optimize(\"O3\")\n#pragma GCC optimize(\"O5\")\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"inline\")\n#pragma GCC optimize(\"-fgcse\")\n#pragma GCC optimize(\"-fgcse-lm\")\n#pragma GCC optimize(\"-fipa-sra\")\n#pragma GCC optimize(\"-ftree-pre\")\n#pragma GCC optimize(\"-ftree-vrp\")\n#pragma GCC optimize(\"-fpeephole2\")\n#pragma GCC optimize(\"-ffast-math\")\n#pragma GCC optimize(\"-fsched-spec\")\n#pragma GCC optimize(\"unroll-loops\")\n\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;cmath&gt;\n#include &lt;cstdio&gt;\nusing namespace std;\n\nnamespace fastIO {\n#define BUF_SIZE 100000\n#define OUT_SIZE 100000\n#define ll long long\n    //fread-&gt;read\n    //\u5feb\u901f\u8bfb\u5165\n    bool IOerror = 0;\n    inline char nc() {\n        static char buf[BUF_SIZE], * p1 = buf + BUF_SIZE, * pend = buf + BUF_SIZE;\n        if (p1 == pend) {\n            p1 = buf; pend = buf + fread(buf, 1, BUF_SIZE, stdin);\n            if (pend == p1) { IOerror = 1; return -1; }\n            //{printf(\"IO error!\\n\");system(\"pause\");for (;;);exit(0);}\n        }\n        return *p1++;\n    }\n    inline bool blank(char ch) { return ch == ' ' || ch == '\\n' || ch == '\\r' || ch == '\\t'; }\n    inline void read(int&amp; x) {\n        bool sign = 0; char ch = nc(); x = 0;\n        for (; blank(ch); ch = nc());\n        if (IOerror)return;\n        if (ch == '-')sign = 1, ch = nc();\n        for (; ch &gt;= '0' &amp;&amp; ch &lt;= '9'; ch = nc())x = x * 10 + ch - '0';\n        if (sign)x = -x;\n    }\n    inline void read(ll&amp; x) {\n        bool sign = 0; char ch = nc(); x = 0;\n        for (; blank(ch); ch = nc());\n        if (IOerror)return;\n        if (ch == '-')sign = 1, ch = nc();\n        for (; ch &gt;= '0' &amp;&amp; ch &lt;= '9'; ch = nc())x = x * 10 + ch - '0';\n        if (sign)x = -x;\n    }\n    inline void read(double&amp; x) {\n        bool sign = 0; char ch = nc(); x = 0;\n        for (; blank(ch); ch = nc());\n        if (IOerror)return;\n        if (ch == '-')sign = 1, ch = nc();\n        for (; ch &gt;= '0' &amp;&amp; ch &lt;= '9'; ch = nc())x = x * 10 + ch - '0';\n        if (ch == '.') {\n            double tmp = 1; ch = nc();\n            for (; ch &gt;= '0' &amp;&amp; ch &lt;= '9'; ch = nc())tmp /= 10.0, x += tmp * (ch - '0');\n        }\n        if (sign)x = -x;\n    }\n    inline void read(char* s) {\n        char ch = nc();\n        for (; blank(ch); ch = nc());\n        if (IOerror)return;\n        for (; !blank(ch) &amp;&amp; !IOerror; ch = nc())*s++ = ch;\n        *s = 0;\n    }\n    inline void read(char&amp; c) {\n        for (c = nc(); blank(c); c = nc());\n        if (IOerror) { c = -1; return; }\n    }\n    //fwrite-&gt;write\n    //\u5feb\u901f\u5199\u5165\n    struct Ostream_fwrite {\n        char* buf, * p1, * pend;\n        Ostream_fwrite() { buf = new char[BUF_SIZE]; p1 = buf; pend = buf + BUF_SIZE; }\n        void out(char ch) {\n            if (p1 == pend) {\n                fwrite(buf, 1, BUF_SIZE, stdout); p1 = buf;\n            }\n            *p1++ = ch;\n        }\n        void print(int x) {\n            static char s[15], * s1; s1 = s;\n            if (!x)*s1++ = '0'; if (x &lt; 0)out('-'), x = -x;\n            while (x)*s1++ = x % 10 + '0', x /= 10;\n            while (s1-- != s)out(*s1);\n        }\n        void println(int x) {\n            static char s[15], * s1; s1 = s;\n            if (!x)*s1++ = '0'; if (x &lt; 0)out('-'), x = -x;\n            while (x)*s1++ = x % 10 + '0', x /= 10;\n            while (s1-- != s)out(*s1); out('\\n');\n        }\n        void print(ll x) {\n            static char s[25], * s1; s1 = s;\n            if (!x)*s1++ = '0'; if (x &lt; 0)out('-'), x = -x;\n            while (x)*s1++ = x % 10 + '0', x /= 10;\n            while (s1-- != s)out(*s1);\n        }\n        void println(ll x) {\n            static char s[25], * s1; s1 = s;\n            if (!x)*s1++ = '0'; if (x &lt; 0)out('-'), x = -x;\n            while (x)*s1++ = x % 10 + '0', x /= 10;\n            while (s1-- != s)out(*s1); out('\\n');\n        }\n        void print(double x, int y) {\n            static ll mul[] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000,\n                1000000000, 10000000000LL, 100000000000LL, 1000000000000LL, 10000000000000LL,\n                100000000000000LL, 1000000000000000LL, 10000000000000000LL, 100000000000000000LL};\n            if (x &lt; -1e-12)out('-'), x = -x; x *= mul[y];\n            ll x1 = (ll)floor(x); if (x - floor(x) &gt;= 0.5)++x1;\n            ll x2 = x1 / mul[y], x3 = x1 - x2 * mul[y]; print(x2);\n            if (y &gt; 0) { out('.'); for (size_t i = 1; i &lt; y &amp;&amp; x3 * mul[i] &lt; mul[y]; out('0'), ++i); print(x3); }\n        }\n        void println(double x, int y) { print(x, y); out('\\n'); }\n        void print(char* s) { while (*s)out(*s++); }\n        void println(char* s) { while (*s)out(*s++); out('\\n'); }\n        void flush() { if (p1 != buf) { fwrite(buf, 1, p1 - buf, stdout); p1 = buf; } }\n        ~Ostream_fwrite() { flush(); }\n    }Ostream;\n    inline void print(int x) { Ostream.print(x); }\n    inline void println(int x) { Ostream.println(x); }\n    inline void print(char x) { Ostream.out(x); }\n    inline void println(char x) { Ostream.out(x); Ostream.out('\\n'); }\n    inline void print(ll x) { Ostream.print(x); }\n    inline void println(ll x) { Ostream.println(x); }\n    inline void print(double x, int y) { Ostream.print(x, y); } //y\u4e3a\u5c0f\u6570\u70b9\u540e\u51e0\u4f4d\n    inline void println(double x, int y) { Ostream.println(x, y); }\n    inline void print(char* s) { Ostream.print(s); }\n    inline void println(char* s) { Ostream.println(s); }\n    inline void println() { Ostream.out('\\n'); }\n    inline void flush() { Ostream.flush(); }            //\u6e05\u7a7a\n#undef ll\n#undef OUT_SIZE\n#undef BUF_SIZE\n};\nusing namespace fastIO;\n// read(n); // \u6765\u8bfb\u53d6n\n// println(a[i]); // \u8f93\u51faa[i]\u5e76\u6362\u884c\n// \u518d\u52a0\u4e0ainline\u4f18\u5316\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Basic_and_others/#22","title":"22 \u4e09\u7ef4\u524d\u7f00\u548c","text":"C++<pre><code>s[x2][y2][z2]-s[x1-1][y2][z2]-s[x2][y1-1][z2]-s[x2][y2][z1-1]+s[x1-1][y1-1][z2]+s[x1-1][y2][z1-1]+s[x2][y1-1][z1-1]-s[x1-1][y1-1][z1-1]\n</code></pre> C++<pre><code>for (int i = 1; i &lt;= n; i++)\n    for (int j = 1; j &lt;= n; j++)\n        for (int k = 1; k &lt;= n; k++)\n            b[i][j][k] += b[i][j][k - 1];\nfor (int i = 1; i &lt;= n; i++)\n    for (int k = 1; k &lt;= n; k++)\n        for (int j = 1; j &lt;= n; j++)\n            b[i][j][k] += b[i][j - 1][k];\nfor (int k = 1; k &lt;= n; k++)\n    for (int j = 1; j &lt;= n; j++)\n        for (int i = 1; i &lt;= n; i++)\n            b[i][j][k] += b[i - 1][j][k];\n\nint i, j, k, x, y, z;\nstd::cin &gt;&gt; i &gt;&gt; x &gt;&gt; j &gt;&gt; y &gt;&gt; k &gt;&gt; z;\nstd::cout &lt;&lt; b[x][y][z] + b[i - 1][j - 1][z] + b[i - 1][y][k - 1] + b[x][j - 1][k - 1]\n    - b[x][y][k - 1] - b[x][j - 1][z] - b[i - 1][y][z] - b[i - 1][j - 1][k - 1] &lt;&lt; '\\n';\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Basic_and_others/#23-__builtin_popcount","title":"23 __builtin_popcount","text":"<p>__builtin_popcount(x) \u8fd4\u56de x \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d 1 \u7684\u4e2a\u6570\u3002</p> <p>\u4e0d\u5728 std:: \u4e2d</p>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Basic_and_others/#24-stdmt19937-stdshuffle","title":"24 std::mt19937 &amp; std::shuffle \u968f\u673a\u6253\u4e71","text":"C++<pre><code>std::vector&lt;int&gt; a(n);\nfor (int&amp; i : a) std::cin &gt;&gt; i;\n\n// \u521b\u5efa\u968f\u673a\u6570\u5f15\u64ce\nstd::random_device rd; // \u7528\u4e8e\u751f\u6210\u79cd\u5b50\nstd::mt19937 g(rd());  // \u4f7f\u7528 mt19937 \u5f15\u64ce\uff0c\u79cd\u5b50\u7531\u968f\u673a\u8bbe\u5907\u751f\u6210\n\n// \u4f7f\u7528 std::shuffle \u968f\u673a\u6253\u4e71\u5411\u91cf\nstd::shuffle(vec.begin(), vec.end(), g);\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Combinatorics/","title":"Combinatorics","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Combinatorics/#1","title":"1 \u9884\u5904\u7406\u7ec4\u5408\u6570","text":"C++<pre><code>for (int i = 0; i &lt;= 5000; i++) {\n    for (int j = 0; j &lt;= i; j++) {\n        if (!j) C[i][j] = 1;\n        else C[i][j] = C[i - 1][j] + C[i - 1][j - 1];\n        C[i][j] %= mod;\n    }\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Combinatorics/#2-jiangly","title":"2 jiangly \u53d6\u6a21\u8fd0\u7b97+\u7ec4\u5408\u6570\u677f\u5b50","text":"C++<pre><code>using i64 = long long;\ntemplate&lt;class T&gt;\nconstexpr T power(T a, i64 b) {\n    T res {1};\n    for (; b; b /= 2, a *= a) {\n        if (b % 2) {\n            res *= a;\n        }\n    }\n    return res;\n}\n\nconstexpr i64 mul(i64 a, i64 b, i64 p) {\n    i64 res = a * b - i64(1.L * a * b / p) * p;\n    res %= p;\n    if (res &lt; 0) {\n        res += p;\n    }\n    return res;\n}\n\ntemplate&lt;i64 P&gt;\nstruct MInt {\n    i64 x;\n    constexpr MInt() : x {0} {}\n    constexpr MInt(i64 x) : x {norm(x % getMod())} {}\n\n    static i64 Mod;\n    constexpr static i64 getMod() {\n        if (P &gt; 0) {\n            return P;\n        } else {\n            return Mod;\n        }\n    }\n    constexpr static void setMod(i64 Mod_) {\n        Mod = Mod_;\n    }\n    constexpr i64 norm(i64 x) const {\n        if (x &lt; 0) {\n            x += getMod();\n        }\n        if (x &gt;= getMod()) {\n            x -= getMod();\n        }\n        return x;\n    }\n    constexpr i64 val() const {\n        return x;\n    }\n    constexpr MInt operator-() const {\n        MInt res;\n        res.x = norm(getMod() - x);\n        return res;\n    }\n    constexpr MInt inv() const {\n        return power(*this, getMod() - 2);\n    }\n    constexpr MInt &amp;operator*=(MInt rhs) &amp; {\n        if (getMod() &lt; (1ULL &lt;&lt; 31)) {\n            x = x * rhs.x % int(getMod());\n        } else {\n            x = mul(x, rhs.x, getMod());\n        }\n        return *this;\n    }\n    constexpr MInt &amp;operator+=(MInt rhs) &amp; {\n        x = norm(x + rhs.x);\n        return *this;\n    }\n    constexpr MInt &amp;operator-=(MInt rhs) &amp; {\n        x = norm(x - rhs.x);\n        return *this;\n    }\n    constexpr MInt &amp;operator/=(MInt rhs) &amp; {\n        return *this *= rhs.inv();\n    }\n    friend constexpr MInt operator*(MInt lhs, MInt rhs) {\n        MInt res = lhs;\n        res *= rhs;\n        return res;\n    }\n    friend constexpr MInt operator+(MInt lhs, MInt rhs) {\n        MInt res = lhs;\n        res += rhs;\n        return res;\n    }\n    friend constexpr MInt operator-(MInt lhs, MInt rhs) {\n        MInt res = lhs;\n        res -= rhs;\n        return res;\n    }\n    friend constexpr MInt operator/(MInt lhs, MInt rhs) {\n        MInt res = lhs;\n        res /= rhs;\n        return res;\n    }\n    friend constexpr std::istream &amp;operator&gt;&gt;(std::istream &amp;is, MInt &amp;a) {\n        i64 v;\n        is &gt;&gt; v;\n        a = MInt(v);\n        return is;\n    }\n    friend constexpr std::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, const MInt &amp;a) {\n        return os &lt;&lt; a.val();\n    }\n    friend constexpr bool operator==(MInt lhs, MInt rhs) {\n        return lhs.val() == rhs.val();\n    }\n    friend constexpr bool operator!=(MInt lhs, MInt rhs) {\n        return lhs.val() != rhs.val();\n    }\n    friend constexpr bool operator&lt;(MInt lhs, MInt rhs) {\n        return lhs.val() &lt; rhs.val();\n    }\n};\n\ntemplate&lt;&gt;\ni64 MInt&lt;0&gt;::Mod = 998244353;\n\nconstexpr int P = 998244353;\nusing Z = MInt&lt;P&gt;;\n\nstruct Comb {\n    int n;\n    std::vector&lt;Z&gt; _fac;\n    std::vector&lt;Z&gt; _invfac;\n    std::vector&lt;Z&gt; _inv;\n\n    Comb() : n{0}, _fac{1}, _invfac{1}, _inv{0} {}\n    Comb(int n) : Comb() {\n        init(n);\n    }\n\n    void init(int m) {\n        m = std::min&lt;i64&gt;(m, Z::getMod() - 1);\n        if (m &lt;= n) return;\n        _fac.resize(m + 1);\n        _invfac.resize(m + 1);\n        _inv.resize(m + 1);\n\n        for (int i = n + 1; i &lt;= m; i++) {\n            _fac[i] = _fac[i - 1] * i;\n        }\n        _invfac[m] = _fac[m].inv();\n        for (int i = m; i &gt; n; i--) {\n            _invfac[i - 1] = _invfac[i] * i;\n            _inv[i] = _invfac[i] * _fac[i - 1];\n        }\n        n = m;\n    }\n\n    Z fac(int m) {\n        if (m &gt; n) init(2 * m);\n        return _fac[m];\n    }\n    Z invfac(int m) {\n        if (m &gt; n) init(2 * m);\n        return _invfac[m];\n    }\n    Z inv(int m) {\n        if (m &gt; n) init(2 * m);\n        return _inv[m];\n    }\n    Z binom(int n, int m) {\n        if (n &lt; m || m &lt; 0) return 0;\n        return fac(n) * invfac(m) * invfac(n - m);\n    }\n} comb;\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Combinatorics/#3","title":"3 \u65af\u7279\u6797\u6570","text":"<p>\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\uff1a\\(S(n,k)\\), \u628a \\(n\\) \u4e2a\u4e0d\u540c\u7684\u7403\u653e\u5230 \\(k\\) \u4e2a\u76f8\u540c\u7684\u76d2\u5b50\u91cc\uff0c\u4e0d\u80fd\u6709\u7a7a\u76d2\u5b50\uff0c\u6709\u591a\u5c11\u79cd\u5206\u6cd5</p> <ul> <li>\u6c42 \\(S(n, m)\\)</li> </ul> C++<pre><code>#include &lt;bits/stdc++.h&gt;\n#define ll long long\nusing namespace std;\nconst ll N = 2e5 + 5;\nconst ll inf = 1ll &lt;&lt; 62;\nconst ll mod = 1e9 + 7;\nll fac[100010], inv[100010];\nvoid add(ll&amp; a, ll b) {\n    a += b;\n    if (a &gt;= mod) a -= mod;\n}\nll gcd(ll a, ll b) {\n    return b ? gcd(b, a % b) : a;\n}\nll qmi(ll a, ll b) {\n    ll res = 1;\n    for (; b; b &gt;&gt;= 1) {\n        if (b &amp; 1) res = res * a % mod;\n        a = a * a % mod;\n    }\n    return res;\n}\nll f(string s, string t) {\n    ll p = 0;\n    for (ll i = 0; i &lt; s.size(); i++)\n        if (p &lt; t.size() &amp;&amp; s[i] == t[p]) {\n            p++;\n        }\n    return (p == t.size());\n}\nvoid sub(ll&amp; a, ll b) {\n    a -= b;\n    if (a &lt; 0) a += mod;\n}\nll C(ll a, ll b) {\n    return fac[a] * inv[b] % mod * inv[a - b] % mod;\n}\nvoid solve() {\n    ll n, m; cin &gt;&gt; n &gt;&gt; m;\n    if (m &gt; n)\n        cout &lt;&lt; 0 &lt;&lt; endl;\n    else {\n        ll ans = 0;\n        for (int i = 0; i &lt;= m; i++) {\n            if ((m - i) % 2 == 0) {\n                add(ans, qmi(i, n) * inv[i] % mod * inv[m - i] % mod);\n            }\n            else {\n                sub(ans, qmi(i, n) * inv[i] % mod * inv[m - i] % mod);\n            }\n\n        }\n        cout &lt;&lt; ans &lt;&lt; endl;\n    }\n}\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0), cout.tie(0);\n    fac[0] = inv[0] = 1;\n    for (int i = 1; i &lt;= 100000; i++)\n        fac[i] = fac[i - 1] * i % mod;\n    inv[100000] = qmi(fac[100000], mod - 2);\n    for (int i = 100000; i &gt;= 1; i--)\n        inv[i - 1] = inv[i] * i % mod;\n    solve();\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Combinatorics/#4","title":"4 \u5361\u7279\u5170\u6570","text":"\\[ f(n)=C_{2n}^{n} - C_{2n}^{n-1}  \\] \\[ f(n)=\\sum_{i=0}^{n-1}f(i)*f(n-i-1)  \\] \\[ h(n)=\\frac{C_{2n}^{n}}{n+1} \\]"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Combinatorics/#5","title":"5 \u9519\u6392\u516c\u5f0f","text":"<p>\u5047\u8bbe\u6709 \\(n\\) \u4e2a\u5143\u7d20\uff0c\\(n\\) \u4e2a\u4f4d\u7f6e\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u6709\u81ea\u5df1\u552f\u4e00\u7684\u6b63\u786e\u4f4d\u7f6e\uff0c\u95ee\u6240\u6709\u5143\u7d20\u90fd\u5904\u5728\u9519\u8bef\u4f4d\u7f6e\u6709\u591a\u5c11\u53ef\u80fd\uff1f</p> \\[ D(n)=(n-1)*(D(n-1) + D(n-2)), D(1)=0, D(2)=1 \\]"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Combinatorics/#_1","title":"Combinatorics","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/","title":"Computational geometry","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#_1","title":"\u70b9\u7ebf\u591a\u8fb9\u5f62\u5c01\u88c5","text":"C++<pre><code>const double pi = acos(-1.0);\nconst double eps = 1e-8;\n\n// \u5224\u65ad x \u7684\u5927\u5c0f\uff0c&lt;0 \u8fd4\u56de -1\uff0c&gt;0 \u8fd4\u56de 1\uff0c==0 \u8fd4\u56de 0\nint sgn(double x) { \n    if (fabs(x) &lt; eps) return 0;\n    else return x &lt; 0 ? -1 : 1;\n}\n\n// \u6bd4\u8f83\u4e24\u4e2a\u6d6e\u70b9\u6570\nint dcmp(double x, double y) { \n    if (fabs(x - y) &lt; eps) return 0;\n    else return x &lt; y ? -1 : 1;\n}\n\nstruct Point {\n    double x, y;\n    Point() {}\n    Point(double x, double y) : x(x), y(y) {}\n\n    Point operator + (const Point&amp; B) const { return Point(x + B.x, y + B.y); }\n    Point operator - (const Point&amp; B) const { return Point(x - B.x, y - B.y); }\n    Point operator * (double k) const { return Point(x * k, y * k); }\n    Point operator / (double k) const { return Point(x / k, y / k); }\n\n    bool operator == (const Point&amp; B) const { \n        return sgn(x - B.x) == 0 &amp;&amp; sgn(y - B.y) == 0; \n    }\n    bool operator &lt; (const Point&amp; B) const {\n        return sgn(x - B.x) &lt; 0 || sgn(x - B.x) == 0 &amp;&amp; sgb(y - B.y) &lt; 0;\n    }\n};\n\ntypedef Point Vector;\n\nclass Geometry {\npublic:\n    static double Distance(const Point&amp; A, const Point&amp; B) {\n        return sqrt((A.x - B.x) * (A.x - B.x) + (A.y - B.y) * (A.y - B.y));\n    }\n\n    static double Dot(const Vector&amp; A, const Vector&amp; B) {\n        return A.x * B.x + A.y * B.y;\n    }\n\n    static int AngleJudge(const Vector&amp; A, const Vector&amp; B) {\n        return sgn(Dot(A, B));\n    }\n\n    static double Len(const Vector&amp; A) {\n        return sqrt(Dot(A, A));\n    }\n\n    static double Len2(const Vector&amp; A) {\n        return Dot(A, A);\n    }\n\n    static double Angle(const Vector&amp; A, const Vector&amp; B) {\n        return acos(Dot(A, B) / Len(A) / Len(B));\n    }\n\n    static double Cross(const Vector&amp; A, const Vector&amp; B) {\n        return A.x * B.y - A.y * B.x;\n    }\n\n    static double Area2(const Point&amp; A, const Point&amp; B, const Point&amp; C) {\n        return Cross(B - A, C - A);\n    }\n\n    static double AreaTriangle(const Point&amp; A, const Point&amp; B, const Point&amp; C) {\n        return Area2(A, B, C) / 2;\n    }\n\n    static Vector Rotate(const Vector&amp; A, double rad) {\n        return Vector(A.x * cos(rad) - A.y * sin(rad), A.x * sin(rad) + A.y * cos(rad));\n    }\n\n    static Vector Normal(const Vector&amp; A) {\n        double len = Len(A);\n        return Vector(-A.y / len, A.x / len);\n    }\n\n    static bool Parallel(const Vector&amp; A, const Vector&amp; B) {\n        return sgn(Cross(A, B)) == 0;\n    }\n};\n\nclass Line {\npublic:\n    Point p1, p2;\n\n    Line() {}\n    Line(Point p1, Point p2) : p1(p1), p2(p2) {}\n    Line(Point p, double angle) { \n        p1 = p;\n        if (sgn(angle - pi / 2) == 0) { \n            p2 = p1 + Point(0, 1); \n        } else { \n            p2 = p1 + Point(1, tan(angle)); \n        }\n    }\n    Line(double a, double b, double c) { \n        if (sgn(a) == 0) {\n            p1 = Point(0, -c / b);\n            p2 = Point(1, -c / b);\n        } else if (sgn(b) == 0) {\n            p1 = Point(-c / a, 0);\n            p2 = Point(-c / a, 1);\n        } else {\n            p1 = Point(0, -c / b);\n            p2 = Point(1, (-c - a) / b);\n        }\n    }\n\n    int PointLineRelation(const Point&amp; p) const { \n        int c = sgn(Geometry::Cross(p - p1, p2 - p1));\n        if (c &lt; 0) return 1; // p \u5728 v \u7684\u53f3\u4fa7\n        if (c &gt; 0) return 2; // p \u5728 v \u7684\u5de6\u4fa7\n        return 0; // p \u5728 v \u4e0a\n    }\n\n    bool PointOnSegment(const Point&amp; p) const { \n        return sgn(Geometry::Cross(p - p1, p2 - p1)) == 0 &amp;&amp;\n            sgn(Geometry::Dot(p - p1, p - p2)) &lt;= 0;\n    }\n\n    double DistanceToPoint(const Point&amp; p) const { \n        return fabs(Geometry::Cross(p - p1, p2 - p1)) / Geometry::Distance(p1, p2);\n    }\n\n    Point Projection(const Point&amp; p) const { \n        double k = Geometry::Dot(p2 - p1, p - p1) / Geometry::Len2(p2 - p1);\n        return p1 + (p2 - p1) * k;\n    }\n\n    Point SymmetryPoint(const Point&amp; p) const { \n        Point q = Projection(p);\n        return Point(2 * q.x - p.x, 2 * q.y - p.y);\n    }\n\n    static int LineRelation(const Line&amp; v1, const Line&amp; v2) { \n        if (sgn(Geometry::Cross(v1.p2 - v1.p1, v2.p2 - v2.p1)) == 0) {\n            if (v1.PointLineRelation(v2.p1) == 0) return 1; // \u91cd\u5408\n            else return 0; // \u5e73\u884c\n        }\n        return 2; // \u76f8\u4ea4\n    }\n\n    static Point CrossPoint(const Point&amp; a, const Point&amp; b, const Point&amp; c, const Point&amp; d) { \n        double s1 = Geometry::Cross(b - a, c - a);\n        double s2 = Geometry::Cross(b - a, d - a);\n        return Point(c.x * s2 - d.x * s1, c.y * s2 - d.y * s1) / (s2 - s1);\n    }\n};\n\ntypedef Line Segment;\n\nclass SegmentOps {\npublic:\n    static bool CrossSegment(const Point&amp; a, const Point&amp; b, const Point&amp; c, const Point&amp; d) { \n        double c1 = Geometry::Cross(b - a, c - a);\n        double c2 = Geometry::Cross(b - a, d - a);\n        double d1 = Geometry::Cross(d - c, a - c);\n        double d2 = Geometry::Cross(d - c, b - c);\n        return sgn(c1) * sgn(c2) &lt; 0 &amp;&amp; sgn(d1) * sgn(d2) &lt; 0;\n    }\n\n    static double DistanceToPoint(const Point&amp; p, const Segment&amp; v) { \n        if (sgn(Geometry::Dot(p - v.p1, v.p2 - v.p1)) &lt; 0 || sgn(Geometry::Dot(p - v.p2, v.p1 - v.p2)) &lt; 0)\n            return std::min(Geometry::Distance(p, v.p1), Geometry::Distance(p, v.p2));\n        return v.DistanceToPoint(p); // \u70b9\u7684\u6295\u5f71\u5728\u7ebf\u6bb5\u4e0a\n    }\n};\n\nclass PolygonOps {\npublic:\n    static int PointInPolygon(const Point&amp; pt, const std::vector&lt;Point&gt;&amp; p) { \n        int n = p.size();\n        for (int i = 0; i &lt; n; i++) {\n            if (p[i] == pt) return 3; // \u70b9\u5728\u591a\u8fb9\u5f62\u9876\u70b9\u4e0a\n        }\n        for (int i = 0; i &lt; n; i++) {\n            Line v = Line(p[i], p[(i + 1) % n]);\n            if (v.PointOnSegment(pt)) return 2; // \u70b9\u5728\u8fb9\u4e0a\n        }\n        int num = 0;\n        for (int i = 0; i &lt; n; i++) {\n            int j = (i + 1) % n;\n            int c = sgn(Geometry::Cross(pt - p[j], p[i] - p[j]));\n            int u = sgn(p[i].y - pt.y);\n            int v = sgn(p[j].y - pt.y);\n            if (c &gt; 0 &amp;&amp; u &lt; 0 &amp;&amp; v &gt;= 0) num++;\n            if (c &lt; 0 &amp;&amp; u &gt;= 0 &amp;&amp; v &lt; 0) num--;\n        }\n        return num != 0; // 1\uff1a\u70b9\u5728\u5185\u90e8\uff1b0\uff1a\u70b9\u5728\u5916\u90e8\n    }\n\n    static double Area(const std::vector&lt;Point&gt;&amp; p) { \n        double area = 0;\n        int n = p.size();\n        for (int i = 0; i &lt; n; i++)\n            area += Geometry::Cross(p[i], p[(i + 1) % n]);\n        return area / 2; // \u9762\u79ef\u6709\u6b63\u8d1f\n    }\n\n    static Point Center(const std::vector&lt;Point&gt;&amp; p) { \n        Point ans(0, 0);\n        if (Area(p) == 0) return ans;\n        int n = p.size();\n        for (int i = 0; i &lt; n; i++)\n            ans = ans + (p[i] + p[(i + 1) % n]) * Geometry::Cross(p[i], p[(i + 1) % n]);\n        return ans / Area(p) / 6;\n    }\n};\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#_2","title":"\u57fa\u7840\u6570\u503c\u8ba1\u7b97","text":"C++<pre><code>const double pi = acos(-1.0);\nconst double eps = 1e-8;\nint sgn(double x) { // \u5224\u65adx\u7684\u5927\u5c0f\uff0c&lt;0\u8fd4\u56de-1\uff0c&gt;0\u8fd4\u56de1\uff0c==0\u8fd4\u56de0\n    if (fabs(x) &lt; eps) return 0;\n    else return x &lt; 0 ? -1 : 1;\n}\nint dcmp(double x, double y) { // \u6bd4\u8f83\u4e24\u4e2a\u6d6e\u70b9\u6570\n    if (fabs(x - y) &lt; eps) return 0;\n    else return x &lt; y ? -1 : 1;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#_3","title":"\u4e8c\u7ef4\u51e0\u4f55\u677f\u5b50","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#_4","title":"\u70b9&amp;\u5411\u91cf","text":"C++<pre><code>struct Point {\n    double x, y;\n    Point() {}\n    Point(double x, double y) :x(x), y(y) {}\n    Point operator + (Point B) { return Point(x + B.x, y + B.y); }\n    Point operator - (Point B) { return Point(x - B.x, y - B.y); }\n    Point operator * (double k) { return Point(x * k, y * k); }\n    Point operator / (double k) { return Point(x / k, y / k); }\n    bool operator == (Point B) { return sgn(x - B.x) == 0 &amp;&amp; sgn(y - B.y) == 0; }\n};\ndouble Distance(Point A, Point B) {\n    return sqrt((A.x - B.x) * (A.x - B.x) + (A.y - B.y) * (A.y - B.y));\n}\ntypedef Point Vector; // \u5411\u91cf\ndouble Dot(Vector A, Vector B) { return A.x * B.x + A.y + B.y; } // \u70b9\u79ef\nint angle_judge(Vector A, Vector B) {\n    return sgn(Dot(A, B)); // \u8fd4\u56de1\u8868\u793aA\u4e0eB\u5939\u89d2\u4e3a\u9510\u89d2\uff0c-1\u8868\u793a\u949d\u89d2\uff0c0\u8868\u793a\u76f4\u89d2\n}\ndouble Len(Vector A) { return sqrt(Dot(A, A)); } // \u6c42\u5411\u91cfA\u7684\u957f\u5ea6\ndouble Len2(Vector A) { return Dot(A, A); } // \u6c42\u957f\u5ea6\u7684\u5e73\u65b9\uff0c\u907f\u514d\u5f00\u65b9\u8fd0\u7b97\ndouble Angle(Vector A, Vector B) { return acos(Dot(A, B) / Len(A) / Len(B)); } // \u6c42AB\u5939\u89d2\ndouble Cross(Vector A, Vector B) { return A.x * B.y - A.y * B.x; } // \u8ba1\u7b97\u53c9\u79efA\u00d7B=|A||B|sin\u03b8\ndouble Area2(Point A, Point B, Point C) { return Cross(B - A, C - A); } // \u8ba1\u7b97\u4e24\u4e2a\u5411\u91cf\u6784\u6210\u7684\u5e73\u884c\u56db\u8fb9\u5f62\u7684\u6709\u5411\u9762\u79ef\ndouble AreaTrangle(Point A, Point B, Point C) { return Area2(A, B, C) / 2; } // \u4e09\u4e2a\u70b9\u6784\u6210\u7684\u4e09\u89d2\u5f62\u9762\u79ef\nVector Rotate(Vector A, double rad) { // \u5c06\u5411\u91cfA\u9006\u65f6\u9488\u65cb\u8f6crad\u5f27\u5ea6\n    // \u9006\u65f6\u9488\u65cb\u8f6c90\u00b0\u65f6 Rotate(A,pi/2)\u8fd4\u56deVector(-A.y,A.x)\n    // \u987a\u65f6\u9488\u65cb\u8f6c90\u00b0\u65f6 Rotate(A,-pi/2)\u8fd4\u56deVector(A.y,-A.x)\n    return Vector(A.x * cos(rad) - A.y * sin(rad), A.x * sin(rad) + A.y * cos(rad));\n}\nVector Normal(Vector A) { return Vector(-A.y / Len(A), A.x / Len(A)); } // \u6c42\u5355\u4f4d\u6cd5\u5411\u91cf\nbool Parallel(Vector A, Vector B) { return sgn(Cross(A, B)) == 0; } // \u8fd4\u56detrue\u8868\u793a\u5e73\u884c\u6216\u91cd\u5408\nstruct Line {\n    Point p1, p2;\n    Line() {}\n    Line(Point p1, Point p2) :p1(p1), p2(p2) {}\n    Line(Point p, double angle) { // \u70b9\u548c\u89d2\u5ea6\u786e\u5b9a\u76f4\u7ebf\n        p1 = p;\n        if (sgn(angle - pi / 2) == 0) { p2 = (p1 + Point(0, 1)); }\n        else { p2 = (p1 + Point(1, tan(angle))); }\n    }\n    Line(double a, double b, double c) { // ax + by + c = 0\n        if (sgn(a) == 0) {\n            p1 = Point(0, -c / b);\n            p2 = Point(1, -c / b);\n        }\n        else if (sgn(b) == 0) {\n            p1 = Point(-c / a, 0);\n            p2 = Point(-c / a, 1);\n        }\n        else {\n            p1 = Point(0, -c / b);\n            p2 = Point(1, (-c - a) / b);\n        }\n    }\n};\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#_5","title":"\u76f4\u7ebf&amp;\u7ebf\u6bb5","text":"C++<pre><code>typedef Line Segment; // \u7ebf\u6bb5\nint Point_line_relation(Point p, Line v) { // \u5224\u65ad\u70b9\u548c\u76f4\u7ebf\u7684\u4f4d\u7f6e\u5173\u7cfb\n    int c = sgn(Cross(p - v.p1, v.p2 - v.p1));\n    if (c &lt; 0) return 1; // p\u5728v\u7684\u53f3\u4fa7\n    if (c &gt; 0) return 2; // p\u5728v\u7684\u5de6\u4fa7\n    return 0; // p\u5728v\u4e0a\n}\nbool Point_on_seg(Point p, Line v) { // \u5224\u65ad\u70b9p\u662f\u5426\u5728\u7ebf\u6bb5v\u4e0a\n    // \u539f\u7406\uff1a\u5171\u7ebf\u7684\u524d\u63d0\u4e0b\u5224\u65adp\u548cv\u7684\u4e24\u4e2a\u7aef\u70b9\u4ea7\u751f\u7684\u89d2\u662f\u5426\u4e3a\u949d\u89d2\uff08180\u00b0\uff09\n    return sgn(Cross(p - v.p1, v.p2 - v.p1)) == 0 &amp;&amp;\n        sgn(Dot(p - v.p1, p - v.p2)) &lt;= 0;\n}\ndouble Dis_point_line(Point p, Line v) { // \u70b9\u5230\u76f4\u7ebf\u8ddd\u79bb\n    return fabs(Cross(p - v.p1, v.p2 - v.p1)) / Distance(v.p1, v.p2);\n}\nPoint Point_line_proj(Point p, Line v) { // \u70b9\u5728\u76f4\u7ebf\u4e0a\u7684\u6295\u5f71\n    double k = Dot(v.p2 - v.p1, p - v.p1) / Len2(v.p2 - v.p1);\n    return v.p1 + (v.p2 - v.p1) * k;\n}\nPoint Point_line_symmetry(Point p, Line v) { // \u70b9\u5173\u4e8e\u76f4\u7ebf\u7684\u5bf9\u79f0\u70b9\n    Point q = Point_line_proj(p, v);\n    return Point(2 * q.x - p.x, 2 * q.y - p.y);\n}\ndouble Dis_point_seg(Point p, Segment v) { // \u70b9\u5230\u7ebf\u6bb5\u7684\u8ddd\u79bb\n    if (sgn(Dot(p - v.p1, v.p2 - v.p1)) &lt; 0 || sgn(Dot(p - v.p2, v.p1 - v.p2)) &lt; 0)\n        return min(Distance(p, v.p1), Distance(p, v.p2));\n    return Dis_point_line(p, v); // \u70b9\u7684\u6295\u5f71\u5728\u7ebf\u6bb5\u4e0a\n}\nint Line_relation(Line v1, Line v2) { // \u4e24\u6761\u76f4\u7ebf\u7684\u4f4d\u7f6e\u5173\u7cfb\n    if (sgn(Cross(v1.p2 - v1.p1, v2.p2 - v2.p1)) == 0) {\n        if (Point_line_relation(v1.p1, v2) == 0) return 1; // \u91cd\u5408\n        else return 0; // \u5e73\u884c\n    }\n    return 2; // \u76f8\u4ea4\n}\nPoint Cross_point(Point a, Point b, Point c, Point d) { // \u4e24\u6761\u76f4\u7ebf\u7684\u4ea4\u70b9\n    double s1 = Cross(b - a, c - a);\n    double s2 = Cross(b - a, d - a);\n    return Point(c.x * s2 - d.x * s1, c.y * s2 - d.y * s1) / (s2 - s1);\n    // \u8c03\u7528\u524d\u4fdd\u8bc1s2-s1 != 0\uff0c\u5373\u76f4\u7ebfAB\u548cCD\u4e0d\u5171\u7ebf\u4e5f\u4e0d\u5e73\u884c\n}\nbool Cross_segment(Point a, Point b, Point c, Point d) {  // \u5224\u65ad\u4e24\u6761\u7ebf\u6bb5\u662f\u5426\u76f8\u4ea4\n    double c1 = Cross(b - a, c - a), c2 = Cross(b - a, d - a);\n    double d1 = Cross(d - c, a - c), d2 = Cross(d - c, b - c);\n    return sgn(c1) * sgn(c2) &lt; 0 &amp;&amp; sgn(d1) * sgn(d2) &lt; 0;\n}\n// \u6c42\u4e24\u7ebf\u6bb5\u4ea4\u70b9\u65f6\uff0c\u5148\u5224\u65ad\u7ebf\u6bb5\u662f\u5426\u76f8\u4ea4\uff0c\u518d\u5229\u7528\u4e24\u76f4\u7ebf\u6c42\u4ea4\u70b9\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#_6","title":"\u591a\u8fb9\u5f62","text":"C++<pre><code>int Point_in_polygon(Point pt, Point* p, int n) { // \u5224\u65ad\u70b9pt\u548c\u591a\u8fb9\u5f62\u7684\u5173\u7cfb\uff0c*p\u4e3a\u591a\u8fb9\u5f62\n    for (int i = 0; i &lt; n; i++) {\n        if (p[i] == pt) return 3; // \u70b9\u5728\u591a\u8fb9\u5f62\u9876\u70b9\u4e0a\n    }\n    for (int i = 0; i &lt; n; i++) {\n        Line v = Line(p[i], p[(i + 1) % n]);\n        if (Point_on_seg(pt, v)) return 2; // \u70b9\u5728\u8fb9\u4e0a\n    }\n    int num = 0;\n    for (int i = 0; i &lt; n; i++) {\n        int j = (i + 1) % n;\n        int c = sgn(Cross(pt - p[j], p[i] - p[j]));\n        int u = sgn(p[i].y - pt.y);\n        int v = sgn(p[j].y - pt.y);\n        if (c &gt; 0 &amp;&amp; u &lt; 0 &amp;&amp; v &gt;= 0) num++;\n        if (c &lt; 0 &amp;&amp; u &gt;= 0 &amp;&amp; v &lt; 0) num--;\n    }\n    return num != 0; // 1\uff1a\u70b9\u5728\u5185\u90e8\uff1b0\uff1a\u70b9\u5728\u5916\u90e8\n}\ndouble Polygon_area(Point* p, int n) { // \u591a\u8fb9\u5f62\u9762\u79ef\n    double area = 0;\n    for (int i = 0; i &lt; n; i++)\n        area += Cross(p[i], p[(i + 1) % n]);\n    return area / 2; // \u9762\u79ef\u6709\u6b63\u8d1f\n}\nPoint Polygon_center(Point* p, int n) { // \u6c42\u591a\u8fb9\u5f62\u91cd\u5fc3\n    Point ans(0, 0);\n    if (Polygon_area(p, n)) return ans;\n    for (int i = 0; i &lt; n; i++)\n        ans = ans + (p[i] + p[(i + 1) % n]) * Cross(p[i], p[(i + 1) % n]);\n    return ans / Polygon_area(p, n) / 6;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#_7","title":"\u51f8\u5305","text":"<p>\u4f8b: P2742 [USACO5.1] \u5708\u5976\u725bFencing the Cows /\u3010\u6a21\u677f\u3011\u4e8c\u7ef4\u51f8\u5305</p> <p>\u7ed9\u5b9a n \u4e2a\u70b9\u7684\u5750\u6807, \u6c42\u51f8\u5305\u5468\u957f.</p> C++<pre><code>double Distance(Point A, Point B) { return hypot(A.x - B.x, A.y - B.y); }\nint Convex_hull(Point* p, int n, Point* ch) { // ch\u653e\u51f8\u5305\u9876\u70b9\uff0c\u8fd4\u56de\u503c\u662f\u9876\u70b9\u4e2a\u6570\n    n = unique(p, p + n) - p; // \u53bb\u91cd\n    sort(p, p + n);\n    int v = 0;\n    for (int i = 0; i &lt; n; i++) {\n        while (v &gt; 1 &amp;&amp; sgn(Cross(ch[v - 1] - ch[v - 2], p[i] - ch[v - 1])) &lt;= 0)\n            v--;\n        ch[v++] = p[i];\n    }\n    int j = v;\n    // \u6c42\u4e0a\u51f8\u5305\n    for (int i = n - 2; i &gt;= 0; i--) {\n        while (v &gt; j &amp;&amp; sgn(Cross(ch[v - 1] - ch[v - 2], p[i] - ch[v - 1])) &lt;= 0)\n            v--;\n        ch[v++] = p[i];\n    }\n    if (n &gt; 1) v--;\n    return v;\n}\nPoint p[N], ch[N];\n// int v = Convex_hull(p, n, ch);\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#_8","title":"\u51f8\u5305\u76f4\u5f84","text":"<p>https://www.luogu.com.cn/problem/P1452</p> C++<pre><code>class Geometry {\npublic:\n    static double Cross(const Vector&amp; A, const Vector&amp; B) {\n        return A.x * B.y - A.y * B.x;\n    }\n};\n\nint n, m;\nint sta[N], top;  // \u5c06\u51f8\u5305\u4e0a\u7684\u8282\u70b9\u7f16\u53f7\u5b58\u5728\u6808\u91cc\uff0c\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7f16\u53f7\u76f8\u540c\nPoint a[N], ch[N];\nll mx;\n\nll pf(ll x) { return x * x; }\n\nll dis(int p, int q) { return pf(ch[p].x - ch[q].x) + pf(ch[p].y - ch[q].y); }\n\nll sqr(int p, int q, int y) {\n    return abs(Geometry::Cross((ch[q] - ch[p]), (ch[y] - ch[q])));\n}\n\nint Convex_hull(Point* p, int n, Point* ch) { // ch\u653e\u51f8\u5305\u9876\u70b9\uff0c\u8fd4\u56de\u503c\u662f\u9876\u70b9\u4e2a\u6570\n    n = unique(p, p + n) - p; // \u53bb\u91cd\n    sort(p, p + n);\n    int v = 0;\n    for (int i = 0; i &lt; n; i++) {\n        while (v &gt; 1 &amp;&amp; sgn(Geometry::Cross(ch[v - 1] - ch[v - 2], p[i] - ch[v - 1])) &lt;= 0)\n            v--;\n        ch[v++] = p[i];\n    }\n    int j = v;\n    // \u6c42\u4e0a\u51f8\u5305\n    for (int i = n - 2; i &gt;= 0; i--) {\n        while (v &gt; j &amp;&amp; sgn(Geometry::Cross(ch[v - 1] - ch[v - 2], p[i] - ch[v - 1])) &lt;= 0)\n            v--;\n        ch[v++] = p[i];\n    }\n    if (n &gt; 1) v--;\n    return v;\n}\n\nvoid get_longest() {  // \u6c42\u51f8\u5305\u76f4\u5f84\n    mx = 0;\n    int j = 3;\n    if (top &lt; 3) {\n        mx = dis(sta[1], sta[2]);\n        return;\n    }\n    for (int i = 1; i &lt;= top; ++i) {\n        while (sqr(sta[i], sta[i + 1], sta[j]) &lt;=\n            sqr(sta[i], sta[i + 1], sta[j % top + 1]))\n            j = j % top + 1;\n        mx = max(mx, max(dis(sta[i + 1], sta[j]), dis(sta[i], sta[j])));\n    }\n}\n\nint main() {\n    top = 0;\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++) cin &gt;&gt; a[i].x &gt;&gt; a[i].y;\n    int v = Convex_hull(a, n, ch); // \u5148\u6c42\u51f8\u5305\n    for (int i = 1; i &lt;= v; i++) sta[++top] = i - 1; // sta\u5b58\u50a8\u70b9\u7684\u4e0b\u6807\n    sta[v + 1] = 0; // \u5c01\u95ed\u56fe\u5f62\uff0c\u591a\u653e\u7684\u662f\u7b2c\u4e00\u4e2a\u70b9\u7684\u4e0b\u6807\n    get_longest(); // \u6c42\u51f8\u5305\u76f4\u5f84\uff0c\u8be5\u9898\u8f93\u51fa\u76f4\u5f84\u7684\u5e73\u65b9\n    cout &lt;&lt; mx &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#_9","title":"\u5e73\u9762\u6700\u8fd1\u70b9\u5bf9","text":"<p>P1257 \u5e73\u9762\u4e0a\u7684\u6700\u63a5\u8fd1\u70b9\u5bf9</p> C++<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst double eps = 1e-8;\nconst int N = 1e4 + 5;\nconst double INF = 1e20;\nint sgn(double x) {\n    if (fabs(x) &lt; eps) return 0;\n    return x &lt; 0 ? -1 : 1;\n}\nstruct Point {\n    double x, y;\n};\ndouble Distance(Point A, Point B) {\n    return hypot(A.x - B.x, A.y - B.y);\n}\nbool cmpxy(Point A, Point B) {\n    return sgn(A.x - B.x) &lt; 0 || (sgn(A.x - B.x) == 0 &amp;&amp; sgn(A.y - B.y) &lt; 0);\n}\nbool cmpy(Point A, Point B) { return sgn(A.y - B.y) &lt; 0; }\nPoint p[N], tmp_p[N];\ndouble Closest_Pair(int left, int right) {\n    double dis = INF;\n    if (left == right) return dis;\n    if (left + 1 == right) return Distance(p[left], p[right]);\n    int mid = (right + left) / 2;\n    double d1 = Closest_Pair(left, mid);\n    double d2 = Closest_Pair(mid + 1, right);\n    dis = min(d1, d2);\n    int k = 0;\n    for (int i = left; i &lt;= right; i++)\n        if (fabs(p[mid].x - p[i].x) &lt;= dis)\n            tmp_p[k++] = p[i];\n    sort(tmp_p, tmp_p + k, cmpy); // \u6309y\u6392\u5e8f\uff0c\u7528\u4e8e\u526a\u679d\n    for (int i = 0; i &lt; k; i++)\n        for (int j = i + 1; j &lt; k; j++) {\n            if (tmp_p[j].y - tmp_p[i].y &gt;= dis) break;\n            dis = min(dis, Distance(tmp_p[i], tmp_p[j]));\n        }\n    return dis;\n}\nint main()\n{\n    int n;\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++) {\n        scanf(\"%lf %lf\", &amp;p[i].x, &amp;p[i].y);\n    }\n    sort(p, p + n, cmpxy);\n    printf(\"%.4f\\n\", Closest_Pair(0, n - 1));\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#_10","title":"\u5706","text":"C++<pre><code>struct Circle {\n    Point c;\n    double r;\n    Circle() {}\n    Circle(Point c, double r) :c(c), r(r) {}\n    Circle(double x, double y, double _r) { c = Point(x, y), r = _r; }\n};\nint Point_circle_relation(Point p, Circle C) {\n    double dst = Distance(p, C.c);\n    if (sgn(dst - C.r) &lt; 0) return 0; // \u70b9\u5728\u5706\u5185\n    if (sgn(dst - C.r) == 0) return 1; // \u70b9\u5728\u5706\u4e0a\n    return 2; // \u70b9\u5728\u5706\u5916\n}\nint Line_circle_relation(Line v, Circle C) {\n    double dst = Dis_point_line(C.c, v);\n    if (sgn(dst - C.r) &lt; 0) return 0; // \u76f4\u7ebf\u548c\u5706\u76f8\u4ea4\n    if (sgn(dst - C.r) == 0) return 1; // \u76f4\u7ebf\u548c\u5706\u76f8\u5207\n    return 2; // \u76f4\u7ebf\u548c\u5706\u76f8\u79bb\n}\nint Seg_circle_relation(Segment v, Circle C) {\n    double dst = Dis_point_line(C.c, v);\n    if (sgn(dst - C.r) &lt; 0) return 0; // \u7ebf\u6bb5\u548c\u5706\u76f8\u4ea4\n    if (sgn(dst - C.r) == 0) return 1; // \u7ebf\u6bb5\u548c\u5706\u76f8\u5207\n    return 2; // \u7ebf\u6bb5\u548c\u5706\u76f8\u79bb\n}\nint Line_cross_circle(Line v, Circle C, Point&amp; pa, Point&amp; pb) {\n    // \u8fd4\u56de\u503c\u662f\u4ea4\u70b9\u4e2a\u6570\uff0cpa\u548cpb\u662f\u4ea4\u70b9\n    if (Line_circle_relation(v, C) == 2) return 0; // \u65e0\u4ea4\u70b9\n    Point q = Point_line_proj(C.c, v); // \u5706\u5fc3\u5728\u76f4\u7ebf\u4e0a\u7684\u6295\u5f71\u70b9\n    double d = Dis_point_line(C.c, v);\n    double k = sqrt(C.r * C.r - d * d);\n    if (sgn(k) == 0) {\n        pa = q; pb = q; return 1; // \u76f4\u7ebf\u548c\u5706\u76f8\u5207\n    }\n    Point n = (v.p2 - v.p1) / Len(v.p2 - v.p1); // \u5355\u4f4d\u5411\u91cf\n    pa = q + n * k; pb = q - n * k;\n    return 2; // \u4e24\u4e2a\u4ea4\u70b9\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#_11","title":"\u6700\u5c0f\u5706\u8986\u76d6","text":"<p>P1742 \u6700\u5c0f\u5706\u8986\u76d6</p> C++"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#_12","title":"\u4e09\u7ef4\u51e0\u4f55\u677f\u5b50","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#_13","title":"\u70b9&amp;\u5411\u91cf","text":"C++<pre><code>struct Point3 {\n    double x, y, z;\n    Point3() {}\n    Point3(double x, double y, double z) :x(x), y(y), z(z) {}\n    Point3 operator + (Point3 B) { return Point3(x + B.x, y + B.y, z + B.z); }\n    Point3 operator - (Point3 B) { return Point3(x - B.x, y - B.y, z - B.z); }\n    Point3 operator * (double k) { return Point3(x * k, y * k, z * k); }\n    Point3 operator / (double k) { return Point3(x / k, y / k, z / k); }\n    bool operator == (Point3 B) {\n        return sgn(x - B.x) == 0 &amp;&amp;\n            sgn(y - B.y) == 0 &amp;&amp; sgn(z - B.z) == 0;\n    }\n};\ntypedef Point3 Vector3; // \u4e09\u7ef4\u5411\u91cf\ndouble Distance(Vector3 A, Vector3 B) {\n    return sqrt((A.x - B.x) * (A.x - B.x) + (A.y - B.y) * (A.y - B.y) + (A.z - B.z) * (A.z - B.z));\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#_14","title":"\u76f4\u7ebf&amp;\u7ebf\u6bb5","text":"C++<pre><code>struct Line3 {\n    Point3 p1, p2;\n    Line3() {}\n    Line3(Point3 p1, Point3 p2) :p1(p1), p2(p2) {}\n};\ntypedef Line3 Segment3;\ndouble Dot(Vector3 A, Vector3 B) { return A.x * B.x + A.y * B.y + A.z * B.z; }\ndouble Len(Vector3 A) { return sqrt(Dot(A, A)); }\ndouble Len2(Vector3 A) { return Dot(A, A); }\ndouble Angle(Vector3 A, Vector3 B) { return acos(Dot(A, B) / Len(A) / Len(B)); }\nVector3 Cross(Vector3 A, Vector3 B) {\n    return Point3(A.y * B.z - A.z * B.y, A.z * B.x - A.x * B.z, A.x * B.y - A.y * B.x);\n}\ndouble Area2(Point3 A, Point3 B, Point3 C) { return Len(Cross(B - A, C - A)); }\nbool Point_trangle_relation(Point p, Point A, Point B, Point C) {\n    // \u8fd4\u56de1\u8868\u793a\u70b9p\u5728\u4e09\u89d2\u5f62\u5185\n    return dcmp(Area2(p, A, B) + Area2(p, B, C) + Area2(p, C, A), Area2(A, B, C)) == 0;\n}\nbool Point_line_relation(Point3 p, Line3 v) { // 1\u8868\u793a\u70b9\u5728\u76f4\u7ebf\u4e0a\n    return sgn(Len(Cross(v.p1 - p, v.p2 - p))) == 0 &amp;&amp; sgn(Dot(v.p1 - p, v.p2 - p)) == 0;\n}\ndouble Dis_point_seg(Point3 p, Segment3 v) {\n    if (sgn(Dot(p - v.p1, v.p2 - v.p1)) &lt; 0 || sgn(Dot(p - v.p2, v.p1 - v.p2)) &lt; 0)\n        return min(Distance(p, v.p1), Distance(p, v.p2));\n}\nPoint3 Point_line_proj(Point3 p, Line3 v) {\n    double k = Dot(v.p2 - v.p1, p - v.p1) / Len2(v.p2 - v.p1);\n    return v.p1 + (v.p2 - v.p1) * k;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#_15","title":"\u5e73\u9762","text":"C++<pre><code>struct Plane { // \u4e09\u7ef4\u5e73\u9762\n    Point3 p1, p2, p3;\n    Plane() {}\n    Plane(Point3 p1, Point3 p2, Point3 p3) :p1(p1), p2(p2), p3(p3) {}\n};\nPoint3 Pvec(Point3 A, Point3 B, Point3 C) { return Cross(B - A, C - A); } // \u5e73\u9762\u6cd5\u5411\u91cf\nPoint3 Pvec(Plane f) { return Cross(f.p2 - f.p1, f.p3 - f.p1); }\nbool Point_on_plane(Point3 A, Point3 B, Point3 C, Point3 D) { // \u56db\u70b9\u5171\u5e73\u9762\n    return sgn(Dot(Pvec(A, B, C), D - A)) == 0;\n}\n// \u4e24\u5e73\u9762\u5e73\u884c\nint Parallel(Plane f1, Plane f2) { return Len(Cross(Pvec(f1), Pvec(f2))) &lt; eps; }\n// \u4e24\u5e73\u9762\u5782\u76f4\nint Vertical(Plane f1, Plane f2) { return sgn(Dot(Pvec(f1), Pvec(f2))) == 0; }\nint Line_cross_plane(Line3 u, Plane f, Point3&amp; p) { // \u76f4\u7ebf\u548c\u5e73\u9762\u7684\u4ea4\u70b9\n    Point3 v = Pvec(f);\n    double x = Dot(v, u.p2 - f.p1);\n    double y = Dot(v, u.p1 - f.p1);\n    double d = x - y;\n    if (sgn(x) == 0 &amp;&amp; sgn(y) == 0) return -1; // v\u5728f\u4e0a\n    if (sgn(d) == 0) return 0; // v\u4e0ef\u5e73\u884c\n    p = ((u.p1 * x) - (u.p2 * y)) / d; // v\u4e0ef\u76f8\u4ea4\n    return 1;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#_16","title":"\u5176\u4ed6","text":"C++<pre><code>double volume4(Point3 a, Point3 b, Point3 c, Point3 d) { // \u56db\u9762\u4f53\u6709\u5411\u4f53\u79ef*6\n    return Dot(Cross(b - a, c - a), d - a);\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#_17","title":"\u6781\u89d2\u6392\u5e8f","text":"<p>\u6211\u4eec\u77e5\u9053\uff0c\u4e00\u4e2a\u70b9\u7684\u5750\u6807\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6781\u5750\u6807\uff0c\u5176\u4e2d\u6781\u89d2\u7684\u8303\u56f4\u662f \\([0, 2\\pi)\\) \uff0c\u90a3\u4e48\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u89d2\u5ea6\u5bf9\u6240\u6709\u70b9\u8fdb\u884c\u6392\u5e8f\u3002</p>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#longdouble","title":"\uff08long\uff09double \u6392\u5e8f","text":"<p>\u8fd9\u79cd\u65b9\u5f0f\u5e38\u6570\u5c0f\uff0c\u4f46\u4f1a\u635f\u5931\u7cbe\u5ea6\u3002</p> <p>atan2(y,x)\uff0c\u8868\u793a \\((x, y)\\) \u8fd9\u4e2a\u70b9\u4e0e\u539f\u70b9\u8fde\u7ebf\uff0c\u8fd9\u6761\u7ebf\u4e0ex\u8f74\u6b63\u534a\u8f74\u7684\u5939\u89d2\uff0c\u8fd9\u91cc\u7684\u8fd9\u4e2a\u6781\u89d2\u7684\u8303\u56f4\u662f \\([\u2212\\pi,\\pi]\\) \u7684\uff0c\u4e00\u4e8c\u8c61\u9650\u4e3a\u6b63\uff0c\u4e09\u56db\u8c61\u9650\u4e3a\u8d1f\u3002</p> <p>\u4ece\u5c0f\u5230\u5927\u6392\u5b8c\u5e8f\u540e\uff0c\u5b9e\u9645\u4e0a\u662f\u7b2c\u4e09\u8c61\u9650\u2192\u7b2c\u56db\u8c61\u9650\u2192\u7b2c\u4e00\u8c61\u9650\u2192\u7b2c\u4e8c\u8c61\u9650\u3002</p> C++<pre><code>struct Point{\n    int x, y;\n    double angle;\n    bool operator &lt; (const node &amp;t) const{\n        return angle &lt; t.angle;\n    }\n};\nfor (int i = 1; i &lt;= n; i++){\n    cin &gt;&gt; p[i].x &gt;&gt; p[i].y;\n    p[i].angle = atan2(p[i].y, p[i].x);\n}\nsort(p + 1, p + n + 1, cmp);\n\n// \u6216\nusing Points = vector&lt;Point&gt;;\ndouble theta(auto p) { return atan2(p.y, p.x); } // \u6c42\u6781\u89d2\nvoid psort(Points &amp;ps, Point c = O)              // \u6781\u89d2\u6392\u5e8f\n{\n    sort(ps.begin(), ps.end(), [&amp;](auto p1, auto p2) {\n        return lt(theta(p1 - c), theta(p2 - c));\n    });\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#long-long","title":"long long \u53c9\u79ef\u6392\u5e8f","text":"<p>\u8fd9\u79cd\u65b9\u5f0f\u5e38\u6570\u5927\uff0c\u4f46\u82e5\u6240\u6709\u7684\u70b9\u5750\u6807\u90fd\u662f\u6574\u6570\uff0c\u4f1a\u907f\u514d\u6240\u6709\u7684\u7cbe\u5ea6\u95ee\u9898\u3002</p> <p>\u4ee5\u4e0b\u4ee3\u7801\u6392\u5e8f\u540e\uff0c\u5f97\u5230\u7684\u987a\u5e8f\u662f\u4ece x \u6b63\u534a\u8f74\u5f00\u59cb\u9006\u65f6\u9488\u65cb\u8f6c\u626b\u8fc7\u7684\u4f4d\u7f6e\u3002</p> C++<pre><code>struct Point {\n    ll x, y;\n    ll operator * (const Point&amp; p) const {\n        return x * p.y - y * p.x;\n    }\n};\nint f(Point a) {\n    if (a.x &gt; 0 &amp;&amp; a.y &gt;= 0) return 1; // \u7b2c\u4e00\u8c61\u9650\u548cx\u6b63\u534a\u8f74\n    if (a.x &lt;= 0 &amp;&amp; a.y &gt; 0) return 2; // \u7b2c\u4e8c\u8c61\u9650\u548cy\u6b63\u534a\u8f74\n    if (a.x &lt; 0 &amp;&amp; a.y &lt;= 0) return 3; // \u7b2c\u4e09\u8c61\u9650\u548cx\u8d1f\u534a\u8f74\n    if (a.x &gt;= 0 &amp;&amp; a.y &lt; 0) return 4; // \u7b2c\u56db\u8c61\u9650\u548cy\u8d1f\u534a\u8f74\n    return 0;\n}\nbool cmp(Point a, Point b) {\n    if (f(a) != f(b)) return f(a) &lt; f(b);\n    return a * b &gt; 0;\n}\n\nPoint points[N];\nsort(points, points + n, cmp);\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#1-2021-icpc-c","title":"\u4f8b\u98981-2021 ICPC \u6fb3\u95e8 C","text":"<p>\u9898\u610f\uff1a\u7ed9\u5b9a n \u4e2a\u6574\u6570\u5750\u6807\u70b9\uff0c\u4efb\u610f\u4e24\u70b9\u90fd\u6709\u4e00\u6761\u8fde\u7ebf\uff0c\u6c42\u81f3\u5c11\u8981\u5220\u9664\u591a\u5c11\u4e2a\u70b9\uff0c\u624d\u80fd\u8ba9\u539f\u70b9\u4e0d\u88ab\u5269\u4f59\u70b9\u7684\u8fde\u7ebf\u5305\u56f4\u4f4f\uff1f\u9898\u76ee\u4fdd\u8bc1\u6ca1\u6709\u8fde\u7ebf\u4f1a\u7ecf\u8fc7\u539f\u70b9\u3002</p> <p>\u5206\u6790\uff1a\u82e5\u8981\u6ee1\u8db3\u9898\u610f\uff0c\u5219\u5269\u4f59\u7684\u70b9\u5fc5\u5b9a\u5728\u4ee5\u539f\u70b9\u4e3a\u9876\u70b9\u7684180\u00b0\u8303\u56f4\u4e4b\u5185\u3002\u5bf9\u7ed9\u51fa\u7684\u70b9\u8fdb\u884c\u6781\u89d2\u6392\u5e8f\uff0c\u53cc\u6307\u9488\u679a\u4e3e\u8fdb\u884c\u904d\u5386\uff0c\u66f4\u65b0\u7b54\u6848\u3002</p> C++<pre><code>#include &lt;bits/stdc++.h&gt;\n#define ll long long\nusing namespace std;\nconst int N = 1e6 + 5;\nstruct Point {\n    ll x, y;\n    ll operator * (const Point&amp; p) const {\n        return x * p.y - y * p.x;\n    }\n}points[N * 2];\nint f(Point a) {\n    if (a.x &gt; 0 &amp;&amp; a.y &gt;= 0) return 1;\n    if (a.x &lt;= 0 &amp;&amp; a.y &gt; 0) return 2;\n    if (a.x &lt; 0 &amp;&amp; a.y &lt;= 0) return 3;\n    if (a.x &gt;= 0 &amp;&amp; a.y &lt; 0) return 4;\n    return 0;\n}\nbool cmp(Point a, Point b) {\n    if (f(a) != f(b)) return f(a) &lt; f(b);\n    return a * b &gt; 0;\n}\nint n;\nvoid solve()\n{\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++) {\n        int x, y;\n        cin &gt;&gt; x &gt;&gt; y;\n        points[i] = {x, y};\n    }\n    sort(points, points + n, cmp);\n    for (int i = 0; i &lt; n; i++) points[i + n] = points[i];\n    int l = 0, r = 0;\n    int ans = 0;\n    while (l &lt; n) {\n        r = max(r, l);\n        Point c;\n        // c\u662fp[l]\u5173\u4e8e\u539f\u70b9\u7684\u5bf9\u79f0\u70b9\n        c.x = -points[l].x, c.y = -points[l].y;\n        // p[r]\u5728p[l]\u548cc\u6784\u6210\u7684\u534a\u5706\u8303\u56f4\u5185\n        while (r - l &lt; n &amp;&amp; points[r] * c &gt;= 0) {\n            r++;\n        }\n        ans = max(ans, r - l);\n        l++;\n    }\n    cout &lt;&lt; n - ans &lt;&lt; '\\n';\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T;\n    cin &gt;&gt; T;\n    while (T--)\n        solve();\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#_18","title":"\u8ddd\u79bb","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#_19","title":"\u6b27\u5f0f\u8ddd\u79bb","text":"\\[ \u4e8c\u7ef4\uff1a|AB|=\\sqrt[]{(x_1-x_2)^2 + (y_1-y_2)^2} \\] \\[ \u4e09\u7ef4\uff1a|AB|=\\sqrt[]{(x_1-x_2)^2 + (y_1-y_2)^2 + (z_1-z_2)^2} \\]"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#_20","title":"\u66fc\u54c8\u987f\u8ddd\u79bb","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#_21","title":"\u5b9a\u4e49","text":"<p>\u5728\u4e8c\u7ef4\u7a7a\u95f4\u5185\uff0c\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\uff08Manhattan distance\uff09\u4e3a\u5b83\u4eec\u6a2a\u5750\u6807\u4e4b\u5dee\u7684\u7edd\u5bf9\u503c\u4e0e\u7eb5\u5750\u6807\u4e4b\u5dee\u7684\u7edd\u5bf9\u503c\u4e4b\u548c\u3002\u5219 A \\((x_1, y_1)\\)\uff0cB \\((x_2, y_2)\\)  \u4e4b\u95f4\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u7528\u516c\u5f0f\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a $$ d(A,B)=|x_1-x_2|+|y_1-y_2| $$</p>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#_22","title":"\u6027\u8d28","text":"<ul> <li>\u975e\u8d1f\u6027\uff1a\u66fc\u54c8\u987f\u8ddd\u79bb\u662f\u4e00\u4e2a\u975e\u8d1f\u6570</li> <li>\u7edf\u4e00\u6027\uff1a\u70b9\u5230\u81ea\u8eab\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u4e3a 0</li> <li>\u5bf9\u79f0\u6027\uff1aA \u5230 B\u7684\u8ddd\u79bb\u4e0e B \u5230 A \u7684\u8ddd\u79bb\u76f8\u7b49</li> <li>\u4e09\u89d2\u4e0d\u7b49\u5f0f\uff1a\u4ece\u70b9 i \u5230\u70b9 j \u7684\u76f4\u63a5\u8ddd\u79bb\u4e0d\u4f1a\u5927\u4e8e\u9014\u5f84\u4efb\u4f55\u5176\u4ed6\u70b9 k \u7684\u8ddd\u79bb</li> </ul>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#_23","title":"\u5207\u6bd4\u96ea\u592b\u8ddd\u79bb","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#_24","title":"\u5b9a\u4e49","text":"<p>\u5207\u6bd4\u96ea\u592b\u8ddd\u79bb\uff08Chebyshev distance\uff09\u662f\u5411\u91cf\u7a7a\u95f4\u4e2d\u7684\u4e00\u79cd\u5ea6\u91cf\uff0c\u4e8c\u4e2a\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u5b9a\u4e49\u4e3a\u5176\u5404\u5750\u6807\u6570\u503c\u5dee\u7684\u6700\u5927\u503c\u3002 $$ d(A,B)=max(|x_1-x_2|,|y_1-y_2|) $$ \u53ef\u4ee5\u7406\u89e3\u4e3a\u4ece\u4e00\u4e2a\u70b9\u51fa\u53d1\uff0c\u53ef\u4ee5\u5f80\u4e0a\u4e0b\u5de6\u53f3 \u5de6\u4e0a \u5de6\u4e0b \u53f3\u4e0a \u53f3\u4e0b 8\u4e2a\u65b9\u5411\u524d\u8fdb\uff0c\u5230\u8fbe\u53e6\u4e00\u4e2a\u70b9\u6240\u9700\u7684\u6700\u5c0f\u6b65\u6570\u3002</p>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#_25","title":"\u5207\u6bd4\u96ea\u592b\u8ddd\u79bb\u4e0e\u66fc\u54c8\u987f\u8ddd\u79bb\u7684\u76f8\u4e92\u8f6c\u5316","text":"<p>\u66fc\u54c8\u987f\u5750\u6807\u7cfb\u662f\u901a\u8fc7\u5207\u6bd4\u96ea\u592b\u5750\u6807\u7cfb\u65cb\u8f6c45\u00b0\u540e\uff0c\u518d\u7f29\u5c0f\u5230\u539f\u6765\u7684\u4e00\u534a\u5f97\u5230\u7684\u3002</p> <p>\u5c06\u4e00\u4e2a\u70b9 \\((x, y)\\) \u7684\u5750\u6807\u53d8\u4e3a \\((x+y, x-y)\\) \u540e\uff0c\u539f\u5750\u6807\u7cfb\u4e2d\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u7b49\u4e8e\u65b0\u5750\u6807\u7cfb\u4e2d\u7684\u5207\u6bd4\u96ea\u592b\u8ddd\u79bb\u3002</p> <p>\u5c06\u4e00\u4e2a\u70b9 \\((x, y)\\) \u7684\u5750\u6807\u53d8\u4e3a \\((\\frac{(x+y)}{2}, \\frac{(x-y)}{2})\\) \u540e\uff0c\u539f\u5750\u6807\u7cfb\u4e2d\u7684\u5207\u6bd4\u96ea\u592b\u8ddd\u79bb\u7b49\u4e8e\u65b0\u5750\u6807\u7cfb\u4e2d\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u3002</p>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Computational_geometry/#_26","title":"\u7ed9\u5b9a\u4e24\u77e9\u5f62\u6c42\u91cd\u53e0\u9762\u79ef","text":"C++<pre><code>while(scanf(\"%lf%lf%lf%lf%lf%lf%lf%lf\",&amp;a,&amp;b,&amp;c,&amp;d,&amp;e,&amp;f,&amp;g,&amp;h)!=EOF) {\n    s = 0.00;\n    double x1,y1,x2,y2,x3,y3,x4,y4;\n\n    x1 = min(a,c); x2 = max(a,c);       //\u786e\u4fdd\u5bf9\u89d2\u7ebf\u7684\u70b9\u662f\u5de6\u4e0b\u548c\u53f3\u4e0a\n    x3 = min(e,g); x4 = max(e,g);\n    y1 = min(b,d); y2 = max(b,d);\n    y3 = min(f,h); y4 = max(f,h);\n\n    double left = max(x1,x3);\n    double right = min(x2,x4);\n    double up = min(y2,y4);\n    double down = max(y1,y3);\n    //printf(\"%f %f %f %f\\n\",left,right,up,down);\n    if(left &lt; right &amp;&amp; up &gt; down) s = (right-left)*(up-down);\n    printf(\"%.2lf\\n\",s);\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Data_structure/","title":"Data structure","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Data_structure/#1","title":"1 \u5e76\u67e5\u96c6","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Data_structure/#_1","title":"\u6734\u7d20\u7248","text":"C++<pre><code>int fa[N];\nint find(int x) { return fa[x] == x ? x : fa[x] = find(fa[x]); }\nvoid solve() {\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++) fa[i] = i;\n    for (int i = 0; i &lt; m; i++) {\n        int x, y, z;\n        cin &gt;&gt; z &gt;&gt; x &gt;&gt; y;\n        if (z == 1) {\n            int u = find(x);\n            int v = find(y);\n            fa[u] = fa[v];\n        }\n        else {\n            if (find(x) == find(y)) {\n                cout &lt;&lt; \"Y\\n\";\n            }\n            else {\n                cout &lt;&lt; \"N\\n\";\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Data_structure/#_2","title":"\u5168\u529f\u80fd\u5c01\u88c5","text":"C++<pre><code>struct DSU {\n    std::vector&lt;int&gt; f, siz;\n\n    DSU() {}\n    DSU(int n) {\n        init(n);\n    }\n\n    void init(int n) {\n        f.resize(n);\n        std::iota(f.begin(), f.end(), 0);\n        siz.assign(n, 1);\n    }\n\n    int find(int x) {\n        while (x != f[x]) {\n            x = f[x] = f[f[x]];\n        }\n        return x;\n    }\n\n    bool same(int x, int y) {\n        return find(x) == find(y);\n    }\n\n    bool merge(int x, int y) {\n        x = find(x);\n        y = find(y);\n        if (x == y) {\n            return false;\n        }\n        siz[x] += siz[y];\n        f[y] = x;\n        return true;\n    }\n\n    int size(int x) {\n        return siz[find(x)];\n    }\n};\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Data_structure/#2","title":"2 \u6811\u72b6\u6570\u7ec4","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Data_structure/#_3","title":"\u5355\u70b9\u4fee\u6539\u3001\u533a\u95f4\u6c42\u548c","text":"C++<pre><code>int tr[N], n, q;\nint lowbit(int x) { return x &amp; -x; }\nvoid add(int x, int y) {\n    for(; x &lt;= n; x += lowbit(x))\n        tr[x] += y;\n}\nint query(int x) {\n    int ans = 0;\n    for(; x; x -= lowbit(x))\n        ans += tr[x];\n    return ans;\n}\nvoid solve() {\n    cin &gt;&gt; n &gt;&gt; q;\n    for (int i = 1; i &lt;= n; i++) {\n        int x;\n        cin &gt;&gt; x;\n        add(i, x);\n    }\n    while (q--) {\n        int op;\n        cin &gt;&gt; op;\n        if(op == 1) {\n            int x, k;\n            cin &gt;&gt; x &gt;&gt; k;\n            add(x, k);\n        }\n        else {\n            int x, y;\n            cin &gt;&gt; x &gt;&gt; y;\n            cout &lt;&lt; query(y) - query(x - 1) &lt;&lt; '\\n';\n        }\n    }\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Data_structure/#_4","title":"\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2","text":"C++<pre><code>int a[N];\nint b[N], c[N];\nint n, m;\nint lowbit(int x) {\n    return x &amp; (-x);\n}\nvoid add(int x, int y) {\n    int i, j;\n    for (i = x; i &lt;= n; i += lowbit(i))\n        c[i] += y;\n}\nint query(int x) {\n    int i, res = 0;\n    for (i = x; i &gt; 0; i -= lowbit(i))\n        res += c[i];\n    return res;\n}\nvoid solve() {\n    cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n        b[i] = a[i] - a[i - 1];\n        add(i, b[i]);\n    }\n    for (int i = 1; i &lt;= m; i++) {\n        string s;\n        cin &gt;&gt; s;\n        if (s[0] == 'C') {\n            int l, r, d;\n            cin &gt;&gt; l &gt;&gt; r &gt;&gt; d;\n            add(l, d); add(r + 1, -d);\n        }\n        else {\n            int t;\n            cin &gt;&gt; t;\n            cout &lt;&lt; query(t) &lt;&lt; endl;\n        }\n    }\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Data_structure/#_5","title":"\u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2","text":"C++<pre><code>int n, m;\nll b[N], a[N], c1[N], c2[N];\nint lowbit(int x) {\n    return x &amp; (-x);\n}\nvoid add(ll x, ll y) {\n    for (int i = x; i &lt;= n; i += lowbit(i)) {\n        c1[i] += y;\n        c2[i] += y * x;\n    }\n}\nll query(ll x) {\n    ll i, res = 0;\n    for (i = x; i &gt; 0; i -= lowbit(i))\n        res += (x + 1) * c1[i] - c2[i];\n    return res;\n}\nvoid solve() {\n    int i, j;\n    cin &gt;&gt; n &gt;&gt; m;\n    for (i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n        b[i] = a[i] - a[i - 1];\n        add(i, b[i]);\n    }\n    for (i = 1; i &lt;= m; i++) {\n        string s; ll l, r, d;\n        cin &gt;&gt; s;\n        if (s[0] == 'C') {//\u533a\u95f4\u4fee\u6539\n            cin &gt;&gt; l &gt;&gt; r &gt;&gt; d;\n            add(l, d);\n            add(r + 1, -d);\n        }\n        else {//\u533a\u95f4\u67e5\u8be2\n            cin &gt;&gt; l &gt;&gt; r;\n            cout &lt;&lt; query(r) - query(l - 1) &lt;&lt; endl;\n        }\n    }\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Data_structure/#3","title":"3 \u5206\u5757","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Data_structure/#_6","title":"\u533a\u95f4\u52a0\u6cd5\u3001\u5355\u70b9\u67e5\u503c","text":"C++<pre><code>int n, par; // par \u4e3a\u533a\u5757\u957f\u5ea6\nint belong[N]; // \u8bb0\u5f55\u6240\u5c5e\u533a\u5757\nint l[MAXPAR], r[MAXPAR];\nint part[MAXPAR];\nvoid build() {\n    par = sqrt(n);\n    int cnt = n / par;\n    int ptop = 1;\n    for(int i = 1; i &lt;= cnt; i++) {\n        l[i] = ptop;\n        for(int j = 1; j &lt;= par; j++)\n            belong[ptop++] = i;\n        r[i] = ptop - 1;\n    }\n    while(ptop &lt;= n) // \u6700\u53f3\u4fa7\u591a\u4f59\u7684\u90e8\u5206\n        belong[ptop++] = cnt;\n    r[cnt] = n;\n}\nvoid add(int L, int R, int c) {\n    if(belong[L] == belong[R]) {\n        for(int i = L; i &lt;= R; i++)\n            a[i] += c;\n    }\n    else {\n        for(int i = L; i &lt;= r[belong[L]]; i++)\n            a[i] += c;\n        for(int i = l[belong[R]]; i &lt;= R; i++)\n            a[i] += c;\n        for(int i = belong[L] + 1; i &lt;= belong[R] - 1; i++)\n            part[i] += c;\n    }\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Data_structure/#4-k","title":"4 \u4e3b\u5e2d\u6811\uff08\u533a\u95f4\u7b2c k \u5c0f\u6a21\u7248\uff09","text":"C++<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 2e5 + 5;\nconst int M = 2e5 + 5;\nint n, m;\nint a[N], idx;\nvector&lt;int&gt; nums;//\u53bb\u91cd\u6570\u7ec4 \nstruct Node {\n    int l, r;//\u5de6\u53f3\u5b50\u8282\u70b9\u7f16\u53f7 \n    int cnt;\n}tr[N * 4 + N * 18];//\u5f00 N*4+N*lgN \u4e2a\u7a7a\u95f4 \nint root[N];//\u4e00\u5171\u9700\u8981\u4fdd\u5b58 N \u4e2a\u5386\u53f2\u8bb0\u5f55\nint find(int x) {\n    int l = 0, r = nums.size() - 1;\n    while (l != r) {\n        int mid = (l + r) / 2;\n        if (nums[mid] &gt;= x)  r = mid;\n        else    l = mid + 1;\n    }\n    return l;\n}\nint build(int l, int r) {//\u5efa\u6811\uff0ccnt \u90fd\u4e3a 0\n    int q = ++idx;\n    if (l == r)  return q;\n    int mid = (l + r) / 2;\n    tr[q].l = build(l, mid);\n    tr[q].r = build(mid + 1, r);\n    return q;\n}\nint insert(int p, int l, int r, int x) {\n    int q = ++idx;\n    tr[q] = tr[p];\n    if (l == r) {\n        tr[q].cnt++;\n        return q;\n    }\n    int mid = (l + r) / 2;\n    //\u5e94\u8be5\u66f4\u65b0\u54ea\u4e00\u4e2a\u503c\u57df\u533a\u95f4\n    if (x &lt;= mid)\n        tr[q].l = insert(tr[p].l, l, mid, x);\n    else\n        tr[q].r = insert(tr[p].r, mid + 1, r, x);\n    tr[q].cnt = tr[tr[q].l].cnt + tr[tr[q].r].cnt;\n    return q;\n}\nint query(int q, int p, int l, int r, int k) {\n    if (l == r)  return r;\n    //\u6709\u591a\u5c11\u4e2a\u6570\u843d\u5728\u503c\u57df\u4e3a [l,mid] \u4e2d \n    int cnt = tr[tr[q].l].cnt - tr[tr[p].l].cnt;\n    int mid = (l + r) / 2;\n    if (k &lt;= cnt)\n        return query(tr[q].l, tr[p].l, l, mid, k);\n    else\n        return query(tr[q].r, tr[p].r, mid + 1, r, k - cnt);\n}\nint main() {\n    int i, j;\n    cin &gt;&gt; n &gt;&gt; m;\n    for (i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n        nums.push_back(a[i]);\n    }\n    sort(nums.begin(), nums.end());\n    nums.erase(unique(nums.begin(), nums.end()), nums.end());\n    root[0] = build(0, nums.size() - 1);//\u4e0b\u6807\u4ece 0 \u5f00\u59cb\n    for (i = 1; i &lt;= n; i++) {\n        root[i] = insert(root[i - 1], 0, nums.size() - 1, find(a[i]));\n        //\u5efa\u7acb\u53ef\u6301\u4e45\u8bdd\u7ebf\u6bb5\u6811\n    }\n    for (i = 1; i &lt;= m; i++) {\n        int l, r, k;\n        cin &gt;&gt; l &gt;&gt; r &gt;&gt; k;\n        cout &lt;&lt; nums[query(root[r], root[l - 1], 0, nums.size() - 1, k)] &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Data_structure/#5","title":"5 \u66ff\u7f6a\u7f8a\u6811","text":"<p>P3369 \u3010\u6a21\u677f\u3011\u666e\u901a\u5e73\u8861\u6811</p> <p>\u5199\u4e00\u79cd\u80fd\u591f\u6ee1\u8db3\u4ee5\u4e0b\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\uff1a</p> <ol> <li>\u63d2\u5165\u4e00\u4e2a\u6570 \\(x\\)\u3002</li> <li>\u5220\u9664\u4e00\u4e2a\u6570 \\(x\\)\uff08\u82e5\u6709\u591a\u4e2a\u76f8\u540c\u7684\u6570\uff0c\u5e94\u53ea\u5220\u9664\u4e00\u4e2a\uff09\u3002</li> <li>\u5b9a\u4e49\u6392\u540d\u4e3a\u6bd4\u5f53\u524d\u6570\u5c0f\u7684\u6570\u7684\u4e2a\u6570 \\(+1\\)\u3002\u67e5\u8be2 \\(x\\) \u7684\u6392\u540d\u3002</li> <li>\u67e5\u8be2\u6570\u636e\u7ed3\u6784\u4e2d\u6392\u540d\u4e3a \\(x\\) \u7684\u6570\u3002</li> <li>\u6c42 \\(x\\) \u7684\u524d\u9a71\uff08\u524d\u9a71\u5b9a\u4e49\u4e3a\u5c0f\u4e8e \\(x\\)\uff0c\u4e14\u6700\u5927\u7684\u6570\uff09\u3002</li> <li>\u6c42 \\(x\\) \u7684\u540e\u7ee7\uff08\u540e\u7ee7\u5b9a\u4e49\u4e3a\u5927\u4e8e \\(x\\)\uff0c\u4e14\u6700\u5c0f\u7684\u6570\uff09\u3002</li> </ol> <p>\u5bf9\u4e8e\u64cd\u4f5c 3,5,6\uff0c\u4e0d\u4fdd\u8bc1\u5f53\u524d\u6570\u636e\u7ed3\u6784\u4e2d\u5b58\u5728\u6570 \\(x\\)\u3002</p> <p>\u5bf9\u4e8e\u64cd\u4f5c \\(3,4,5,6\\) \u6bcf\u884c\u8f93\u51fa\u4e00\u4e2a\u6570\uff0c\u8868\u793a\u5bf9\u5e94\u7b54\u6848\u3002</p> <p>\u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\\(1\\le n \\le 10^5\\)\uff0c\\(|x| \\le 10^7\\)</p> C++<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 1e6 + 5;\nconst double alpha = 0.75; // \u4e0d\u5e73\u8861\u7387\nstruct Node {\n    int ls, rs;\n    int val;\n    int tot; // \u5f53\u524d\u5b50\u6811\u5360\u7528\u7684\u7a7a\u95f4\u6570\u91cf\uff0c\u5305\u62ec\u5b9e\u9645\u5b58\u50a8\u7684\u8282\u70b9\u548c\u88ab\u6807\u8bb0\u5220\u9664\u7684\u8282\u70b9\n    int size; // \u5b50\u6811\u4e0a\u5b9e\u9645\u5b58\u50a8\u6570\u5b57\u7684\u6570\u91cf\n    bool del; // del=1 \u8868\u793a\u8fd9\u4e2a\u8282\u70b9\u5b58\u6709\u6570\u5b57\uff0c=0 \u8868\u793a\u88ab\u5220\u9664\n}t[N];\nint order[N], cnt; // order[] \u8bb0\u5f55\u62cd\u5e73\u540e\u7684\u7ed3\u679c\uff0c\u5373\u90a3\u4e9b\u5b58\u6709\u6570\u5b57\u7684\u8282\u70b9\nint tree_stack[N], top = 0; // \u7528\u6808\u6765\u56de\u6536\u548c\u5206\u914d\u53ef\u7528\u7684\u8282\u70b9\nint root = 0; // \u91cd\u5efa\u8fc7\u7a0b\u4e2d\u6839\u8282\u70b9\u4f1a\u53d8\u5316\nvoid inorder(int u) { // \u4e2d\u5e8f\u904d\u5386\uff0c\u201c\u62cd\u5e73\u201d\u6467\u6bc1\u8fd9\u68f5\u5b50\u6811\n    if (!u) return;\n    inorder(t[u].ls);\n    if (t[u].del) order[++cnt] = u;\n    else tree_stack[++top] = u;\n    inorder(t[u].rs);\n}\nvoid initnode(int u) {\n    t[u].ls = t[u].rs = 0;\n    t[u].size = t[u].tot = t[u].del = 1;\n}\nvoid update(int u) {\n    t[u].size = t[t[u].ls].size + t[t[u].rs].size + 1;\n    t[u].tot = t[t[u].ls].tot + t[t[u].rs].tot + 1;\n}\nvoid build(int l, int r, int&amp; u) {\n    int mid = (l + r) &gt;&gt; 1;\n    u = order[mid];\n    if (l == r) { initnode(u); return; }\n    if (l &lt; mid) build(l, mid - 1, t[u].ls);\n    if (l == mid) t[u].ls = 0;\n    build(mid + 1, r, t[u].rs);\n    update(u);\n}\nvoid rebuild(int&amp; u) {\n    cnt = 0;\n    inorder(u);\n    if (cnt) build(1, cnt, u);\n    else u = 0;\n}\nbool notbalance(int u) {\n    if ((double)t[u].size * alpha &lt;= (double)max(t[t[u].ls].size, t[t[u].rs].size))\n        return true;\n    return false;\n}\nvoid Insert(int&amp; u, int x) {\n    if (!u) {\n        u = tree_stack[top--];\n        t[u].val = x;\n        initnode(u);\n        return;\n    }\n    t[u].size++;\n    t[u].tot++;\n    if (t[u].val &gt;= x) Insert(t[u].ls, x);\n    else Insert(t[u].rs, x);\n    if (notbalance(u)) rebuild(u);\n}\nint Rank(int u, int x) {\n    if (u == 0) return 0;\n    if (x &gt; t[u].val) return t[t[u].ls].size + t[u].del + Rank(t[u].rs, x);\n    return Rank(t[u].ls, x);\n}\nint kth(int k) {\n    int u = root;\n    while (u) {\n        if (t[u].del &amp;&amp; t[t[u].ls].size + 1 == k) return t[u].val;\n        else if (t[t[u].ls].size &gt;= k) u = t[u].ls;\n        else {\n            k -= t[t[u].ls].size + t[u].del;\n            u = t[u].rs;\n        }\n    }\n    return t[u].val;\n}\nvoid del_k(int&amp; u, int k) {\n    t[u].size--;\n    if (t[u].del &amp;&amp; t[t[u].ls].size + 1 == k) {\n        t[u].del = 0;\n        return;\n    }\n    if (t[t[u].ls].size + t[u].del &gt;= k) del_k(t[u].ls, k);\n    else del_k(t[u].rs, k - t[t[u].ls].size - t[u].del);\n}\nvoid del(int x) {\n    del_k(root, Rank(root, x) + 1);\n    if (t[root].tot * alpha &gt;= t[root].size)\n        rebuild(root);\n}\n/*\n// \u6d4b\u8bd5\uff1a\u6253\u5370\u4e8c\u53c9\u6811\nvoid print_tree(int u) {\n    if(u) {\n        cout &lt;&lt; \"v = \" &lt;&lt; t[u].val &lt;&lt; \", l = \" &lt;&lt; t[u].ls &lt;&lt; \", r = \" &lt;&lt; t[u].rs &lt;&lt; '\\n';\n        print_tree(t[u].ls);\n        print_tree(t[u].rs);\n    }\n}\n*/\nint main()\n{\n    for (int i = N - 1; i &gt;= 1; i--) tree_stack[++top] = i;\n    int q; cin &gt;&gt; q;\n    while (q--) {\n        int op, x; cin &gt;&gt; op &gt;&gt; x;\n        switch (op) {\n        case 1: Insert(root, x); break;\n        case 2: del(x); break;\n        case 3: cout &lt;&lt; Rank(root, x) + 1 &lt;&lt; '\\n'; break;\n        case 4: cout &lt;&lt; kth(x) &lt;&lt; '\\n'; break;\n        case 5: cout &lt;&lt; kth(Rank(root, x)) &lt;&lt; '\\n'; break;\n        case 6: cout &lt;&lt; kth(Rank(root, x + 1) + 1) &lt;&lt; '\\n'; break;\n        }\n        // cout &lt;&lt; \"&gt;&gt;\" &lt;&lt; '\\n'; print_tree(root); &lt;&lt; cout &lt;&lt; '&lt;&lt;\\n'; // \u6253\u5370\u4e8c\u53c9\u6811\u6d4b\u8bd5\n    }\n}\n</code></pre> <p>STL \u4ee3\u7801\uff1a</p> C++<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nvector&lt;int&gt; v;\nint main() {\n    int q; cin &gt;&gt; q;\n    while (q--) {\n        int op, x; cin &gt;&gt; op &gt;&gt; x;\n        if(op == 1) v.insert(lower_bound(v.begin(), v.end(), x), x);\n        if(op == 2) v.erase(lower_bound(v.begin(), v.end(), x));\n        if(op == 3) cout &lt;&lt; lower_bound(v.begin(), v.end(), x) - v.begin() + 1 &lt;&lt; '\\n';\n        if(op == 4) cout &lt;&lt; v[x - 1] &lt;&lt; '\\n';\n        if(op == 5) cout &lt;&lt; v[lower_bound(v.begin(), v.end(), x) - v.begin() - 1] &lt;&lt; '\\n';\n        if(op == 6) cout &lt;&lt; v[upper_bound(v.begin(), v.end(), x) - v.begin()] &lt;&lt; '\\n';\n    }\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Data_structure/#6","title":"6 \u83ab\u961f","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Data_structure/#_7","title":"\u666e\u901a\u83ab\u961f","text":"<p>P3901 \u6570\u5217\u627e\u4e0d\u540c</p> <p>\u73b0\u6709\u6570\u5217 \\(A_1,A_2,\\ldots,A_N\\)\uff0c\\(Q\\) \u4e2a\u8be2\u95ee \\((L_i,R_i)\\)\uff0c\u8be2\u95ee \\(A_{L_i} ,A_{L_i+1},\\ldots,A_{R_i}\\) \u662f\u5426\u4e92\u4e0d\u76f8\u540c\u3002</p> <p>\u7b2c\u4e00\u884c\uff0c\u4e24\u4e2a\u6574\u6570\\(N,Q\\)\u3002 \u7b2c\u4e8c\u884c\uff0c\\(N\\) \u4e2a\u6574\u6570\\(A_1, A_2, \\ldots , A_N\\)\u3002 \u63a5\u4e0b\u6765 \\(Q\\) \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 \\(L_i,R_i\\)\u3002</p> <p>\u5bf9\u6bcf\u4e2a\u8be2\u95ee\u8f93\u51fa\u4e00\u884c\uff0c<code>Yes</code> \u6216 <code>No</code>\u3002</p> <p>\u6570\u636e\u8303\u56f4 \\(1 \\le N,Q \\le 10^5\\)\uff0c\\(1 \\le A_i \\le N\\)\uff0c\\(1 \\le L_i \\le R_i \\le N\\)\u3002</p> C++<pre><code>#include &lt;bits/stdc++.h&gt;\n#define ll long long\nusing namespace std;\nconst int N = 1e5 + 5;\n\nint n, m;\nint a[N], cnt[N], ans[N], tot;\nstruct Q {\n    int l, r, id;\n};\nint pos[N];\n\nvoid add(int x) {\n    if (!cnt[a[x]]) tot++;\n    cnt[a[x]]++;\n}\nvoid del(int x) {\n    cnt[a[x]]--;\n    if (!cnt[a[x]]) tot--;\n}\n\nvoid solve() {\n    cin &gt;&gt; n &gt;&gt; m;\n    int len = sqrt(n);\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n        pos[i] = (i - 1) / len + 1;\n    }\n    vector&lt;Q&gt; v(m);\n    for (int i = 0; i &lt; m; i++) {\n        cin &gt;&gt; v[i].l &gt;&gt; v[i].r;\n        v[i].id = i;\n    }\n    sort(v.begin(), v.end(), [&amp;](Q a, Q b) {\n        if (pos[a.l] == pos[b.l]) {\n            if (pos[a.l] &amp; 1) return a.r &gt; b.r;\n            return a.r &lt; b.r;\n        }\n        return pos[a.l] &lt; pos[b.l];\n        });\n    int l = 1, r = 0;\n    for (int i = 0; i &lt; m; i++) {\n        while (l &gt; v[i].l) add(--l);\n        while (r &lt; v[i].r) add(++r);\n        while (l &lt; v[i].l) del(l++);\n        while (r &gt; v[i].r) del(r--);\n        ans[v[i].id] = (tot == v[i].r - v[i].l + 1);\n    }\n    for (int i = 0; i &lt; m; i++) {\n        if (ans[i]) cout &lt;&lt; \"Yes\\n\";\n        else cout &lt;&lt; \"No\\n\";\n    }\n}\nint main() {\n    ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);\n    int _T = 1;\n    // cin &gt;&gt; _T;\n    while (_T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Data_structure/#_8","title":"\u5e26\u4fee\u6539\u83ab\u961f","text":"<p>\u589e\u52a0\u4e00\u4e2a\u65f6\u95f4\u7ef4\u5ea6\uff0c\u5206\u5757\u957f\u5ea6 \\(len=n^{2/3}\\)</p> <p>P1903 [\u56fd\u5bb6\u96c6\u8bad\u961f] \u6570\u989c\u8272 / \u7ef4\u62a4\u961f\u5217</p> <p>\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217\uff0cM \u4e2a\u64cd\u4f5c\uff0c\u6709\u4e24\u79cd\u64cd\u4f5c\uff1a</p> <ol> <li>\u4fee\u6539\u5e8f\u5217\u4e0a\u67d0\u4e00\u4f4d\u7684\u6570\u5b57</li> <li>\u8be2\u95ee\u533a\u95f4 \\([l,r]\\) \u4e2d\u6570\u5b57\u7684\u79cd\u7c7b\u6570\uff08\u591a\u4e2a\u76f8\u540c\u7684\u6570\u5b57\u53ea\u7b97\u4e00\u4e2a\uff09</li> </ol> C++<pre><code>#include &lt;bits/stdc++.h&gt;\n#define ll long long\nusing namespace std;\nconst int N = 1e6 + 5;\n\nint n, m;\nstruct Q { // \u8bb0\u5f55\u67e5\u8be2\u64cd\u4f5c\uff0ct\u4e3a\u8fd9\u6b21\u67e5\u8be2\u4e4b\u524d\u7ecf\u8fc7\u7684\u4fee\u6539\u6b21\u6570\n    int id, t, l, r;\n} q[N];\nstruct RE { // \u8bb0\u5f55\u4fee\u6539\u64cd\u4f5c\n    int p, c;\n} r[N];\nint cnt[N];\nint a[N], pos[N], ans[N], tot;\nint qcnt, rcnt;\n\ninline void add(int x) {\n    if (cnt[x] == 0) tot++;\n    cnt[x]++;\n}\ninline void del(int x) {\n    if (cnt[x] == 1) tot--;\n    cnt[x]--;\n}\n\ninline void solve() {\n    cin &gt;&gt; n &gt;&gt; m;\n    int len = pow(n, 2.0 / 3);\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n        pos[i] = (i - 1) / len + 1;\n    }\n    for (int i = 0; i &lt; m; i++) {\n        char ch;\n        int x, y;\n        cin &gt;&gt; ch &gt;&gt; x &gt;&gt; y;\n        if (ch == 'Q') {\n            q[++qcnt] = { qcnt, rcnt, x, y };\n        }\n        else {\n            r[++rcnt] = { x, y };\n        }\n    }\n    sort(q + 1, q + 1 + qcnt, [&amp;](Q a, Q b) {\n        if (pos[a.l] != pos[b.l]) return pos[a.l] &lt; pos[b.l];\n        if (pos[a.r] != pos[b.r]) return pos[a.r] &lt; pos[b.r]; \n        return a.t &lt; b.t;\n        });\n    int L = 1, R = 0, last = 0; // last\u8bb0\u5f55\u6700\u540e\u4e00\u6b21\u4fee\u6539\u7684\u65f6\u95f4\u70b9\n    for (int i = 1; i &lt;= qcnt; i++) {\n        while (R &lt; q[i].r) add(a[++R]);\n        while (R &gt; q[i].r) del(a[R--]);\n        while (L &gt; q[i].l) add(a[--L]);\n        while (L &lt; q[i].l) del(a[L++]);\n        // \u65f6\u95f4\u7ef4\u5ea6\u7684\u53d8\u5316\n        while (last &lt; q[i].t) { // \u8fdb\u884c\u4fee\u6539\n            last++;\n            if (L &lt;= r[last].p &amp;&amp; r[last].p &lt;= R) {\n                add(r[last].c); \n                del(a[r[last].p]);\n            }\n            swap(a[r[last].p], r[last].c); // \u66f4\u65b0\uff0c\u56de\u9000\u65f6\u4f1a\u7528\u5230\n        }\n        while (last &gt; q[i].t) { // \u56de\u9000\u4fee\u6539\n            if (L &lt;= r[last].p &amp;&amp; r[last].p &lt;= R) {\n                add(r[last].c);\n                del(a[r[last].p]);\n            }\n            swap(a[r[last].p], r[last].c);\n            last--; // \u5148\u4fee\u6539\u518dlast--\n        }\n        ans[q[i].id] = tot;\n    }\n\n    for (int i = 1; i &lt;= qcnt; i++) {\n        cout &lt;&lt; ans[i] &lt;&lt; '\\n';\n    }\n}\nint main() {\n    ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);\n    int _T = 1;\n    // cin &gt;&gt; _T;\n    while (_T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Data_structure/#_9","title":"\u6811\u4e0a\u83ab\u961f","text":"<ul> <li> <p>\u7ed9\u5b9a \\(n\\) \u4e2a\u7ed3\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u6709\u4e00\u79cd\u989c\u8272\u3002</p> </li> <li> <p>\\(m\\) \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u51fa \\(u,v\\)\uff0c\u56de\u7b54  \u4e4b\\(u,v\\)\u95f4\u7684\u8def\u5f84\u4e0a\u7684\u7ed3\u70b9\u7684\u4e0d\u540c\u989c\u8272\u6570\u3002</p> </li> <li>\\(1 \\leq n \\leq 4*10^4,1 \\leq m \\leq 10^5\\)\uff0c\u989c\u8272\u662f\u4e0d\u8d85\u8fc7 \\(2\u00d710^9\\) \u7684\u975e\u8d1f\u6574\u6570\u3002</li> </ul> C++<pre><code>#include &lt;bits/stdc++.h&gt;\n\nconst int N = 1e5 + 5;\n\nint n, m;\nint a[N], col[N], ans[N];\nint tot, pos1[N], pos2[N], pos[N]; // pos1\u4e3a\u67d0\u70b9\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff08\u8fdb\u5165dfs\u5e8f\uff09\uff0cpos2\u4e3a\u7b2c\u4e8c\u6b21\u7684\u4f4d\u7f6e\uff08\u79bb\u5f00dfs\u5e8f\uff09\nint cnt[N];\nstd::vector&lt;int&gt; ed[N];\nbool vis[N];\nint idx[N];\n\nstruct Q {\n    int l, r, id, lca;\n};\n\nint fa[N][20], deep[N];\ninline void DFS(int x, int f) {\n    deep[x] = deep[f] + 1;\n    fa[x][0] = f;\n    for (int i = 1; (1 &lt;&lt; i) &lt;= deep[x]; i++)\n        fa[x][i] = fa[fa[x][i - 1]][i - 1];\n    for (int i : ed[x])\n        if (i != f)\n            DFS(i, x);\n}\ninline int lca(int x, int y) {\n    if (deep[x] &lt; deep[y]) std::swap(x, y);\n    for (int i = 16; i &gt;= 0; i--)\n        if (deep[x] - (1 &lt;&lt; i) &gt;= deep[y])\n            x = fa[x][i];\n    if (x == y) return x;\n    for (int i = 16; i &gt;= 0; i--)\n        if (fa[x][i] != fa[y][i])\n            x = fa[x][i], y = fa[y][i];\n    return fa[x][0];\n}\n\ninline void update(int u, bool op) {\n    if (op)\n        u = idx[u];\n    if (!vis[u]) {\n        cnt[a[u]]++;\n        if (cnt[a[u]] == 1) tot++;\n    }\n    else {\n        if (cnt[a[u]] == 1) tot--;\n        cnt[a[u]]--;\n    }\n    vis[u] ^= 1;\n}\n\nint main() {\n    std::ios::sync_with_stdio(false), std::cin.tie(0), std::cout.tie(0);\n\n    std::cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++) {\n        std::cin &gt;&gt; a[i];\n        col[i] = a[i]; // \u7528\u6765\u6392\u5e8f\n    }\n    std::sort(col + 1, col + 1 + n);\n    auto getid = [](int c) -&gt; int {\n        return std::lower_bound(col + 1, col + 1 + n, c) - (col + 1); // \u5bf9\u989c\u8272\u8fdb\u884c\u79bb\u6563\u5316\n        };\n    for (int i = 1; i &lt;= n; i++) {\n        a[i] = getid(a[i]);\n    }\n\n    for (int i = 1; i &lt; n; i++) {\n        int u, v;\n        std::cin &gt;&gt; u &gt;&gt; v;\n        ed[u].push_back(v);\n        ed[v].push_back(u);\n    }\n\n    std::vector&lt;int&gt; d;\n    std::vector&lt;bool&gt; vis(n + 1, 0);\n    auto dfs = [&amp;](auto&amp;&amp; self, int u, int f) -&gt; void {\n        d.push_back(u);\n        for (int v : ed[u]) {\n            if (v == f || vis[v]) continue;\n            vis[v] = 1;\n            self(self, v, u);\n        }\n        d.push_back(u);\n        };\n    dfs(dfs, 1, 0); // \u83b7\u53d6dfs\u5e8f\n\n    int len = sqrt(n &lt;&lt; 1);\n    for (int i = 0; i &lt; (n &lt;&lt; 1); i++) {\n        if (!pos1[d[i]]) {\n            pos1[d[i]] = i + 1;\n        }\n        else {\n            pos2[d[i]] = i + 1;\n        }\n        pos[i + 1] = i / len + 1;\n        idx[i + 1] = d[i];\n    }\n    DFS(1, 0); // lca\u521d\u59cb\u5316\n\n    std::vector&lt;Q&gt; q(m);\n    for (int i = 0; i &lt; m; i++) {\n        int u, v;\n        std::cin &gt;&gt; u &gt;&gt; v;\n        if (pos1[u] &gt; pos1[v]) std::swap(u, v);\n        int F = lca(u, v);\n        if (F == u || F == v) {\n            q[i].l = pos1[u];\n            q[i].r = pos1[v];\n            q[i].lca = 0;\n        }\n        else {\n            q[i].l = pos2[u];\n            q[i].r = pos1[v];\n            q[i].lca = F; // dfs\u5e8f\u4e2d\u6ca1\u6709lca\uff0c\u8981\u52a0\u4e0a\u5b83\u5e26\u6765\u7684\u66f4\u65b0\n        }\n        q[i].id = i;\n    }\n\n    std::sort(q.begin(), q.end(), [&amp;](Q a, Q b) {\n        if (pos[a.l] == pos[b.l]) return a.r &lt; b.r;\n        return pos[a.l] &lt; pos[b.l];\n        });\n    int l = 1, r = 0;\n    for (int i = 0; i &lt; m; i++) {\n        while (l &lt; q[i].l) update(l++, 1);\n        while (l &gt; q[i].l) update(--l, 1);\n        while (r &gt; q[i].r) update(r--, 1);\n        while (r &lt; q[i].r) update(++r, 1);\n        if (q[i].lca) {\n            update(q[i].lca, 0);\n        }\n        ans[q[i].id] = tot;\n        if (q[i].lca) {\n            update(q[i].lca, 0);\n        }\n    }\n    for (int i = 0; i &lt; m; i++) std::cout &lt;&lt; ans[i] &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Data_structure/#7-st","title":"7 ST \u8868","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Data_structure/#st","title":"ST \u8868","text":"C++<pre><code>int n, a[N];\nint mx[N][20];\nint mylog[N];\n\nvoid init() {\n    mylog[0] = -1;\n    for(int i = 1; i &lt; N; i++) mylog[i] = mylog[i &gt;&gt; 1] + 1;\n\n    for(int k = 1; (1 &lt;&lt; k) &lt;= n; k++)\n        for(int i = 1; i + (1 &lt;&lt; k) - 1 &lt;= n; i++)\n            mx[i][k] = max(mx[i][k - 1], mx[i + (1 &lt;&lt; (k - 1))][k - 1]);\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Data_structure/#st_1","title":"\u4e8c\u7ef4 ST \u8868","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Data_structure/#_10","title":"\u56fa\u5b9a\u5b50\u77e9\u9635\u8fb9\u957f\u6c42\u6700\u503c","text":"C++<pre><code>// https://vjudge.net/problem/OpenJ_Bailian-2019\nint n, b, m;\nint mn[N][N][10], mx[N][N][10];\nint mylog[N];\nint a[N][N];\n\nvoid solve() {\n    memset(mn, 63, sizeof(mn));\n    cin &gt;&gt; n &gt;&gt; b &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= n; j++) {\n            cin &gt;&gt; a[i][j];\n            mn[i][j][0] = mx[i][j][0] = a[i][j];\n        }\n    }\n    for (int k = 1; (1 &lt;&lt; k) &lt;= n; k++) //\u679a\u4e3e\u533a\u95f4\u957f\u5ea6\n        for (int i = 1; i + (1 &lt;&lt; k) - 1 &lt;= n; i++)\n            for (int j = 1; j + (1 &lt;&lt; k) - 1 &lt;= n; j++) {\n                mn[i][j][k] = min(mn[i][j][k - 1], min(mn[i + (1 &lt;&lt; (k - 1))][j][k - 1], min(mn[i][j + (1 &lt;&lt; (k - 1))][k - 1], mn[i + (1 &lt;&lt; (k - 1))][j + (1 &lt;&lt; (k - 1))][k - 1])));\n                mx[i][j][k] = max(mx[i][j][k - 1], max(mx[i + (1 &lt;&lt; (k - 1))][j][k - 1], max(mx[i][j + (1 &lt;&lt; (k - 1))][k - 1], mx[i + (1 &lt;&lt; (k - 1))][j + (1 &lt;&lt; (k - 1))][k - 1])));\n            }\n    int k = log2(b);\n    while (m--) {\n        int x, y;\n        cin &gt;&gt; x &gt;&gt; y;\n        int MN = 1e9, MX = 0;\n        MN = min(MN, mn[x][y][k]);\n        MN = min(MN, mn[x][y + b - (1 &lt;&lt; k)][k]);\n        MN = min(MN, mn[x + b - (1 &lt;&lt; k)][y][k]);\n        MN = min(MN, mn[x + b - (1 &lt;&lt; k)][y + b - (1 &lt;&lt; k)][k]);\n        MX = max(MX, mx[x][y][k]);\n        MX = max(MX, mx[x][y + b - (1 &lt;&lt; k)][k]);\n        MX = max(MX, mx[x + b - (1 &lt;&lt; k)][y][k]);\n        MX = max(MX, mx[x + b - (1 &lt;&lt; k)][y + b - (1 &lt;&lt; k)][k]);\n        cout &lt;&lt; MX - MN &lt;&lt; '\\n'; // \u672c\u9898\u6c42\u6700\u503c\u4e4b\u5dee\n    }\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Data_structure/#_11","title":"\u6c42\u4efb\u610f\u5b50\u77e9\u9635\u6700\u503c","text":"C++<pre><code>// https://vjudge.net/problem/HDU-2888\n#include &lt;bits/stdc++.h&gt;\n#define ll long long\nusing namespace std;\nconst int N = 300 + 5;\n\nint n, m;\nint mx[N][N][9][9];\nint mylog[N];\nint a[N][N];\n\nvoid solve() {\n    // cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= m; j++) {\n            cin &gt;&gt; a[i][j];\n            mx[i][j][0][0] = a[i][j];\n        }\n    }\n    for (int j = 1; j &lt;= m; j++) {\n        for (int k = 1; (1 &lt;&lt; k) &lt;= n; k++) {\n            for (int i = 1; i + (1 &lt;&lt; k) - 1 &lt;= n; i++) {\n                mx[i][j][k][0] = max(mx[i][j][k - 1][0], mx[i + (1 &lt;&lt; (k - 1))][j][k - 1][0]);\n            }\n        }\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        for (int k = 1; (1 &lt;&lt; k) &lt;= m; k++) {\n            for (int j = 1; j + (1 &lt;&lt; k) - 1 &lt;= m; j++) {\n                mx[i][j][0][k] = max(mx[i][j][0][k - 1], mx[i][j + (1 &lt;&lt; (k - 1))][0][k - 1]);\n            }\n        }\n    }\n    for (int k1 = 1; (1 &lt;&lt; k1) &lt;= n; k1++) //\u679a\u4e3e\u533a\u95f4\u957f\u5ea6\n        for (int k2 = 1; (1 &lt;&lt; k2) &lt;= m; k2++)\n            for (int i = 1; i + (1 &lt;&lt; k1) - 1 &lt;= n; i++) //row\n                for (int j = 1; j + (1 &lt;&lt; k2) - 1 &lt;= m; j++) //col\n                    mx[i][j][k1][k2] = max(mx[i][j][k1 - 1][k2 - 1], max(mx[i + (1 &lt;&lt; (k1 - 1))][j][k1 - 1][k2 - 1], max(mx[i][j + (1 &lt;&lt; (k2 - 1))][k1 - 1][k2 - 1], mx[i + (1 &lt;&lt; (k1 - 1))][j + (1 &lt;&lt; (k2 - 1))][k1 - 1][k2 - 1])));\n    int q;\n    cin &gt;&gt; q;\n    while (q--) {\n        int p, q, x, y;\n        cin &gt;&gt; p &gt;&gt; q &gt;&gt; x &gt;&gt; y;\n        if (p == x &amp;&amp; q == y) {\n            cout &lt;&lt; a[x][y] &lt;&lt; \" yes\\n\";\n            continue;\n        }\n        int MX = 0;\n        int dx = x - p + 1, dy = y - q + 1;\n        int kx = mylog[dx], ky = mylog[dy];\n        MX = max(MX, mx[p][q][kx][ky]);\n        MX = max(MX, mx[p][y - (1 &lt;&lt; ky) + 1][kx][ky]);\n        MX = max(MX, mx[x - (1 &lt;&lt; kx) + 1][q][kx][ky]);\n        MX = max(MX, mx[x - (1 &lt;&lt; kx) + 1][y - (1 &lt;&lt; ky) + 1][kx][ky]);\n        cout &lt;&lt; MX &lt;&lt; \" \";\n        if (MX == a[p][q] || MX == a[x][y] || MX == a[p][y] || MX == a[x][q])\n            cout &lt;&lt; \"yes\\n\";\n        else\n            cout &lt;&lt; \"no\\n\";\n    }\n}\nint main()\n{\n    mylog[0] = -1;\n    for (int i = 1; i &lt;= 300; i++) mylog[i] = mylog[i &gt;&gt; 1] + 1;\n    ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);\n    int _T = 1;\n    // cin &gt;&gt; _T;\n    while (cin &gt;&gt; n &gt;&gt; m)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Data_structure/#8","title":"8 \u626b\u63cf\u7ebf","text":"C++<pre><code>int lazy[N &lt;&lt; 3];  // \u6807\u8bb0\u4e86\u8fd9\u6761\u7ebf\u6bb5\u51fa\u73b0\u7684\u6b21\u6570\ndouble s[N &lt;&lt; 3];\n\nstruct node1 {\n  double l, r;\n  double sum;\n} cl[N &lt;&lt; 3];  // \u7ebf\u6bb5\u6811\n\nstruct node2 {\n  double x, y1, y2;\n  int flag;\n} p[N &lt;&lt; 3];  // \u5750\u6807\n\n// \u5b9a\u4e49sort\u6bd4\u8f83\nbool cmp(node2 a, node2 b) { return a.x &lt; b.x; }\n\n// \u4e0a\u4f20\nvoid pushup(int rt) {\n  if (lazy[rt] &gt; 0)\n    cl[rt].sum = cl[rt].r - cl[rt].l;\n  else\n    cl[rt].sum = cl[rt * 2].sum + cl[rt * 2 + 1].sum;\n}\n\n// \u5efa\u6811\nvoid build(int rt, int l, int r) {\n  if (r - l &gt; 1) {\n    cl[rt].l = s[l];\n    cl[rt].r = s[r];\n    build(rt * 2, l, (l + r) / 2);\n    build(rt * 2 + 1, (l + r) / 2, r);\n    pushup(rt);\n  } else {\n    cl[rt].l = s[l];\n    cl[rt].r = s[r];\n    cl[rt].sum = 0;\n  }\n  return;\n}\n\n// \u66f4\u65b0\nvoid update(int rt, double y1, double y2, int flag) {\n  if (cl[rt].l == y1 &amp;&amp; cl[rt].r == y2) {\n    lazy[rt] += flag;\n    pushup(rt);\n    return;\n  } else {\n    if (cl[rt * 2].r &gt; y1) update(rt * 2, y1, min(cl[rt * 2].r, y2), flag);\n    if (cl[rt * 2 + 1].l &lt; y2)\n      update(rt * 2 + 1, max(cl[rt * 2 + 1].l, y1), y2, flag);\n    pushup(rt);\n  }\n}\n\nvoid solve() {\n    int temp = 1, n;\n    double x1, y1, x2, y2, ans;\n    cin &gt;&gt; n;\n    ans = 0;\n    for (int i = 0; i &lt; n; i++) {\n        scanf(\"%lf %lf %lf %lf\", &amp;x1, &amp;y1, &amp;x2, &amp;y2);\n        p[i].x = x1;\n        p[i].y1 = y1;\n        p[i].y2 = y2;\n        p[i].flag = 1;\n        p[i + n].x = x2;\n        p[i + n].y1 = y1;\n        p[i + n].y2 = y2;\n        p[i + n].flag = -1;\n        s[i + 1] = y1;\n        s[i + n + 1] = y2;\n    }\n    sort(s + 1, s + (2 * n + 1));  // \u79bb\u6563\u5316\n    sort(p, p + 2 * n, cmp);  // \u628a\u77e9\u5f62\u7684\u8fb9\u7684\u6a2a\u5750\u6807\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n    build(1, 1, 2 * n);       // \u5efa\u6811\n    memset(lazy, 0, sizeof(lazy));\n    update(1, p[0].y1, p[0].y2, p[0].flag);\n    for (int i = 1; i &lt; 2 * n; i++) {\n        ans += (p[i].x - p[i - 1].x) * cl[1].sum;\n        update(1, p[i].y1, p[i].y2, p[i].flag);\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Dynamic_programming/","title":"Dynamic programming","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Dynamic_programming/#1-01","title":"1 01 \u80cc\u5305","text":"C++<pre><code>int main() {\n    int f[1005] = {0};\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;int&gt; w(n);\n    vector&lt;int&gt; v(n);\n    for (int i = 0; i &lt; n; i++) cin &gt;&gt; w[i] &gt;&gt; v[i];\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = m; j &gt;= w[i]; j--) {\n            f[j] = max(f[j], f[j - w[i]] + v[i]);\n        }\n    }\n    cout &lt;&lt; f[m];\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Dynamic_programming/#2","title":"2 \u5b8c\u5168\u80cc\u5305","text":"C++<pre><code>int f[1005];\nint main() {\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;int&gt; w(n), v(n);\n    for (int i = 0; i &lt; n; i++) cin &gt;&gt; w[i] &gt;&gt; v[i];\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = w[i]; j &lt;= m; j++) {\n            f[j] = max(f[j], f[j - w[i]] + v[i]);\n        }\n    }\n    cout &lt;&lt; f[m];\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Dynamic_programming/#3-","title":"3 \u591a\u91cd\u80cc\u5305-\u4e8c\u8fdb\u5236\u4f18\u5316","text":"C++<pre><code>int f[2005];\nint main() {\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;int&gt; w, v, s;\n    int a, b, c;\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n        int k = 1;\n        while (k &lt;= c) {\n            w.push_back(k * a);\n            v.push_back(k * b);\n            c -= k;\n            k *= 2;\n        }\n        if (c) {\n            w.push_back(c * a);\n            v.push_back(c * b);\n        }\n    }\n    n = w.size();\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = m; j &gt;= w[i]; j--) {\n            f[j] = max(f[j], f[j - w[i]] + v[i]);\n        }\n    }\n    cout &lt;&lt; f[m];\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Dynamic_programming/#4","title":"4 \u5355\u8c03\u961f\u5217\u4f18\u5316\u80cc\u5305","text":"C++<pre><code>using ll = long long;\nll dp[20005];\nll q[20005], idx[20005];\nint n, m;\nstd::cin &gt;&gt; n &gt;&gt; m;\nfor(int i = 1; i &lt;= n; i++) {\n    int v, w, s;\n    std::cin &gt;&gt; v &gt;&gt; w &gt;&gt; s;\n    s = std::min(s, m / v);\n    for(int j = 0; j &lt; v; j++) {\n        int head = 1, tail = 1;\n        for(int k = 0; k &lt;= (m - j) / v; k++) {\n            int t = dp[j + k * v] - k * w;\n            while(head &lt; tail &amp;&amp; q[tail - 1] &lt;= t) tail--;\n            q[tail] = t;\n            idx[tail++] = k;\n            while(head &lt; tail &amp;&amp; k - idx[head] &gt; s) head++;\n            dp[j + k * v] = std::max(dp[j + k * v], q[head] + k * w);\n        }\n    }\n}\nstd::cout &lt;&lt; dp[m];\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Dynamic_programming/#5","title":"5 \u5206\u7ec4\u80cc\u5305","text":"C++<pre><code>int dp[N];\nint n, m;\nstd::cin &gt;&gt; n &gt;&gt; m;\nwhile(n--) { // n\u7ec4\u7269\u54c1\n    int s;\n    std::cin &gt;&gt; s;\n    std::vector&lt;int&gt; v(s), w(s);\n    for(int i = 0; i &lt; s; i++) std::cin &gt;&gt; v[i] &gt;&gt; w[i];\n    for(int j = m; j &gt;= 0; j--) { // \u5148\u679a\u4e3e\u91cd\u91cf\u518d\u679a\u4e3e\u9009\u62e9\u54ea\u4e00\u4e2a\n        for(int k = 0; k &lt; s; k++) {\n            if(j &gt;= v[k])\n                dp[j] = std::max(dp[j], dp[j - v[k]] + w[k]);\n        }\n    }\n}\nstd::cout &lt;&lt; dp[m];\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Dynamic_programming/#6","title":"6 \u6709\u4f9d\u8d56\u80cc\u5305","text":"C++<pre><code>// todo\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Dynamic_programming/#7-dp","title":"7 \u72b6\u538b DP","text":"<p>\u6211\u4eec\u7528\u4e00\u4e2a\u6574\u6570\u8868\u793a\u4e00\u4e2a\u72b6\u6001\uff0c\u5b83\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\u8bb0\u5f55\u4e86\u67d0\u4e2a\u7269\u54c1\u662f\u5426\u88ab\u9009\u62e9\u4e86</p> <p>\u5982\u72b6\u6001<code>10</code>\u5728\u4e8c\u8fdb\u5236\u4e2d\u4e3a<code>1010</code>, \u8868\u793a\u9009\u62e9\u4e86\u7b2c 1 \u4e2a\u548c\u7b2c 3 \u4e2a\u7269\u54c1\uff08\u4e0b\u6807\u4ece 0 \u5f00\u59cb\uff0c\u4e8c\u8fdb\u5236\u4f4d\u4ece\u53f3\u81f3\u5de6\uff09. \u82e5\u8981\u5728<code>10</code>\u7684\u57fa\u7840\u4e0a\u9009\u62e9\u7269\u54c1 3, \u5219\u72b6\u6001\u53d8\u4e3a<code>1110</code>, \u5373<code>14</code>.</p> <p>\u72b6\u6001\u7684\u8f6c\u79fb\u53ef\u4ee5\u901a\u8fc7\u4f4d\u8fd0\u7b97\u6765\u5b9e\u73b0\uff0c\u5373 <code>dp[x | (1 &lt;&lt; j)] -&gt; dp[y]</code>.</p>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Dynamic_programming/#p1433","title":"\u4f8b\u9898\uff1aP1433 \u5403\u5976\u916a","text":"<p>\u623f\u95f4\u91cc\u653e\u7740 n \u5757\u5976\u916a\u3002\u4e00\u53ea\u5c0f\u8001\u9f20\u8981\u628a\u5b83\u4eec\u90fd\u5403\u6389\uff0c\u95ee\u81f3\u5c11\u8981\u8dd1\u591a\u5c11\u8ddd\u79bb\uff1f\u8001\u9f20\u4e00\u5f00\u59cb\u5728 (0,0) \u70b9\u5904\u3002</p> C++<pre><code>#include &lt;bits/stdc++.h&gt;\n#define ll long long\nusing namespace std;\nconst int N = 2e5 + 5;\nint n;\ndouble x[20], y[20], dis[20][20];\ndouble dp[(1 &lt;&lt; 16) + 5][20]; // dp[i][x] \u8868\u793a\u7ecf\u8fc7\u70b9\u7684\u72b6\u6001\u4e3a i\uff0c\u6700\u540e\u4e00\u4e2a\u70b9\u662f j\nint main() {\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; x[i] &gt;&gt; y[i];\n    }\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = i; j &lt; n; j++) {\n            dis[i][j] = dis[j][i] = sqrt(pow(x[i] - x[j], 2) + pow(y[i] - y[j], 2));\n        }\n    }\n    for (int i = 0; i &lt; (1 &lt;&lt; n); i++) { // \u521d\u59cb\u5316\n        for (int j = 0; j &lt; n; j++) {\n            dp[i][j] = 1e7;\n        }\n    }\n    for (int i = 0; i &lt; n; i++) { // \u521d\u59cb\u5316\u539f\u70b9\u5230\u70b9 i \u7684\u8ddd\u79bb\n        dp[1 &lt;&lt; i][i] = sqrt(x[i] * x[i] + y[i] * y[i]);\n    }\n    for (int i = 0; i &lt; (1 &lt;&lt; n); i++) { // \u72b6\u538b dp\n        for (int j = 0; j &lt; n; j++) {\n            if ((i &amp; (1 &lt;&lt; j)) == 0) continue; // \u72b6\u6001 i \u6ca1\u6709\u7ecf\u8fc7 j\n            for (int k = 0; k &lt; n; k++) {\n                if (j == k) continue;\n                if ((i &amp; (1 &lt;&lt; k)) == 0) continue; // \u72b6\u6001 i \u6ca1\u6709\u7ecf\u8fc7 k\n                // \u4ece j \u5230 k \u548c\u4ece k \u5230 j \u53d6\u6700\u5c0f\n                dp[i][k] = min(dp[i][k], dp[i - (1 &lt;&lt; k)][j] + dis[j][k]);\n            }\n        }\n    }\n    double ans = 1e9;\n    for (int i = 0; i &lt; n; i++)\n        ans = min(ans, dp[(1 &lt;&lt; n) - 1][i]);\n    cout &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; ans;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Dynamic_programming/#8-dp","title":"8 \u6570\u4f4d DP","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Dynamic_programming/#p2602-zjoi2010","title":"P2602  ZJOI2010 \u6570\u5b57\u8ba1\u6570","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u6b63\u6574\u6570 a \u548c b\uff0c\u6c42\u5728 [a,b] \u7684\u6240\u6709\u6574\u6570\u4e2d\uff0c\u6bcf\u4e2a\u6570\u7801\u5404\u51fa\u73b0\u4e86\u591a\u5c11\u6b21</p> C++<pre><code>#include &lt;bits/stdc++.h&gt;\n#define ll long long\nusing namespace std;\nll a, b, dp[15], ten[15];\n// dp[i] \u8868\u793a\u5728 i \u4f4d\u6570\u4e2d\u6bcf\u4e2a\u6570\u51fa\u73b0\u591a\u5c11\u6b21\uff0c\u5982 1\u30012\u30013 \u4f4d\u6570\u4e2d\u6bcf\u4e2a\u6570\u5206\u522b\u51fa\u73b0 1\u300120\u3001300 \u6b21\n// ten[i] \u8868\u793a 10 \u7684 i \u6b21\u65b9\nll cnta[15], cntb[15];\nvoid dfs(ll* cnt, ll x) {\n    vector&lt;int&gt; v;\n    v.push_back(0);\n    ll t = x;\n    while (t) {\n        v.push_back(t % 10);\n        t /= 10;\n    }\n    int n = v.size() - 1;\n    for (int i = n; i &gt;= 1; i--) { // \u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u4f9d\u6b21\u5904\u7406\n        // \u4ee5 324 \u4e3a\u4f8b\n        // v[3] = 3\uff0c\u5148\u8ba1\u7b97 0xx\u30011xx\u30012xx\uff0c\u5373 dp[2]*v[3]=20*3\n        for (int j = 0; j &lt;= 9; j++) cnt[j] += dp[i - 1] * v[i];\n        // \u518d\u8ba1\u7b97\u4ece 1 \u5230 v[i]-1 \u5728\u7b2c i \u4f4d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5982 100-199 \u4e2d 1 \u51fa\u73b0\u4e86 100 \u6b21\n        for (int j = 0; j &lt; v[i]; j++) cnt[j] += ten[i - 1];\n        // \u518d\u8ba1\u7b97 300-324\uff0c\u4e0d\u5b8c\u6574\u7684 i \u4f4d\u6570\uff08\u5b8c\u6574\u7684\u4e3a 00-99\uff09\u4e2d 3 \u51fa\u73b0\u7684\u6b21\u6570\n        ll num = 0;\n        // \u5f97\u5230 24\n        for (int j = i - 1; j &gt;= 1; j--) num = num * 10 + v[j];\n        // \u8fd8\u6709 300 \u8d21\u732e\u7684\u4e00\u4e2a 3\n        cnt[v[i]] += num + 1;\n        cnt[0] -= ten[i - 1]; // \u53bb\u6389\u524d\u5bfc 0\n    }\n}\nint main() {\n    cin &gt;&gt; a &gt;&gt; b;\n    ten[0] = 1;\n    for (int i = 1; i &lt;= 13; i++) { // init\n        dp[i] = ten[i - 1] * i;\n        ten[i] = ten[i - 1] * 10;\n    }\n    dfs(cnta, a - 1);\n    dfs(cntb, b);\n    for (int i = 0; i &lt;= 9; i++) {\n        cout &lt;&lt; cntb[i] - cnta[i] &lt;&lt; \" \";\n    }\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Dynamic_programming/#p2657-scoi2009-windy","title":"P2657 SCOI2009 windy \u6570","text":"<p>\u4e0d\u542b\u524d\u5bfc\u96f6\u4e14\u76f8\u90bb\u4e24\u4e2a\u6570\u5b57\u4e4b\u5dee\u81f3\u5c11\u4e3a \\(2\\) \u7684\u6b63\u6574\u6570\u88ab\u79f0\u4e3a windy \u6570\u3002windy \u60f3\u77e5\u9053\uff0c\u5728 \\(a\\) \u548c \\(b\\) \u4e4b\u95f4\uff0c\u5305\u62ec \\(a\\) \u548c \\(b\\) \uff0c\u603b\u5171\u6709\u591a\u5c11\u4e2a windy \u6570\uff1f</p> C++<pre><code>#include &lt;bits/stdc++.h&gt;\n#define ll long long\nusing namespace std;\nint a, b;\nint ub[12], len; // upper_bound \u8868\u793a\u7b2c i \u4e3a\u80fd\u53d6\u7684\u6700\u5927\u6570\uff0c\u4ece 1 \u5f00\u59cb\u662f\u6700\u9ad8\u4f4d\nint dp[15][15];\n// flag \u8868\u793a\u4e0a\u4e00\u4f4d\u662f\u5426\u8fbe\u5230\u4e0a\u9650\uff0c\u82e5 flag=1 \u5219\u5f53\u524d\u4e3a\u4e5f\u53ea\u80fd\u53d6\u5230 upper bound\nint dfs(int pos, int pre, bool flag) { // pre = 11 \u8868\u793a\u524d\u4e00\u4f4d\u662f\u524d\u5bfc 0\n    if (pos &lt;= 0) return 1;\n    int max_num;\n    if (!flag &amp;&amp; dp[pos][pre] != -1) {\n        return dp[pos][pre];\n    }\n    if (flag) max_num = ub[pos];\n    else max_num = 9;\n    int res = 0;\n    for (int i = 0; i &lt;= max_num; i++) {\n        if (abs(i - pre) &gt;= 2) {\n            if (pre == 11 &amp;&amp; i == 0) // \u5f53\u524d\u4ecd\u7136\u5c5e\u4e8e\u524d\u5bfc 0\n                res += dfs(pos - 1, pre, flag &amp;&amp; (i == ub[pos]));\n            else\n                res += dfs(pos - 1, i, flag &amp;&amp; (i == ub[pos]));\n        }\n    }\n    if (!flag) dp[pos][pre] = res;\n    return res;\n}\nint solve(int x) {\n    memset(dp, -1, sizeof(dp));\n    len = 0;\n    int t = x;\n    while (t) {\n        ub[++len] = t % 10;\n        t /= 10;\n    }\n    return dfs(len, 11, true);\n}\nint main() {\n    cin &gt;&gt; a &gt;&gt; b;\n    int x = solve(a - 1);\n    int y = solve(b);\n    cout &lt;&lt; y - x &lt;&lt; endl;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Dynamic_programming/#9","title":"9 \u6c42\u6700\u5927\u5b50\u6bb5\u548c","text":"C++<pre><code>int dp[N], a[N], ans = 0;\nmemset(dp, 0, sizeof(dp));\nfor(int i = 1; i &lt;= n; i++) {\n    if(dp[i - 1] &gt; 0)\n        dp[i] = dp[i - 1] + a[i];\n    else\n        dp[i] = a[i];\n    ans = max(ans, dp[i]);\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Graph_theory/","title":"Graph theory","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Graph_theory/#1-floyd","title":"1 Floyd","text":"<p>\u9002\u7528\u6700\u77ed\u8def\u5b58\u5728\u7684\u4efb\u4f55\u56fe\uff0c\\(f_{i,j}\\) \u4e3a\u6240\u6c42\u6700\u77ed\u8def\u957f\u5ea6</p> C++<pre><code>void floyd() {\n    int f[N][N];\n    for (int k = 1; k &lt;= n; k++)\n        for (int x = 1; x &lt;= n; x++)\n            for (int y = 1; y &lt;= n; y++)\n                f[x][y] = min(f[x][y], f[x][k] + f[k][y]);\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Graph_theory/#2-bellman_ford","title":"2 Bellman_Ford","text":"<p>\u53ef\u4ee5\u6c42\u51fa\u6709\u8d1f\u6743\u7684\u56fe\u7684\u6700\u77ed\u8def\uff0c\u6216\u5bf9\u6700\u77ed\u8def\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\u8fdb\u884c\u5224\u65ad</p> C++<pre><code>struct edge {\n    int v, w;\n};\nvector&lt;edge&gt; e[N];\nint dis[N], cnt[N], vis[N];\nqueue&lt;int&gt; q;\nbool spfa(int n, int s) {\n    memset(dis, 63, sizeof(dis));\n    dis[s] = 0, vis[s] = 1;\n    q.push(s);\n    while (!q.empty()) {\n        int u = q.front();\n        q.pop(), vis[u] = 0;\n        for (auto ed : e[u]) {\n            int v = ed.v, w = ed.w;\n            if (dis[v] &gt; dis[u] + w) {\n                dis[v] = dis[u] + w;\n                cnt[v] = cnt[u] + 1;  // \u8bb0\u5f55\u6700\u77ed\u8def\u7ecf\u8fc7\u7684\u8fb9\u6570\n                if (cnt[v] &gt;= n) return false;\n                // \u5728\u4e0d\u7ecf\u8fc7\u8d1f\u73af\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u77ed\u8def\u81f3\u591a\u7ecf\u8fc7 n - 1 \u6761\u8fb9\n                // \u56e0\u6b64\u5982\u679c\u7ecf\u8fc7\u4e86\u591a\u4e8e n \u6761\u8fb9\uff0c\u4e00\u5b9a\u8bf4\u660e\u7ecf\u8fc7\u4e86\u8d1f\u73af\n                if (!vis[v]) q.push(v), vis[v] = 1;\n            }\n        }\n    }\n    return true;\n}\n</code></pre> <p>\u66f4\u65b0\u90e8\u5206\u7684\u53e6\u4e00\u79cd\u5199\u6cd5</p> C++<pre><code>if(dis[v] &gt; dis[u] + w) {\n    dis[v] = dis[u] + w;\n    if(!vis[v]) {\n        vis[v] = 1;\n        q.push(v);\n        cnt[v]++;\n        if(cnt[v] &gt;= n) return false;\n    }\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Graph_theory/#_1","title":"\u5dee\u5206\u7ea6\u675f","text":"<p>\u5f62\u5982 <code>a - b &gt;= c</code> \u7684\u7ea6\u675f\u6761\u4ef6\uff0c\u5728\u56fe\u4e2d\u6dfb\u52a0\u6709\u5411\u8fb9 <code>ed[a].push_back({b, -c});</code> \u5bf9\u4e8e <code>a - b &lt;= c</code>\uff0c<code>\u6dfb\u52a0 ed[b].push_back({a, c});</code> \u5bf9\u4e8e <code>a == b</code>\uff0c\u6dfb\u52a0 a b \u4e4b\u95f4\u6743\u503c\u4e3a 0 \u7684\u8fb9\u5373\u53ef\u3002</p> <p>\u4ece \\(0\\) \u5411\u5176\u4ed6\u6240\u6709\u70b9\u589e\u52a0\u4e00\u6761\u6743\u503c\u4e3a \\(0\\) \u7684\u8fb9\uff0c\u6ce8\u610f\u6b64\u65f6\u5efa\u7acb\u4e86\u4e00\u4e2a\u865a\u62df\u6e90\u70b9\uff0c\u6240\u4ee5\u5224\u65ad\u8981\u6539\u6210 <code>cnt[v] &gt; n</code></p> <p>\u5efa\u56fe\u5b8c\u6210\u540e\uff0c\u4ee5 \\(0\\) \u4e3a\u8d77\u70b9\u8dd1\u4e00\u8fb9 SPFA\uff0c\u82e5\u5b58\u5728\u8d1f\u73af\uff0c\u5219\u65e0\u89e3\u3002\u5426\u5219\uff0c\\(x_i = dis_i\\) \u4e3a\u8be5\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u7684\u4e00\u7ec4\u89e3\u3002</p>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Graph_theory/#3-dijkstra","title":"3 Dijkstra","text":"<p>\u6c42\u89e3\u975e\u8d1f\u6743\u56fe\u5355\u6e90\u6700\u77ed\u8def</p> C++<pre><code>const int INF = 1e9 + 1;\nint n, m;\nstruct edge {\n    int v, w;\n};\nstruct node {\n    int dis, u;\n    bool operator&gt;(const node&amp; a) const { return dis &gt; a.dis; }\n};\nvector&lt;edge&gt; e[N];\nint dis[N];\nbool vis[N];\npriority_queue&lt;node, vector&lt;node&gt;, greater&lt;node&gt; &gt; q;\nvoid dijkstra(int s) {\n    for (int i = 1; i &lt;= n; i++) {\n        dis[i] = INF;\n        vis[i] = false;\n    }\n    dis[s] = 0;\n    q.push({0, s});\n    while (!q.empty()) {\n        int u = q.top().u;\n        q.pop();\n        if (vis[u]) continue;\n        vis[u] = true;\n        for (auto ed : e[u]) {\n            int v = ed.v, w = ed.w;\n            if (dis[v] &gt; dis[u] + w) {\n                dis[v] = dis[u] + w;\n                q.push({dis[v], v});\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Graph_theory/#4-kruskal","title":"4 Kruskal","text":"C++<pre><code>const int N = 1e5 + 5;\nstruct edge {\n    int u, v, w;\n    bool operator&gt; (const edge&amp; a) const { return w &gt; a.w; }\n};\npriority_queue&lt;edge, vector&lt;edge&gt;, greater&lt;edge&gt; &gt; q; // \u8fb9\u96c6\u6309\u6743\u503c\u6392\u5e8f\nvector&lt;edge&gt; mp;\nint fa[N];\nint n, m, ans;\nint find(int x) {\n    int root = fa[x];\n    while (root != fa[root]) root = fa[root];\n    while (x != root) {\n        int t = fa[x];\n        fa[x] = root;\n        x = t;\n    }\n    return root;\n}\nvoid Kruskal() {\n    for (int i = 1; i &lt;= n; i++) fa[i] = i;\n    while (mp.size() &lt; n - 1 &amp;&amp; !q.empty()) {\n        edge ed = q.top();\n        q.pop();\n        int u = find(ed.u), v = find(ed.v);\n        if (u != v) {\n            mp.push_back(ed);\n            ans += ed.w;\n            fa[u] = fa[v];\n        }\n    }\n}\nint main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    while (m--) {\n        int u, v, w;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        q.push((edge) { u, v, w });\n    }\n    Kruskal();\n    if (mp.size() &lt; n - 1 &amp;&amp; q.empty()) {\n        cout &lt;&lt; \"\u65e0\u6cd5\u6784\u6210\u6700\u5c0f\u751f\u6210\u6811\";\n        return 0;\n    }\n    cout &lt;&lt; \"\u603b\u6743\u503c\uff1a\" &lt;&lt; ans &lt;&lt; endl;\n    cout &lt;&lt; \"\u6784\u6210\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u662f\uff1a\" &lt;&lt; endl;\n    for (auto e : mp)\n        printf(\"%d %d %d\\n\", e.u, e.v, e.w);\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Graph_theory/#5-prim","title":"5 prim","text":"C++<pre><code>const int N = 5e3 + 5;\nstruct edge {\n    int v, w;\n    bool operator&gt; (const edge&amp; e) const { return w &gt; e.w; }\n};\nint n, m;\nll ans = 0;\nbool vis[N];\nvector&lt;edge&gt; ed[N];\nvoid prim(int s) {\n    int cnt = 1;\n    vis[s] = 1;\n    priority_queue&lt;edge, vector&lt;edge&gt;, greater&lt;edge&gt; &gt; q;\n    for (auto e : ed[s])\n        q.push(e);\n    while (!q.empty() &amp;&amp; cnt &lt; n) {\n        edge e = q.top();\n        q.pop();\n        if (vis[e.v]) continue;\n        for (auto e : ed[e.v])\n            q.push(e);\n        ans += e.w;\n        vis[e.v] = 1;\n    }\n}\nint main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    while (m--) {\n        int u, v, w;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        ed[u].push_back((edge) { v, w });\n        ed[v].push_back((edge) { u, w });\n    }\n    prim(1);\n    for (int i = 1; i &lt;= n; i++)\n        if (!vis[i]) {\n            cout &lt;&lt; \"impossible\";\n            return 0;\n        }\n    cout &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Graph_theory/#6-bfs","title":"6 \u62d3\u6251\u6392\u5e8f\uff08\u5e38\u7528 BFS \u5224\u73af\uff09","text":"<p>\u590d\u6742\u5ea6 \\(O(n + m)\\)</p> C++<pre><code>vector&lt;int&gt; ed[N]; // \u5b58\u56fe\nint in[N]; // \u4fdd\u5b58\u5165\u5ea6\nbool vis[N];\nint main() {\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    while(m--) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        ed[u].push_back(v);\n        in[v]++;\n    }\n    queue&lt;int&gt; q;\n    vector&lt;int&gt; L;\n    for (int i = 1; i &lt;= n; i++)\n        if (!in[i])\n            q.push(i);\n    while (!q.empty()) {\n        int u = q.front();\n        L.push_back(u);\n        q.pop();\n        for (int v : ed[u]) {\n            if (in[v] == 0) continue;\n            in[v]--;\n            if (!in[v])\n                q.push(v);\n        }\n    }\n    if(L.size() != n) cout &lt;&lt; \"\u6709\u73af\u3001n\"; // \u8f93\u51fa L \u7684\u5185\u5bb9\u5373\u4e3a\u62d3\u6251\u6392\u5e8f\u7684\u7ed3\u679c\n}\n</code></pre> C++<pre><code>void topo() {\n    queue&lt;int&gt; q;\n    for(int i = 1; i &lt;= n; i++) {\n        if(!in[i])\n            q.push(i);\n    }\n    while(!q.empty()) {\n        int u = q.front();\n        q.pop();\n        for(int v : ed[u]) {\n            in[v]--;\n            if(!in[v]) q.push(v);\n        }\n    }\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Graph_theory/#7","title":"7 \u540c\u4f59\u6700\u77ed\u8def","text":"<p>\u5904\u7406\u300c\u7ed9\u5b9a \\(n\\) \u4e2a\u6574\u6570\uff0c\u6c42\u8fd9 \\(n\\) \u4e2a\u6574\u6570\u80fd\u62fc\u51d1\u51fa\u591a\u5c11\u7684\u5176\u4ed6\u6574\u6570\uff08\\(n\\) \u4e2a\u6574\u6570\u53ef\u4ee5\u91cd\u590d\u53d6\uff09\u300d\uff0c\u4ee5\u53ca\u300c\u7ed9\u5b9a \\(n\\) \u4e2a\u6574\u6570\uff0c\u6c42\u8fd9 \\(n\\) \u4e2a\u6574\u6570\u4e0d\u80fd\u62fc\u51d1\u51fa\u7684\u6700\u5c0f\uff08\u6700\u5927\uff09\u7684\u6574\u6570\u300d\uff0c\u6216\u8005\u300c\u81f3\u5c11\u8981\u62fc\u51e0\u6b21\u624d\u80fd\u62fc\u51fa\u6a21 \\(K\\) \u4f59 \\(p\\) \u7684\u6570\u300d\u7684\u95ee\u9898\u3002</p> <p>\u72b6\u6001\u8f6c\u79fb\uff1a\\(f(i + y) = f(i) + y\\)</p> C++<pre><code>// \u4f8b\u9898\uff1aluogu \u8df3\u697c\u673a\uff1a\u7ed9\u5b9a h\uff0c\u4ece 1 \u5f00\u59cb\uff0c\u53ef\u4ee5\u52a0 x\u3001y\u3001z\uff0c\u95ee\u6709\u591a\u5c11\u7ec4 abc\uff0c\u4f7f\u5f97 1 &lt; ax+by+cz &lt;= h\n#include &lt;bits/stdc++.h&gt;\n#define rep(i, j, k) for(int i = (j); i &lt;= (k); i++)\n#define per(i, k, j) for(int i = (k); i &gt;= (j); i--)\n#define ll long long\nusing namespace std;\nconst int N = 1e5 + 5;\nconst ll llINF = 0x3f3f3f3f3f3f3f3f;\nstruct edge {\n    ll v, w;\n};\nvector&lt;edge&gt; ed[N];\nll h, dis[N];\nll x, y, z;\nbool vis[N];\nvoid spfa() {\n    dis[1] = 1;\n    vis[1] = 1;\n    queue&lt;ll&gt; q;\n    q.push(1);\n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        vis[u] = 0;\n        for (auto e : ed[u]) {\n            int v = e.v, w = e.w;\n            if (dis[v] &gt; dis[u] + w) {\n                dis[v] = dis[u] + w;\n                if (!vis[v]) {\n                    q.push(v);\n                    vis[v] = 1;\n                }\n            }\n        }\n    }\n}\nvoid solve() {\n    memset(dis, llINF, sizeof(dis));\n    cin &gt;&gt; h &gt;&gt; x &gt;&gt; y &gt;&gt; z;\n    if (x == 1 || y == 1 || z == 1) {\n        cout &lt;&lt; h &lt;&lt; '\\n';\n        return;\n    }\n    rep(i, 0, x - 1) {\n        ed[i].push_back({(i + y) % x, y}); // \u52a0\u8fb9\n        ed[i].push_back({(i + z) % x, z});\n    }\n    spfa(); // \u8dd1\u4e00\u8fb9\u5355\u6e90\u6700\u77ed\u8def\n    ll ans = 0;\n    rep(i, 0, x - 1) {\n        if (h &gt;= dis[i]) {\n            ans += (h - dis[i]) / x + 1;\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\nint main() {\n    int T_T = 1;\n    // cin &gt;&gt; T_T;\n    while (T_T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Graph_theory/#8","title":"8 \u4f20\u9012\u95ed\u5305","text":"<p>floyd \u5224\u65ad\u8fde\u901a\u6027    \u6a21\u7248\uff1ahttps://www.luogu.com.cn/problem/B3611</p> C++<pre><code>#include &lt;bits/stdc++.h&gt;\n#define ll long long\nusing namespace std;\nbool dis[105][105];\nint n;\nvoid floyd() {\n    for (int k = 1; k &lt;= n; k++)\n        for (int i = 1; i &lt;= n; i++)\n            if (dis[i][k])\n                for (int j = 1; j &lt;= n; j++)\n                    if (dis[k][j])\n                        dis[i][j] = 1;\n}\nint main() {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++)\n        for (int j = 1; j &lt;= n; j++)\n            cin &gt;&gt; dis[i][j];\n    floyd();\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= n; j++)\n            cout &lt;&lt; dis[i][j] &lt;&lt; \" \";\n        cout &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Graph_theory/#9","title":"9 \u6700\u5c0f\u73af\u95ee\u9898","text":"<p>\u7ed9\u51fa\u4e00\u4e2a\u56fe\uff0c\u95ee\u5176\u4e2d\u7684\u7531 \\(n\\) \u4e2a\u8282\u70b9\u6784\u6210\u7684\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u73af \\((n \u2265 3)\\) \u662f\u591a\u5927\u3002 https://www.luogu.com.cn/problem/P6175</p> <p>\u8bb0\u539f\u56fe\u4e2d \\(u,v\\) \u4e4b\u95f4\u8fb9\u7684\u8fb9\u6743\u4e3a \\(val[u][v]\\)\u3002 \u6211\u4eec\u6ce8\u610f\u5230 Floyd \u7b97\u6cd5\u6709\u4e00\u4e2a\u6027\u8d28\uff1a\u5728\u6700\u5916\u5c42\u5faa\u73af\u5230\u70b9 \\(k\\) \u65f6\uff08\u5c1a\u672a\u5f00\u59cb\u7b2c \\(k\\) \u6b21\u5faa\u73af\uff09\uff0c\u6700\u77ed\u8def\u6570\u7ec4 \\(dis\\) \u4e2d\uff0c\\(dis[u][v]\\) \u8868\u793a\u7684\u662f\u4ece \\(u\\) \u5230 \\(v\\) \u4e14\u4ec5\u7ecf\u8fc7\u7f16\u53f7\u5728 \\([1 , k)\\) \u533a\u95f4\u4e2d\u7684\u70b9\u7684\u6700\u77ed\u8def\u3002 \u7531\u6700\u5c0f\u73af\u7684\u5b9a\u4e49\u53ef\u77e5\u5176\u81f3\u5c11\u6709\u4e09\u4e2a\u9876\u70b9\uff0c\u8bbe\u5176\u4e2d\u7f16\u53f7\u6700\u5927\u7684\u9876\u70b9\u4e3a \\(w\\)\uff0c\u73af\u4e0a\u4e0e \\(w\\) \u76f8\u90bb\u4e24\u4fa7\u7684\u4e24\u4e2a\u70b9\u4e3a \\(u,v\\)\uff0c\u5219\u5728\u6700\u5916\u5c42\u5faa\u73af\u679a\u4e3e\u5230 \\(k = w\\) \u65f6\uff0c\u8be5\u73af\u7684\u957f\u5ea6\u5373\u4e3a \\(dis[u][v] + val[v][w] + val[w][u]\\). \u6545\u5728\u5faa\u73af\u65f6\u5bf9\u4e8e\u6bcf\u4e2a \\(k\\) \u679a\u4e3e\u6ee1\u8db3 \\(i &lt; k, j &lt; k\\) \u7684 \\((i,j)\\)\uff0c\u66f4\u65b0\u7b54\u6848\u5373\u53ef\u3002</p> C++<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int INF = 0x2a2a2a2a; // 0x3f \u4f1a\u8fc7\u5927\u5bfc\u81f4\u6ea2\u51fa WA\nint dis[105][105], val[105][105];\nint n, m;\nint floyd() {\n    for (int i = 1; i &lt;= n; ++i) {\n        for (int j = 1; j &lt;= n; ++j) dis[i][j] = val[i][j];  //\u521d\u59cb\u5316\u6700\u77ed\u8def\u77e9\u9635\n    }\n    int ans = INF;\n    for (int k = 1; k &lt;= n; ++k) {\n        for (int i = 1; i &lt; k; ++i) {\n            for (int j = 1; j &lt; i; ++j)\n                ans = min(ans, dis[i][j] + val[i][k] + val[k][j]);  //\u66f4\u65b0\u7b54\u6848\n        }\n        for (int i = 1; i &lt;= n; ++i) {\n            for (int j = 1; j &lt;= n; ++j)\n                dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j]);  //floyd \u66f4\u65b0\u6700\u77ed\u8def\u77e9\u9635\n        }\n    }\n    return ans;\n}\nint main() {\n    memset(val, INF, sizeof(val));\n    cin &gt;&gt; n &gt;&gt; m;\n    while (m--) {\n        int u, v, w;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        val[u][v] = val[v][u] = w;\n    }\n    int ans = floyd();\n    if (ans == INF) cout &lt;&lt; \"No solution.\";\n    else cout &lt;&lt; ans;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Graph_theory/#10-johnson","title":"10 Johnson \u6c42\u5168\u6e90\u6700\u77ed\u8def","text":"<p>P5905 \u3010\u6a21\u677f\u3011\u5168\u6e90\u6700\u77ed\u8def\uff08Johnson\uff09 https://www.luogu.com.cn/problem/P5905 \u7ed9\u5b9a\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u53ef\u80fd\u5b58\u5728\u81ea\u73af\u548c\u91cd\u8fb9\uff0c\u4e5f\u4e0d\u4e00\u5b9a\u662f\u8fde\u901a\u56fe\uff0c\u6c42\u6240\u6709\u70b9\u5bf9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84</p> <p>\u601d\u8def\uff1a</p> <ul> <li>\u65b0\u5efa\u865a\u62df\u8282\u70b9\uff0c\u5411\u6240\u6709\u8282\u70b9\u8fde\u63a5\u4e00\u6761\u6743\u503c\u4e3a \\(0\\) \u7684\u8fb9\uff0c\u8dd1\u4e00\u8fb9 spfa\uff0c\u5f97\u5230 \\(0\\) \u53f7\u7ed3\u70b9\u5230\u5176\u4ed6 \\(n\\) \u4e2a\u70b9\u7684\u6700\u77ed\u8def\uff0c\u8bb0\u4e3a \\(h_i\\)\u3002</li> <li>\u5047\u8bbe\u5b58\u5728\u4e00\u6761\u4ece \\(u\\) \u5230 \\(v\\) \u7684\u6743\u503c\u4e3a \\(w\\) \u7684\u8fb9\uff0c\u5219\u5c06\u8be5\u8fb9\u7684\u6743\u503c\u4ece\u65b0\u8bbe\u7f6e\u4e3a \\(w + h_u - h_v\\)\uff0c\u76ee\u7684\u662f\u786e\u4fdd\u6240\u6709\u8fb9\u7684\u6743\u503c\u90fd\u975e\u8d1f\uff0c\u8fdb\u800c\u4f7f\u7528 dijkstra\u3002</li> <li>\u4ee5\u6bcf\u4e2a\u70b9\u4e3a\u8d77\u70b9\u8dd1 dijkstra \u6c42\u6700\u77ed\u8def\u5373\u53ef\u3002\u6700\u540e\u5f97\u5230\u7684\u4efb\u610f\u4e24\u70b9\u95f4\u6700\u77ed\u8def\u8981\u51cf\u53bb \\(h_u-h_v\\)</li> </ul> <p>\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(nmlogn)\\)</p> C++<pre><code>#include &lt;bits/stdc++.h&gt;\n#define ll long long\nusing namespace std;\nconst int N = 3e3 + 5;\nstruct edge {\n    int v;\n    ll w;\n};\nstruct node {\n    ll dis;\n    int u;\n    bool operator&gt;(const node&amp; a) const { return dis &gt; a.dis; }\n};\nvector&lt;edge&gt; ed[N];\nint n, m;\nll h[N], dis[N][N];\nint cnt[N];\nbool vis[N];\nvoid spfa(int s) {\n    memset(h, 63, sizeof(h));\n    queue&lt;int&gt; q;\n    q.push(s);\n    h[s] = 0;\n    while (!q.empty()) {\n        int u = q.front();\n        vis[u] = 0;\n        q.pop();\n        for (auto e : ed[u]) {\n            int v = e.v;\n            ll w = e.w;\n            if (h[v] &gt; h[u] + w) {\n                h[v] = h[u] + w;\n                cnt[v] = cnt[u] + 1;\n                if (cnt[v] &gt; n) {\n                    cout &lt;&lt; -1;\n                    exit(0);\n                }\n                if (!vis[v]) {\n                    vis[v] = 1;\n                    q.push(v);\n                }\n            }\n        }\n    }\n}\nvoid dijkstra(int s) {\n    priority_queue&lt;node, vector&lt;node&gt;, greater&lt;node&gt; &gt; q;\n    q.push({0, s});\n    dis[s][s] = 0;\n    while (!q.empty()) {\n        int u = q.top().u;\n        q.pop();\n        if (vis[u]) continue;\n        vis[u] = 1;\n        for (auto e : ed[u]) {\n            int v = e.v;\n            ll w = e.w;\n            if (dis[s][v] &gt; dis[s][u] + w) {\n                dis[s][v] = dis[s][u] + w;\n                q.push({dis[s][v], v});\n            }\n        }\n    }\n}\nint main() {\n    cin &gt;&gt; n &gt;&gt; m;\n    while (m--) {\n        int u, v, w;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        ed[u].push_back({v, w});\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        ed[0].push_back({i, 0});\n    }\n    spfa(0);\n    for (int i = 1; i &lt;= n; i++) {\n        for (auto&amp; j : ed[i]) {\n            j.w += h[i] - h[j.v];\n        }\n    }\n    memset(dis, 0x3f, sizeof(dis));\n    for (int i = 1; i &lt;= n; i++) {\n        memset(vis, 0, sizeof(vis));\n        dijkstra(i);\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        ll ans = 0;\n        for (int j = 1; j &lt;= n; j++) {\n            if (dis[i][j] == 0x3f3f3f3f3f3f3f3f) {\n                dis[i][j] = 1e9;\n            }\n            else {\n                dis[i][j] -= h[i] - h[j];\n            }\n            ans += dis[i][j] * j;\n        }\n        cout &lt;&lt; ans &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Graph_theory/#11","title":"11 \u6b27\u62c9\u8def","text":"<p>\u6b27\u62c9\u8def\u5b9a\u4e49\uff1a\u4ece\u56fe\u4e2d\u67d0\u4e2a\u70b9\u51fa\u53d1\uff0c\u904d\u5386\u6574\u4e2a\u56fe\uff0c\u56fe\u4e2d\u6bcf\u6761\u8fb9\u7ecf\u8fc7\u4e14\u53ea\u7ecf\u8fc7\u4e00\u6b21</p> <p>\u9996\u5148\u7528 dfs \u6216\u5e76\u67e5\u96c6\u5224\u65ad\u56fe\u7684\u8fde\u901a\u6027\uff0c\u7136\u540e\u5224\u65ad\u56fe\u662f\u5426\u5b58\u5728\u6b27\u62c9\u8def</p> <p>\u65e0\u5411\u8fde\u901a\u56fe\u7684\u5224\u65ad\u6761\u4ef6\uff1a\u5982\u679c\u56fe\u4e2d\u7684\u70b9\u5168\u90fd\u662f\u5076\u70b9\uff0c\u5219\u5b58\u5728\u6b27\u62c9\u56de\u8def\u3002\u5982\u679c\u53ea\u6709\u4e24\u4e2a\u5947\u70b9\uff0c\u5219\u5b58\u5728\u6b27\u62c9\u8def\uff0c\u5176\u4e2d\u4e00\u4e2a\u5947\u70b9\u662f\u8d77\u70b9\uff0c\u53e6\u4e00\u4e2a\u662f\u7ec8\u70b9</p> <p>\u6709\u5411\u8fde\u901a\u56fe\u7684\u5224\u65ad\u6761\u4ef6\uff1a\u5982\u679c\u6240\u6709\u70b9\u7684\u8bfb\u4e66\u90fd\u662f 0 \uff0c\u5219\u5b58\u5728\u6b27\u62c9\u56de\u8def\u3002\u5982\u679c\u6709\u4e24\u4e2a\u70b9\u7684\u5ea6\u6570\u5206\u522b\u662f 1 \u548c -1 \uff0c\u5219\u5b58\u5728\u6b27\u62c9\u8def\uff0c\u5ea6\u6570\u4e3a 1 \u7684\u662f\u8d77\u70b9\uff0c\u4e3a -1 \u7684\u662f\u7ec8\u70b9\u3002</p>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Graph_theory/#12","title":"12 \u4e8c\u5206\u56fe\u5339\u914d","text":"<ol> <li>\u5308\u7259\u5229\u7b97\u6cd5 O(nm)</li> </ol> C++<pre><code>//\u5bf9\u4e8e\u7b2c x \u4e2a\uff0c\u80fd\u591f\u5339\u914d\u8fd4\u56de true\uff0c\u4e0d\u80fd\u5339\u914d\u8fd4\u56de false \nbool find(int x) {\n    for(int i = h[x];i!=-1;i = e[i].ne){\n        int v = e[i].v;\n        //\u5982\u679c\u66fe\u7ecf\u67e5\u627e\u8fc7\u7b2c v \u4e2a\u70b9\uff0c\u4f46\u662f\u6ca1\u6709\u6210\u529f \n        if(vis[v] == 0){\n            vis[v] = 1;\n            //\u7b2c v \u4e2a\u6ca1\u6709\u5339\u914d\u6216\u8005\u7b2c v \u4e2a\u7684\u5339\u914d\u5bf9\u8c61\u53ef\u4ee5\u5339\u914d\u6210\u529f \n            if(match[v] == 0 || find(match[v])){\n                match[v] = x;   return true;\n            }\n        }\n    }\n    return false;\n} \nint main() {\n    for(i = 1;i&lt;=n1;i++){\n        memset(vis,0,sizeof vis);\n        //\u5982\u679c\u5339\u914d\u6210\u529f\uff0c\u5219\u5339\u914d\u603b\u6570+1 \n        if(find(i))ans++;\n    }\n    printf(\"%d\",ans);\n    return 0;\n}\n</code></pre> <ol> <li>KM \u7b97\u6cd5\uff0c\u6c42\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5e26\u6743\u5339\u914d O(n^3)</li> </ol> C++<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\ntypedef pair&lt;ll, ll&gt; PII;\nconst int N = 605;\nconst int inf = 0x3f3f3f3f;\nPII a[N];\nll n, b[N], c[N];\nll w[N][N], lx[N], ly[N];\nll linker[N], slack[N];\nbool visy[N];\nll pre[N];\nvoid bfs(ll k) {\n    int i, j;\n    ll x, y = 0, yy = 0, delta;\n    memset(pre, 0, sizeof(pre));\n    for (i = 1; i &lt;= n; i++) slack[i] = inf;\n    linker[y] = k;\n    while (1) {\n        x = linker[y]; delta = inf; visy[y] = true;\n        for (i = 1; i &lt;= n; i++) {\n            if (!visy[i]) {\n                if (slack[i] &gt; lx[x] + ly[i] - w[x][i]) {\n                    slack[i] = lx[x] + ly[i] - w[x][i];\n                    pre[i] = y;\n                }\n                if (slack[i] &lt; delta) delta = slack[i], yy = i;\n            }\n        }\n        for (i = 0; i &lt;= n; i++) {\n            if (visy[i]) lx[linker[i]] -= delta, ly[i] += delta;\n            else slack[i] -= delta;\n        }\n        y = yy;\n        if (linker[y] == -1) break;\n    }\n    while (y) linker[y] = linker[pre[y]], y = pre[y];\n}\nll KM() {\n    int i, j;\n    memset(lx, 0, sizeof(lx));\n    memset(ly, 0, sizeof(ly));\n    memset(linker, -1, sizeof(linker));\n    for (i = 1; i &lt;= n; i++) {\n        memset(visy, false, sizeof(visy));\n        bfs(i);\n    }\n    ll res = 0;\n    for (i = 1; i &lt;= n; i++) {\n        if (linker[i] != -1) {\n            res += w[linker[i]][i];\n        }\n    }\n    return res;\n}\nint main() {\n    int i, j;\n    while (cin &gt;&gt; n) {\n        for (i = 1; i &lt;= n; i++) {\n            for (j = 1; j &lt;= n; j++) {\n                scanf(\"%d\", &amp;w[i][j]);\n            }\n        }\n        cout &lt;&lt; KM() &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Graph_theory/#13","title":"13 \u6b27\u62c9\u56de\u8def","text":"C++<pre><code>//\u627e\u51fa\u6b27\u62c9\u56de\u8def\uff0c\u5e76\u5c06\u6b27\u62c9\u56de\u8def\u7684\u6bcf\u6761\u8fb9\u5b58\u5165\u6808\u4e2d\n//type==1, \u4e3a\u65e0\u5411\u56fe\uff0ctype==2 \u4e3a\u6709\u5411\u56fe\nvoid dfs(int u) {\n    int&amp; i = h[u], j;\n    for (; i != -1;) {\n        int v = e[i].v;\n        if (vis[i]) {\n            i = e[i].ne;\n            continue;\n        }\n        vis[i] = 1;//\u6807\u8bb0\u4e3a\u8d70\u8fc7\n        int t = i;\n        if (type == 1) {\n            //\u5076\u6570\u8fb9\u4e3a\u6b63\uff0c\u5947\u6570\u8fb9\u4e3a\u8d1f\n            vis[i ^ 1] = 1;\n            t = (t + 2) / 2;\n            if (i % 2 == 1)    t = -t;\n        }\n        else {\n            t = t + 1;\n        }\n        i = e[i].ne;\n        dfs(v);\n        stac.push(t);\n    }\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Graph_theory/#14","title":"14 \u94fe\u5f0f\u524d\u5411\u661f","text":"C++<pre><code>#include &lt;bits/stdc++.h&gt;\n#define ll long long\nusing namespace std;\nconst int N = 1e6 + 5;\nconst int M = 2e6 + 5;\nstruct edge {\n    int from, to, nxt;\n    int w;\n}ed[M];\nint head[N], cnt;\nint n, m;\nvoid init() {\n    for (int i = 0; i &lt; N; i++) head[i] = -1;\n    for (int i = 0; i &lt; M; i++) ed[i].nxt = -1;\n    cnt = 0;\n}\nvoid addedge(int u, int v, int w) {\n    ed[cnt].from = u;\n    ed[cnt].to = v;\n    ed[cnt].w = w;\n    ed[cnt].nxt = head[u];\n    head[u] = cnt++;\n}\nint main() {\n    init();\n    cin &gt;&gt; n &gt;&gt; m;\n    while (m--) {\n        int u, v, w;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        addedge(u, v, w);\n    }\n    // \u904d\u5386\u8282\u70b9 2 \u7684\u6240\u6709\u90bb\u5c45 ~i == (i !=-1)\n    for (int i = head[2]; ~i; i = ed[i].nxt)\n        cout &lt;&lt; ed[i].to &lt;&lt; \" \";\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Graph_theory/#15-dag","title":"15 \u6709\u5411\u65e0\u73af\u56fe DAG","text":"<p>\u62d3\u6251\u6392\u5e8f\u6765\u5224\u65ad\u4e00\u4e2a\u56fe\u662f\u5426\u4e3a DAG.</p>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Graph_theory/#dp","title":"\u5e94\u7528\uff1aDP \u6c42\u6700\u77ed\uff08\u957f\uff09\u8def","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n+m)\\)</p> C++<pre><code>struct edge {\n    int v, w;\n};\nint n, m;\nvector&lt;edge&gt; e[MAXN];\nvector&lt;int&gt; L;                               // \u5b58\u50a8\u62d3\u6251\u6392\u5e8f\u7ed3\u679c\nint max_dis[MAXN], min_dis[MAXN], in[MAXN];  // in \u5b58\u50a8\u6bcf\u4e2a\u8282\u70b9\u7684\u5165\u5ea6\nvoid toposort() {  // \u62d3\u6251\u6392\u5e8f\n    queue&lt;int&gt; S;\n    memset(in, 0, sizeof(in));\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 0; j &lt; e[i].size(); j++) {\n            in[e[i][j].v]++;\n        }\n    }\n    for (int i = 1; i &lt;= n; i++)\n        if (in[i] == 0) S.push(i);\n    while (!S.empty()) {\n        int u = S.front();\n        S.pop();\n        L.push_back(u);\n        for (int i = 0; i &lt; e[u].size(); i++) {\n            if (--in[e[u][i].v] == 0) {\n                S.push(e[u][i].v);\n            }\n        }\n    }\n}\nvoid dp(int s) {  // \u4ee5 s \u4e3a\u8d77\u70b9\u6c42\u5355\u6e90\u6700\u957f\uff08\u77ed\uff09\u8def\n    toposort();     // \u5148\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\n    memset(min_dis, 0x3f, sizeof(min_dis));\n    memset(max_dis, 0, sizeof(max_dis));\n    min_dis[s] = 0;\n    for (int i = 0; i &lt; L.size(); i++) {\n        int u = L[i];\n        for (int j = 0; j &lt; e[u].size(); j++) {\n            min_dis[e[u][j].v] = min(min_dis[e[u][j].v], min_dis[u] + e[u][j].w);\n            max_dis[e[u][j].v] = max(max_dis[e[u][j].v], max_dis[u] + e[u][j].w);\n        }\n    }\n}\n</code></pre> <p>\u4f8b\u9898\uff1aP1113 \u6742\u52a1\uff1a\u7ed9\u5b9a \\(n\\) \u4e2a\u4efb\u52a1\u7684\u5b8c\u6210\u6240\u9700\u65f6\u95f4\uff0c\u548c\u6bcf\u4e2a\u4efb\u52a1\u5fc5\u9700\u7684\u524d\u7f6e\u4efb\u52a1\uff0c\u6c42\u5b8c\u6210\u6240\u6709\u4efb\u52a1\u6240\u9700\u7684\u6700\u5c0f\u7528\u65f6</p> C++<pre><code>#include &lt;bits/stdc++.h&gt;\n#define ll long long\nusing namespace std;\nconst int N = 1e4 + 5;\nvector&lt;int&gt; ed[N]; // \u5b58\u56fe\nint in[N], a[N], dp[N]; // \u4fdd\u5b58\u5165\u5ea6\nbool vis[N];\nint main() {\n    ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);\n    int n;\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; a[i] &gt;&gt; v;\n        dp[i] = a[i];\n        while (v) {\n            ed[v].push_back(u);\n            in[u]++;\n            cin &gt;&gt; v;\n        }\n    }\n    queue&lt;int&gt; q;\n    vector&lt;int&gt; L;\n    for (int i = 1; i &lt;= n; i++)\n        if (!in[i]) q.push(i);\n    while (!q.empty()) {\n        int u = q.front();\n        L.push_back(u);\n        q.pop();\n        for (int v : ed[u]) {\n            if (in[v] == 0) continue;\n            in[v]--;\n            if (!in[v]) q.push(v);\n        }\n    }\n    for (int u : L)\n        for (int v : ed[u])\n            dp[v] = max(dp[v], dp[u] + a[v]);\n    int ans = 0;\n    for (int i = 1; i &lt;= n; i++)\n        ans = max(ans, dp[i]);\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Graph_theory/#16","title":"16 \u5272\u8fb9\u7f29\u70b9","text":"C++<pre><code>struct EDCC {\n    int n, now, cnt;\n    vector&lt;vector&lt;int&gt;&gt; ver;\n    vector&lt;int&gt; dfn, low, col, S;\n    set&lt;array&lt;int, 2&gt;&gt; bridge;\n\n    EDCC(int n) : n(n), ver(n + 1), low(n + 1) {\n        dfn.resize(n + 1, -1);\n        col.resize(n + 1, -1);\n        now = cnt = 0;\n    }\n    void add(int x, int y) { // \u548c scc \u76f8\u6bd4\u591a\u4e86\u4e00\u6761\u8fde\u8fb9\n        ver[x].push_back(y);\n        ver[y].push_back(x);\n    }\n    void tarjan(int x, int fa) { // \u548c scc \u76f8\u6bd4\u591a\u4e86\u4e00\u4e2a fa\n        dfn[x] = low[x] = now++;\n        S.push_back(x);\n        for (auto y : ver[x]) {\n            if (y == fa) continue;\n            if (dfn[y] == -1) {\n                bridge.insert({x, y}); // \u50a8\u5b58\u5272\u8fb9\n                tarjan(y, x);\n                low[x] = min(low[x], low[y]);\n            }\n            else if (col[y] == -1 &amp;&amp; dfn[y] &lt; dfn[x]) {\n                bridge.insert({x, y});\n                low[x] = min(low[x], dfn[y]);\n            }\n        }\n        if (dfn[x] == low[x]) {\n            int pre;\n            cnt++;\n            do {\n                pre = S.back();\n                col[pre] = cnt;\n                S.pop_back();\n            } while (pre != x);\n        }\n    }\n    auto work() { // [cnt \u65b0\u56fe\u7684\u9876\u70b9\u6570\u91cf, bridge \u5168\u90e8\u5272\u8fb9]\n        for (int i = 1; i &lt;= n; i++) { // \u907f\u514d\u56fe\u4e0d\u8fde\u901a\n            if (dfn[i] == -1) {\n                tarjan(i, 0);\n            }\n        }\n\n        vector&lt;int&gt; siz(cnt + 1); // siz \u6bcf\u4e2a\u8fb9\u53cc\u4e2d\u70b9\u7684\u6570\u91cf\n        vector&lt;vector&lt;int&gt;&gt; adj(cnt + 1); // adj \u65b0\u56fe\n        for (int i = 1; i &lt;= n; i++) {\n            siz[col[i]]++;\n            for (auto j : ver[i]) {\n                int x = col[i], y = col[j];\n                if (x != y) {\n                    adj[x].push_back(y);\n                }\n            }\n        }\n        return tuple{cnt, adj, col, siz};\n    }\n};\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Graph_theory/#17-tarjan","title":"17 tarjan \u5f3a\u8fde\u901a\u5206\u91cf&amp;\u7f29\u70b9","text":"<p>P3387 \u3010\u6a21\u677f\u3011\u7f29\u70b9 \u7ed9\u5b9a\u4e00\u4e2a \\(n\\) \u4e2a\u70b9 \\(m\\) \u6761\u8fb9\u6709\u5411\u56fe\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u6743\u503c\uff0c\u6c42\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u8def\u5f84\u7ecf\u8fc7\u7684\u70b9\u6743\u503c\u4e4b\u548c\u6700\u5927\u3002\u4f60\u53ea\u9700\u8981\u6c42\u51fa\u8fd9\u4e2a\u6743\u503c\u548c\u3002 \u5141\u8bb8\u591a\u6b21\u7ecf\u8fc7\u4e00\u6761\u8fb9\u6216\u8005\u4e00\u4e2a\u70b9\uff0c\u4f46\u662f\uff0c\u91cd\u590d\u7ecf\u8fc7\u7684\u70b9\uff0c\u6743\u503c\u53ea\u8ba1\u7b97\u4e00\u6b21\u3002</p> C++<pre><code>#include &lt;bits/stdc++.h&gt;\nconst int N = 1e4 + 5;\n\nstruct edge {\n    int v, w;\n};\nint n, m;\nstd::vector&lt;int&gt; ed[N];\nstd::vector&lt;int&gt; _ed[N];\nstd::stack&lt;int&gt; st;\nint a[N];\nbool vis[N];\nint low[N], dfn[N];\nint scc, tot;\nint color[N];\nint w[N];\n\nint main() {\n    std::ios::sync_with_stdio(false), std::cin.tie(0), std::cout.tie(0);\n\n    std::cin &gt;&gt; n &gt;&gt; m;\n    for (int i = 1; i &lt;= n; i++) std::cin &gt;&gt; a[i];\n    for (int i = 0; i &lt; m; i++) {\n        int u, v;\n        std::cin &gt;&gt; u &gt;&gt; v;\n        ed[u].push_back(v);\n    }\n\n    auto tarjan = [&amp;](auto self, int u) -&gt; void {\n        low[u] = dfn[u] = ++tot;\n        st.push(u);\n        vis[u] = true;\n        for (int v : ed[u]) {\n            if (!dfn[v]) {\n                self(self, v);\n                low[u] = std::min(low[u], low[v]);\n            }\n            else if (vis[v]) {\n                low[u] = std::min(low[u], dfn[v]);\n            }\n        }\n        if (low[u] == dfn[u]) {\n            color[u] = ++scc;\n            int v;\n            do {\n                v = st.top();\n                st.pop();\n                vis[v] = false;\n                color[v] = scc;\n                w[scc] += a[v];\n            } while (u != v);\n        }\n        };\n\n    for (int i = 1; i &lt;= n; i++) {\n        if (!dfn[i]) {\n            tarjan(tarjan, i);\n        }\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j : ed[i]) {\n            if (color[i] != color[j]) {\n                _ed[color[i]].push_back(color[j]);\n            }\n        }\n    }\n\n    int ans = 0;\n    std::vector&lt;int&gt; dis(scc + 1, 0);\n    std::vector&lt;bool&gt; _vis(scc + 1, 0);\n    auto lpfa = [&amp;](int s) {\n        std::queue&lt;int&gt; q;\n        _vis[s] = true;\n        dis[s] = w[s];\n        q.push(s);\n        while (q.size()) {\n            int u = q.front();\n            q.pop();\n            _vis[u] = false;\n            for (int v : _ed[u]) {\n                if (dis[v] &lt; dis[u] + w[v]) {\n                    dis[v] = dis[u] + w[v];\n                    if (!_vis[v]) {\n                        _vis[v] = 1;\n                        q.push(v);\n                    }\n                }\n            }\n        }\n        for (int i = 1; i &lt;= scc; i++)\n            ans = std::max(ans, dis[i]);\n        };\n\n    for (int i = 1; i &lt;= scc; i++)\n        lpfa(i);\n\n    std::cout &lt;&lt; ans &lt;&lt; std::endl;\n\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Graph_theory/#18","title":"18 \u5206\u5c42\u56fe","text":"<p>\u6a21\u677f\u9898 Luogu P4568 \u98de\u884c\u8def\u7ebf</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u5e26\u6743\u65e0\u5411\u56fe\uff0c\u6c42 \\(s\\) \u5230 \\(t\\) \u7684\u6700\u77ed\u8def\uff0c\u5176\u4e2d\u53ef\u4ee5\u4ee4\u8def\u5f84\u4e0a\u6700\u591a \\(k \\leq 10\\) \u6761\u9053\u8def\u82b1\u8d39\u4e3a \\(0\\)\u3002</p> C++<pre><code>#include &lt;bits/stdc++.h&gt;\n\nint main() {\n    std::ios::sync_with_stdio(false), std::cin.tie(0), std::cout.tie(0);\n\n    int n, m, k, s, t;\n    std::cin &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; s &gt;&gt; t;\n    std::vector&lt;std::vector&lt;std::pair&lt;int, int&gt;&gt;&gt; ed(n * (k + 1));\n    for (int i = 0; i &lt; m; i++) {\n        int a, b, c;\n        std::cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n        for (int j = 0; j &lt;= k; j++) {\n            int u = a + n * j, v = b + n * j;\n            ed[u].push_back({v, c});\n            ed[v].push_back({u, c});\n            if (j &lt; k) {\n                ed[u].push_back({v + n, 0});\n                ed[v].push_back({u + n, 0});\n            }\n        }\n    }\n\n    std::vector&lt;bool&gt; vis(n * (k + 1), false);\n    std::vector&lt;int&gt; dis(n * (k + 1), 1e9);\n\n    auto dijkstra = [&amp;](int s) -&gt; void {\n        std::priority_queue&lt;std::pair&lt;int, int&gt;, std::vector&lt;std::pair&lt;int, int&gt;&gt;, std::greater&lt;std::pair&lt;int, int&gt;&gt;&gt; q;\n        q.push({0, s});\n        dis[s] = 0;\n        while (q.size()) {\n            int u = q.top().second;\n            q.pop();\n            if (vis[u]) continue;\n            vis[u] = 1;\n            for (auto e : ed[u]) {\n                int v = e.first, w = e.second;\n                if (dis[v] &gt; dis[u] + w) {\n                    dis[v] = dis[u] + w;\n                    q.push({dis[v], v});\n                }\n            }\n        }\n        };\n    dijkstra(s);\n\n    int ans = 1e9;\n    for (int i = 0; i &lt;= k; i++) {\n        ans = std::min(ans, dis[t + n * i]);\n    }\n\n    std::cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/High_precision_calc/","title":"High precision calc","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/High_precision_calc/#_1","title":"\u9ad8\u7cbe\u5ea6\u52a0\u6cd5","text":"C++<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nvector&lt;int&gt; add(vector&lt;int&gt;&amp; A, vector&lt;int&gt;&amp; B) {\n    if (A.size() &lt; B.size()) return add(B, A);\n    vector&lt;int&gt; C;\n    int t = 0;\n    for (int i = 0; i &lt; A.size(); i++) {\n        t += A[i];\n        if (i &lt; B.size()) t += B[i];\n        C.push_back(t % 10);\n        t /= 10;\n    }\n    if (t) C.push_back(t);\n    return C;\n}\nint main() {\n    string a, b;\n    vector&lt;int&gt; A, B;\n    cin &gt;&gt; a &gt;&gt; b;\n    for (int i = a.length() - 1; i &gt;= 0; i--) A.push_back(a[i] - '0');\n    for (int i = b.length() - 1; i &gt;= 0; i--) B.push_back(b[i] - '0');\n    auto C = add(A, B);\n    for (int i = C.size() - 1; i &gt;= 0; i--) cout &lt;&lt; C[i];\n    cout &lt;&lt; endl;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/High_precision_calc/#_2","title":"\u9ad8\u7cbe\u5ea6\u51cf\u6cd5","text":"C++<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nbool cmp(vector&lt;int&gt;&amp; A, vector&lt;int&gt;&amp; B) {\n    if (A.size() != B.size()) return A.size() &gt; B.size();\n    for (int i = A.size() - 1; i &gt;= 0; i--) {\n        if (A[i] != B[i])\n            return A[i] &gt; B[i];\n    }\n    return true;\n}\nvector&lt;int&gt; sub(vector&lt;int&gt;&amp; A, vector&lt;int&gt;&amp; B) {\n    vector&lt;int&gt; C;\n    int t = 0;\n    for (int i = 0; i &lt; A.size(); i++) {\n        t = A[i] - t;\n        if (i &lt; B.size()) t -= B[i];\n        C.push_back((t + 10) % 10);\n        if (t &lt; 0) t = 1;\n        else t = 0;\n    }\n    while (C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back();\n    return C;\n}\nint main() {\n    string a, b;\n    vector&lt;int&gt; A, B;\n    cin &gt;&gt; a &gt;&gt; b;\n    for (int i = a.length() - 1; i &gt;= 0; i--) A.push_back(a[i] - '0');\n    for (int i = b.length() - 1; i &gt;= 0; i--) B.push_back(b[i] - '0');\n    vector&lt;int&gt; C;\n    if (cmp(A, B)) {\n        C = sub(A, B);\n    }\n    else {\n        C = sub(B, A);\n        cout &lt;&lt; \"-\";\n    }\n    for (int i = C.size() - 1; i &gt;= 0; i--) cout &lt;&lt; C[i];\n    cout &lt;&lt; endl;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/High_precision_calc/#_3","title":"\u9ad8\u7cbe\u5ea6\u4e58\u6cd5","text":"C++<pre><code>// \u9ad8\u7cbe a * \u4f4e\u7cbe b\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nvector&lt;int&gt; mul(vector&lt;int&gt;&amp; A, int b) {\n    vector&lt;int&gt; C;\n    int t = 0;\n    for (int i = 0; i &lt; A.size() || t; i++) {\n        if (i &lt; A.size()) t += A[i] * b;\n        C.push_back(t % 10);\n        t /= 10;\n    }\n    while (C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back();\n    return C;\n}\nint main() {\n    string a;\n    int b;\n    vector&lt;int&gt; A;\n    cin &gt;&gt; a &gt;&gt; b;\n    for (int i = a.length() - 1; i &gt;= 0; i--) A.push_back(a[i] - '0');\n    auto C = mul(A, b);\n    for (int i = C.size() - 1; i &gt;= 0; i--) cout &lt;&lt; C[i];\n    cout &lt;&lt; endl;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/High_precision_calc/#_4","title":"\u9ad8\u7cbe\u5ea6\u9664\u6cd5","text":"C++<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nvector&lt;int&gt; div(vector&lt;int&gt;&amp; A, int b, int&amp; r) {\n    vector&lt;int&gt; C;\n    r = 0;\n    for (int i = A.size() - 1; i &gt;= 0; i--) {\n        r = r * 10 + A[i];\n        C.push_back(r / b);\n        r %= b;\n    }\n    reverse(C.begin(), C.end());\n    while (C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back();\n    return C;\n}\nint main() {\n    string a;\n    int b;\n    vector&lt;int&gt; A;\n    cin &gt;&gt; a &gt;&gt; b;\n    for (int i = a.size(); i &gt;= 0; i--) A.push_back(a[i] - '0');\n    int r;\n    auto C = div(A, b, r);\n    for (int i = C.size() - 1; i &gt;= 0; i--) cout &lt;&lt; C[i];\n    cout &lt;&lt; endl &lt;&lt; r &lt;&lt; endl; // r \u4e3a\u4f59\u6570\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/High_precision_calc/#_5","title":"High precision calc","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Number_theory/","title":"Number theory","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Number_theory/#1","title":"1 \u4e58\u6cd5\u53d6\u6a21","text":"C++<pre><code>ll mul(ll a, ll b, ll m) {\n    a = a % m, b = b % m;\n    ll res = 0;\n    while (b &gt; 0) {\n        if (b &amp; 1) res = (res + a) % m;\n        a = (a + a) % m;\n        b &gt;&gt;= 1;\n    }\n    return res;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Number_theory/#2","title":"2 \u5feb\u901f\u5e42\u53d6\u6a21","text":"C++<pre><code>ll fastPow(ll a, ll n, ll mod) { // (a^n)%m\n    ll ans = 1;\n    a %= mod;\n    while (n) {\n        if (n &amp; 1)ans = (ans * a) % mod;\n        a = (a * a) % mod;\n        n &gt;&gt;= 1;\n    }\n    return ans;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Number_theory/#3","title":"3 \u77e9\u9635\u4e58\u6cd5&amp;\u5feb\u901f\u5e42","text":"C++<pre><code>int mod;\nstruct matrix { int m[N][N]; };\nmatrix operator * (const matrix&amp; a, const matrix&amp; b) {\n    matrix c;\n    memset(c.m, 0, sizeof(c.m));\n    for (int i = 0; i &lt; N; i++)\n        for (int j = 0; j &lt; N; j++)\n            for (int k = 0; k &lt; N; k++)\n                c.m[i][j] = (c.m[i][j] + a.m[i][k] * b.m[k][j]) % mod;\n    return c;\n}\nmatrix pow_matrix(matrix a, int n) {\n    matrix ans;\n    memset(ans.m, 0, sizeof(ans.m));\n    for (int i = 0; i &lt; N; i++)\n        ans.m[i][i] = 1;\n    while (n) {\n        if (n &amp; 1) ans = ans * a;\n        a = a * a;\n        n &gt;&gt;= 1;\n    }\n    return ans;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Number_theory/#4-gcd-lcm","title":"4 GCD &amp; LCM","text":"<p><code>\u88f4\u8700\u5b9a\u7406</code> \u5982\u679c a \u548c b \u5747\u4e3a\u6574\u6570\uff0c\u5219\u6709\u6574\u6570 x \u548c y \u4f7f ax+by=gcd(a,b)\uff1bab \u4e92\u7d20\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728 x \u548c y \u4f7f\u5f97 ax+by=1</p> C++<pre><code>int gcd(int a, int b) {\n    if (b == 0)\n        return a;\n    return gcd(b, a % b);\n}\nint lcm(int a, int b) {\n    return a / gcd(a, b) * b;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Number_theory/#5","title":"5 \u6269\u5c55\u6b27\u51e0\u91cc\u5f97","text":"<p>\\(ax+by=c\\) \u6709\u89e3\u7684\u5145\u8981\u6761\u4ef6\u662f \\(d=gcd(a,b)\\) \u80fd\u6574\u9664 \\(c\\) \u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u6c42\u89e3\u4e8c\u5143\u4e22\u756a\u56fe\u65b9\u7a0b\uff0c\u8fdb\u800c\u6c42\u89e3 \\(ax+by=c\\) \u7684\u7279\u89e3</p> <ol> <li>\u5224\u65ad\u65b9\u7a0b\u662f\u5426\u6709\u6574\u6570\u89e3\uff0c\u5373 \\(d\\) \u80fd\u6574\u9664 \\(c\\)</li> <li>exgcd \u6c42 \\(ax+by=d\\) \u7684\u7279\u89e3 \\(xx\\) \u548c \\(yy\\)</li> <li>\\(a \\cdot xx+b \\cdot yy=d\\) \u4e24\u8fb9\u540c\u4e58 \\(\\frac{c}{d}\\)\uff0c\u5bf9\u7167 \\(ax+by=c\\)\uff0c\u5f97\u7279\u89e3 \\(xx'=xx* \\frac{c}{d},yy'=yy* \\frac{c}{d}\\)</li> <li>\u65b9\u7a0b \\(ax+by=c\\) \u7684\u901a\u89e3\u4e3a \\(x = xx\u2018+(b/d)n, y = yy'-(a/d)n\\)</li> </ol> C++<pre><code>ll extend_gcd(ll a, ll b, ll&amp; x, ll&amp; y) { // \u8fd4\u56de d=gcd(a,b), x \u548c y \u662f ax+by=d \u7684\u4e00\u7ec4\u7279\u89e3\n    if (b == 0) { x = 1; y = 0; return a; }\n    ll d = extend_gcd(b, a % b, y, x);\n    y -= a / b * x;\n    return d;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Number_theory/#6","title":"6 \u6c42\u89e3\u540c\u4f59\u65b9\u7a0b\uff08\u6c42\u9006\uff09","text":"C++<pre><code>ll mod_inverse(ll a, ll m) { // ax===1(mod m)\n    ll x, y;\n    extend_gcd(a, m, x, y);\n    return (x % m + m) % m;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Number_theory/#7","title":"7 \u8d39\u9a6c\u5c0f\u5b9a\u7406","text":"<p>\u8bbe \\(n\\) \u4e3a\u7d20\u6570\uff0c\\(a\\) \u662f\u6b63\u6574\u6570\u4e14\u4e0e n \u4e92\u7d20\uff0c\u5219\u6709 \\(a^{n-1}\\equiv 1(mod\\enspace n)\\)</p> C++<pre><code>ll mod_inverse(ll a, ll mod) {\n    return fastPow(a, mod - 2, mod);\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Number_theory/#8-miller-rabin","title":"8 Miller-Rabin \u7d20\u6027\u6d4b\u8bd5","text":"C++<pre><code>ll fastPow();\nbool witness(ll a, ll n) {\n    ll u = n - 1;\n    int t = 0;\n    while (u &amp; 1 == 0) u &gt;&gt;= 1, t++;\n    ll x1, x2;\n    x1 = fastPow(a, u, n);\n    for (int i = 1; i &lt;= t; i++) {\n        x2 = fastPow(x1, 2, n);\n        if (x2 == 1 &amp;&amp; x1 != 1 &amp;&amp; x1 != n - 1) return true;\n        x1 = x2;\n    }\n    if (x1 != 1) return true;\n    return false;\n}\nint miller_rabin(ll n, int s) {\n    if (n &lt; 2) return 0;\n    if (n == 2) return 1;\n    if (n % 2 == 0) return 0;\n    for (int i = 0; i &lt; s &amp;&amp; i &lt; n; i++) {\n        ll a = rand() % (n - 1) + 1;\n        if (witness(a, n)) return 0;\n    }\n    return 1;\n}\nvoid solve() { // main\n    int m;\n    while (scanf(\"%d\", &amp;m) != EOF) {\n        int cnt = 0;\n        for (int i = 0; i &lt; m; i++) {\n            ll n;\n            scanf(\"%lld\", &amp;n);\n            int s = 50;\n            cnt += miller_rabin(n, s);\n        }\n        printf(\"%d\\n\", cnt);\n    }\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Number_theory/#9","title":"9 \u6b27\u62c9\u7b5b","text":"C++<pre><code>int prime[N];\nbool vis[N];\nint euler_sieve(int n) {\n    int cnt = 0;\n    memset(prime, 0, sizeof(prime));\n    memset(vis, 0, sizeof(vis));\n    for (int i = 2; i &lt;= n; i++) {\n        if (!vis[i]) prime[cnt++] = i;\n        for (int j = 0; j &lt; cnt; j++) {\n            if (i * prime[j] &gt; n) break;\n            vis[i * prime[j]] = 1;\n            if (i % prime[j] == 0) break;\n        }\n    }\n    return cnt;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Number_theory/#10","title":"10 \u6b27\u62c9\u51fd\u6570","text":"<p>\u5a01\u5c14\u900a\u5b9a\u7406\uff1a\u82e5 \\(p\\) \u4e3a\u7d20\u6570\uff0c\u5219 \\(p\\) \u53ef\u4ee5\u6574\u9664 \\((p-1)! + 1\\)</p> C++<pre><code>int euler(int n) { // \u6c42\u6b27\u62c9\u51fd\u6570\u503c\n    int ans = n;\n    for (int p = 2; p * p &lt;= n; ++p) {\n        if (n % p == 0) {\n            ans = ans / p * (p - 1);\n            while (n % p == p)\n                n /= p;\n        }\n    }\n    if (n != 1) ans = ans / n * (n - 1);\n    return ans;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Number_theory/#11","title":"11 \u4e8c\u9879\u5f0f\u5b9a\u7406&amp;\u5362\u5361\u65af\u5b9a\u7406","text":"<p>\u4e8c\u9879\u5f0f\u5b9a\u7406\uff1a\\(C(n,r) \\mod m=(n! \\mod m)((r!)^{-1} \\mod m)((n-r!)^{-1} \\mod m) \\mod m\\) \u5362\u5361\u65af\u5b9a\u7406\uff1a\u8981\u6c42 \\(m\\) \u4e3a\u7d20\u6570</p> C++<pre><code>ll fac[N];\nll fastPow(ll a, ll n, ll m) {\n    ll ans = 1;\n    a %= m;\n    while (n) {\n        if (n &amp; 1) ans = (ans * a) % m;\n        a = (a * a) % m;\n        n &gt;&gt;= 1;\n    }\n    return ans;\n}\nll inverse(ll a, int m) { return fastPow(fac[a], m - 2, m); }\nll C(ll n, ll r, int m) {\n    if (r &gt; n) return 0;\n    return ((fac[n] * inverse(r, m)) % m * inverse(n - r, m) % m);\n}\nll lucas(ll n, ll r, int m) {\n    if (r == 0) return 1;\n    return C(n % m, r % m, m) * lucas(n / m, r / m, m) % m;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Number_theory/#12-bash-game","title":"12 Bash Game","text":"C++<pre><code>void Bash_game() {\n    int n, m; // \u5171 n \u4e2a\uff0c\u6bcf\u6b21\u6700\u591a\u62ff m \u4e2a\n    cin &gt;&gt; n &gt;&gt; m;\n    if (n % (m + 1) == 0) cout &lt;&lt; \"second\\n\";\n    else cout &lt;&lt; \"first\\n\";\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Number_theory/#13-on","title":"13 \u7d20\u6570\u7b5b O(n)","text":"C++<pre><code>int cnt = 0, prime[N], v[N];\nfor(int i = 2; i &lt;= n; i++) {\n    if(v[i] == 0) {\n        v[i] = i;\n        prime[++cnt] = i;\n    }\n    for(int j = 1; j &lt;= cnt; j++) {\n        if(prime[j] &gt; v[i] || i * prime[j] &gt; n) break; // \u4fdd\u8bc1\u6bcf\u4e00\u4e2a\u5408\u6570\u90fd\u662f\u88ab\u4ed6\u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u7b5b\u6389\n        v[i * prime[j]] = prime[j]; // v[i] \u8868\u793a i \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\n    }\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Number_theory/#14","title":"14 \u5206\u89e3\u8d28\u56e0\u6570","text":"C++<pre><code>void divide(int n) {\n    for (int i = 2; i &lt;= n / i; i++) {\n        if (n % i == 0) {\n            int t = 0;\n            while (n % i == 0) {\n                n /= i;\n                t++;\n            }\n            //\u8f93\u51fa\u5206\u89e3\u51fa\u7684\u56e0\u6570\u548c\u4e2a\u6570 \n            printf(\"%d %d\\n\", i, t);\n        }\n    }\n    //\u5982\u679c n \u5927\u4e8e 1\uff0c\u5219 n \u4e3a\u8d28\u6570 \n    if (n &gt; 1)  printf(\"%d 1\\n\", n);\n}\n</code></pre> <p>\u9884\u5904\u7406\u8d28\u6570\u540e\u7528 prime \u6570\u7ec4\u5206\u89e3</p> C++<pre><code>void div(int n) {\n    int i, j;\n    for (i = 1; i &lt;= n / prime[i]; i++) {\n        int t = prime[i];\n        if (n % t == 0) {\n            int num = 0;\n            while (n % t == 0) {\n                n /= t;\n                num++;\n            }\n            res[fcnt++] = {t,num};\n        }\n    }\n    if (n &gt; 1)\n        res[fcnt++] = {n,1};\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Number_theory/#15","title":"15 \u7ea6\u6570","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Number_theory/#_1","title":"\u7b97\u6570\u57fa\u672c\u5b9a\u7406","text":"\\[ N={P_1}^{a_1}{P_2}^{a_2}{P_3}^{a_3}\\dots{P_n}^{a_n} \\] <p>\u5176\u4e2d P \u4e3a\u8d28\u6570\uff0ca \u4e3a\u6b63\u6574\u6570</p>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Number_theory/#_2","title":"\u8bd5\u9664\u6cd5\u6c42\u7ea6","text":"C++<pre><code>void divisors(int n) {\n    vector&lt;int&gt; v;\n    for (int i = 1; i &lt;= n / i; i++) {\n        if (n % i == 0) {\n            v.push_back(i);\n            if (i * i != n)\n                v.push_back(n / i);\n        }\n    }\n    //\u6309\u7167\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u8f93\u51fa\u5b83\u7684\u6240\u6709\u7ea6\u6570 \n    sort(v.begin(), v.end());\n    for (int i = 0; i &lt; v.size(); i++)\n        printf(\"%d \", v[i]);\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Number_theory/#_3","title":"\u6c42\u7ea6\u6570\u7684\u4e2a\u6570","text":"\\[ N=(a_1+1)*(a_2+1)*(a_3+1)*\\dots*(a_n+1) \\]"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Number_theory/#_4","title":"\u6c42\u6240\u6709\u7ea6\u6570\u7684\u548c","text":"\\[ N = ({p_1}^0+{p_1}^1+{p_1}^2\u2026+{p_1}^{a_1} ) * ({p_2}^0+{p_2}^1+\u2026+{p_2}^{a2} ) * \u2026 * ({p_n}^0+{p_n}^1+\\dots+{p_n}^{a_n}) \\]"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Number_theory/#16-crt","title":"16 \u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 CRT","text":"<p>\u300c\u7269\u4e0d\u77e5\u6570\u300d\u95ee\u9898\uff1a\u6709\u7269\u4e0d\u77e5\u5176\u6570\uff0c\u4e09\u4e09\u6570\u4e4b\u5269\u4e8c\uff0c\u4e94\u4e94\u6570\u4e4b\u5269\u4e09\uff0c\u4e03\u4e03\u6570\u4e4b\u5269\u4e8c\u3002\u95ee\u7269\u51e0\u4f55\uff1f</p> <p>\u4e09\u4eba\u540c\u884c\u4e03\u5341\u5e0c\uff0c\u4e94\u6811\u6885\u82b1\u5eff\u4e00\u652f\uff0c\u4e03\u5b50\u56e2\u5706\u6b63\u534a\u6708\uff0c\u9664\u767e\u96f6\u4e94\u4fbf\u5f97\u77e5\u3002</p>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Number_theory/#_5","title":"\u5b9a\u4e49","text":"<p>\u7528\u4e8e\u6c42\u89e3\u5f62\u5982</p> \\[ \\begin{cases}     x\\equiv a_1(mod\\enspace n_1)\\\\     x\\equiv a_2(mod\\enspace n_2)\\\\     \\quad \\vdots\\\\     x\\equiv a_k(mod\\enspace n_k) \\end{cases} \\] <p>\u7684\u65b9\u7a0b\u7ec4\u65f6\uff08\u5176\u4e2d \\(a_1,a_2,\\dots,a_k\\) \u4e24\u4e24\u4e92\u8d28\uff09, \u4f7f\u7528\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u8fdb\u884c\u8ba1\u7b97\u3002</p>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Number_theory/#_6","title":"\u8fc7\u7a0b","text":"<ol> <li>\u8ba1\u7b97\u6240\u6709\u6a21\u6570\u7684\u79ef \\(n\\)</li> <li>\u5bf9\u4e8e\u7b2c \\(i\\) \u4e2a\u65b9\u7a0b\uff1a    a. \u8ba1\u7b97 \\(m_i=\\frac{n}{n_i}\\)    b. \u8ba1\u7b97 \\(m_i\\) \u5728\u6a21 \\(n_i\\) \u610f\u4e49\u4e0b\u7684\u9006\u5143 \\(m_i^{-1}\\)    c. \u8ba1\u7b97 \\(c_i=m_im_i^{-1}\\) , <code>\u4e0d\u8981</code>\u5bf9 \\(n_i\\) \u53d6\u6a21\u3002</li> <li>\u65b9\u7a0b\u7ec4\u5728\u6a21 \\(n\\) \u610f\u4e49\u4e0b\u7684\u552f\u4e00\u89e3\u4e3a\uff1a\\(x=\\sum_{i=1}^{k}a_ic_i(mod\\enspace n)\\)</li> </ol>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Number_theory/#_7","title":"\u5b9e\u73b0","text":"C++<pre><code>ll CRT(int k, ll* a, ll* r) {\n    ll n = 1, ans = 0;\n    for (int i = 1; i &lt;= k; i++) n = n * r[i];\n    for (int i = 1; i &lt;= k; i++) {\n        ll m = n / r[i], b, y;\n        exgcd(m, r[i], b, y);  // b * m mod r[i] = 1\n        ans = (ans + a[i] * m * b % n) % n;\n    }\n    return (ans % n + n) % n;\n}\n</code></pre> <p>P1495 \u3010\u6a21\u677f\u3011\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\uff08CRT\uff09/ \u66f9\u51b2\u517b\u732a</p> <p>\u7ed9\u5b9a \\(n\\) \u4e2a\u65b9\u7a0b\u7ec4\uff0c\u6bcf\u4e2a\u65b9\u7a0b\u7ec4\u5f62\u5982 \\(x\\equiv b_i(mod\\enspace a_i)\\) , \u6c42\u53ef\u884c\u89e3\u3002</p> C++<pre><code>#include &lt;bits/stdc++.h&gt;\nusing ll = __int128_t; // \u8be5\u9898\u4f1a\u51fa\u73b0\u4e58\u6cd5\u8fc7\u7a0b\u4e2d\u7206 longlong \u7684\u60c5\u51b5\nusing namespace std;\nconst int N = 10 + 5;\nint k;\nll a[N], b[N], n = 1;\nvoid exgcd(ll a, ll b, ll&amp; x, ll&amp; y) { // \u6269\u6b27\u6c42\u9006\n    if (b == 0) {\n        x = 1, y = 0;\n        return;\n    }\n    exgcd(b, a % b, y, x);\n    y -= a / b * x;\n}\nint main() {\n    ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);\n    cin &gt;&gt; k;\n    ll ans = 0;\n    for (int i = 1; i &lt;= k; i++) {\n        int x, y;\n        cin &gt;&gt; x &gt;&gt; y;\n        // cin &gt;&gt; a[i] &gt;&gt; b[i];\n        a[i] = x, b[i] = y;\n        n *= a[i];\n    }\n    for (int i = 1; i &lt;= k; i++) {\n        ll m = n / a[i];\n        ll _m, y;\n        exgcd(m, a[i], _m, y);\n        ll c = m * _m;\n        ans += (c * b[i]) % n;\n        ans %= n;\n    }\n    long long res = (ans + n) % n;\n    cout &lt;&lt; res &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Number_theory/#17","title":"17 \u7ea6\u745f\u592b\u95ee\u9898","text":"<p>\\(n\\) \u4e2a\u4eba\u7f16\u53f7 \\(0,1,2\u2026,n-1\\) \uff0c\u6bcf\u6b21\u6570\u5230 \\(k\\) \u51fa\u5c40\uff0c\u6c42\u6700\u540e\u5269\u4e0b\u7684\u4eba\u7684\u7f16\u53f7\u3002</p> <p>O(N) </p> C++<pre><code>int jos(int n, int k) {\n    int res = 0;\n    for (int i = 1; i &lt;= n; i++)\n        res = (res + k) % i;\n    return res;\n}\n</code></pre> <p>$ O(K\\log N) $ \uff0c\u9002\u7528\u4e8e K \u8f83\u5c0f\u7684\u60c5\u51b5\u3002</p> C++<pre><code>int jos(int n, int k) {\n    if (n == 1 || k == 1) return n - 1;\n    if (k &gt; n) return (jos(n - 1, k) + k) % n; // \u7ebf\u6027\u7b97\u6cd5\n    int res = jos(n - n / k, k) - n % k;\n    if (res &lt; 0) res += n; // mod n\n    else res += res / (k - 1); // \u8fd8\u539f\u4f4d\u7f6e\n    return res; // res+1\uff0c\u5982\u679c\u7f16\u53f7\u4ece 1 \u5f00\u59cb\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Number_theory/#18","title":"18 \u7ebf\u6027\u5224\u5b9a\u6392\u5217\u9006\u5e8f\u6570\u7684\u5947\u5076\u6027","text":"<p>https://www.cnblogs.com/patricky/p/linear-permutation-parity.html</p> C++<pre><code>bool parity = n &amp; 1;\nfor (int i : p) if (~i) {\n    for (int j = i; ~j; ) {\n        std::tie(j, p[j]) = std::tuple{p[j], -1};\n    }\n    parity ^= 1;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Number_theory/#19","title":"19 \u9632\u7206\u6a21\u4e58","text":"<p>\u4ee5 \\(O(1)\\) \u8ba1\u7b97 \\(a \\cdot b \\% p\\) \uff0c\u7531\u4e8e\u4e0d\u53d6\u6a21\uff0c\u5e38\u6570\u6bd4 int128 \u66f4\u5c0f\u3002\u5176\u4e2d \\(1 \\leq a,b,p \\leq 10^{18}\\)\u3002</p> C++<pre><code>int mul(int a, int b, int m) {\n    int r = a * b - m * (int)(1.L / m * a * b);\n    return r - m * (r &gt;= m) + m * (r &lt; 0);\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/STL/","title":"STL","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/STL/#1-set","title":"1 set","text":"C++<pre><code>s.earse(it1,it2); \u5220\u9664 [it1,it2) \u8fd9\u4e2a\u533a\u95f4\uff08\u8fed\u4ee3\u5668\uff09\u5bf9\u5e94\u4f4d\u7f6e\u7684\u5143\u7d20\niterator lower_bound( const key_type &amp;key ); \u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u952e\u503c &gt;= key \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002\niterator upper_bound( const key_type &amp;key ); \u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u952e\u503c &gt; key \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n\nSet \u7684\u5b9a\u4e49\uff1a\nstruct T1{\n    int key,value;\n    bool operator &lt; (const T1 &amp;a) const {\n        return key&lt;a.key;//\u6309\u7167\u5347\u5e8f\u6392\u5217 \n    }\n};\nstruct T2{\n    int key,value;\n};\nstruct T2cmp{\n    bool operator () (const int &amp;a,const int &amp;b){\n        if(abs(a-b)&lt;=k)\n            return false;\n        return a&lt;b;\n    }\n}; \nint main(){\n    int i,j;\n    set&lt;T1&gt; s1;\n    set&lt;T2,T2cmp&gt; s2;\n    set&lt;string&gt; ss1;//\u7b49\u4e8e set&lt;string,less&lt;int&gt; &gt; ss1; \u4ece\u5c0f\u5230\u5927\n    set&lt;string,greater&lt;string&gt; &gt; ss2;//\u4ece\u5927\u5230\u5c0f\n    set&lt;string,greater&lt;string&gt; &gt; ::iterator itsey;\n    //set \u7684\u904d\u5386\n    set&lt;string&gt; :: iterator it; \n    for(it = ss1.begin();it!=ss1.end();it++){\n        cout&lt;&lt;*it&lt;&lt;endl;\n    }\n    return 0;\n}\nMultiset\nc.erase(elem) \u5220\u9664\u4e0e elem \u76f8\u7b49\u7684\u6240\u6709\u5143\u7d20\uff0c\u8fd4\u56de\u88ab\u79fb\u9664\u7684\u5143\u7d20\u4e2a\u6570\u3002\nc.erase(pos) \u79fb\u9664\u8fed\u4ee3\u5668 pos \u6240\u6307\u4f4d\u7f6e\u5143\u7d20\uff0c\u65e0\u8fd4\u56de\u503c\u3002\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/STL/#2-map","title":"2 map","text":"C++<pre><code>mp.find(key): \u5728 map \u4e2d\u67e5\u627e key \u5e76\u8fd4\u56de\u5176 iterator, \u627e\u4e0d\u5230\u7684\u8bdd\u8fd4\u56de mp.end() O(logn)\nmp.count(key): \u5728 map \u4e2d\u627e key \u7684\u6570\u91cf\uff0c\u7531\u4e8e\u6bcf\u4e2a key \u90fd\u662f\u552f\u4e00\u7684\uff0c\u53ea\u4f1a\u8fd4\u56de 0 \u6216 1\nmp[key] \u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u5230\u952e\u503c\u961f key---value \u4e2d\u7684 value\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219 mp[key] \u8fd4\u56de\u7684\u662f value \u7c7b\u578b\u9ed8\u8ba4\u6784\u9020\u5668\u6240\u6784\u9020\u7684\u503c\uff0c\u5e76\u5c06\u8be5\u952e\u503c\u5bf9\u63d2\u5165\u5230 map \u4e2d\n\u54c8\u5e0c\u8868\uff1a\n#include &lt;unordered_map&gt;\nunordered_map\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/STL/#3-pair","title":"3 pair","text":"C++<pre><code>#include &lt;utility&gt;\u5934\u6587\u4ef6\u4e2d\npair&lt;T1, T2&gt; p1; //\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684 pair \u5bf9\u8c61\uff08\u4f7f\u7528\u9ed8\u8ba4\u6784\u9020\uff09\uff0c\u5b83\u7684\u4e24\u4e2a\u5143\u7d20\u5206\u522b\u662f T1 \u548c T2 \u7c7b\u578b\uff0c\u91c7\u7528\u503c\u521d\u59cb\u5316\u3002\npair&lt;T1, T2&gt; p1(v1, v2); //\u521b\u5efa\u4e00\u4e2a pair \u5bf9\u8c61\uff0c\u5b83\u7684\u4e24\u4e2a\u5143\u7d20\u5206\u522b\u662f T1 \u548c T2 \u7c7b\u578b\uff0c\u5176\u4e2d first \u6210\u5458\u521d\u59cb\u5316\u4e3a v1\uff0csecond \u6210\u5458\u521d\u59cb\u5316\u4e3a v2\u3002\nmake_pair(v1, v2); // \u4ee5 v1 \u548c v2 \u7684\u503c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 pair \u5bf9\u8c61\uff0c\u5176\u5143\u7d20\u7c7b\u578b\u5206\u522b\u662f v1 \u548c v2 \u7684\u7c7b\u578b\u3002\np1 &lt; p2; // \u4e24\u4e2a pair \u5bf9\u8c61\u95f4\u7684\u5c0f\u4e8e\u8fd0\u7b97\uff0c\u5176\u5b9a\u4e49\u9075\u5faa\u5b57\u5178\u6b21\u5e8f\n// \u5982 p1.first &lt; p2.first \u6216\u8005 !(p2.first &lt; p1.first) &amp;&amp; (p1.second &lt; p2.second) \u5219\u8fd4\u56de true\u3002\np1 == p2// \u5982\u679c\u4e24\u4e2a\u5bf9\u8c61\u7684 first \u548c second \u4f9d\u6b21\u76f8\u7b49\uff0c\u5219\u8fd9\u4e24\u4e2a\u5bf9\u8c61\u76f8\u7b49\uff1b\u8be5\u8fd0\u7b97\u4f7f\u7528\u5143\u7d20\u7684==\u64cd\u4f5c\u7b26\u3002\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/STL/#4-vector","title":"4 vector","text":"C++<pre><code>v.resize(n); // \u628a v \u7684\u957f\u5ea6\u91cd\u65b0\u8bbe\u5b9a\u4e3a n \u4e2a\u5143\u7d20\nv.erase(unique(v.begin(), v.end()), v.end()); // \u53bb\u91cd\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/STL/#5-priority_queue","title":"5 priority_queue","text":"C++<pre><code>pq.top(): \u83b7\u53d6\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u5143\u7d20 O(1)\n\u4f18\u5148\u961f\u5217\u7684\u5b9a\u4e49\uff1a\npriority_queue&lt;int&gt; q1; //\u9ed8\u8ba4\u4ece\u5927\u5230\u5c0f\uff0c\u5927\u9876\u5806 \npriority_queue&lt;int ,vector&lt;int&gt;,less&lt;int&gt; &gt; q2; //\u964d\u5e8f\u961f\u5217\uff0c\u5927\u9876\u5806 \npriority_queue&lt;int ,vector&lt;int&gt;,greater&lt;int&gt; &gt; q3; //\u5347\u5e8f\u961f\u5217\uff0c\u5c0f\u9876\u5806\n\n\u5bf9\u4e8e\u7ed3\u6784\u4f53\u5b9a\u4e49\uff1a\nstruct T1{//\u6cd5\u4e00 \u5f3a\u70c8\u63a8\u8350 \n    int x,y;\n    friend bool operator &lt; (T1 a,T1 b){\n        return a.x&lt;b.x;\n    }\n};\npriority_queue&lt;T1&gt; q1;\n\nstruct T1{//\u6cd5\u4e8c\n    int x,y;\n    bool operator &lt; (const T1 &amp;a) const{\n        return x&lt;a.x; //\u5927\u9876\u5806 \n    }\n};\npriority_queue&lt;T1&gt; q1; \n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/STL/#6-tuple","title":"6 tuple","text":"C++<pre><code>#include &lt;tuple&gt;\nauto t = std::make_tuple(1, 2.5, \"Hello\");\n\n// get \u83b7\u53d6\u5143\u7d20\nauto t = std::make_tuple(1, 2.5, \"Hello\");\nint i = std::get&lt;0&gt;(t); // 1\ndouble d = std::get&lt;1&gt;(t); // 2.5\nconst char* s = std::get&lt;2&gt;(t); // \"Hello\"\n\n// tie \u89e3\u5305\u83b7\u53d6\u5143\u7d20 \nint i;\ndouble d;\nconst char* s;\n\nauto t = std::make_tuple(1, 2.5, \"Hello\");\nstd::tie(i, d, s) = t;\n\n// size \u83b7\u53d6size\nauto t = std::make_tuple(1, 2.5, \"Hello\");\nconstexpr size_t size = std::tuple_size&lt;decltype(t)&gt;::value; // 3\n\n// tuple_element \u83b7\u53d6\u67d0\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\nauto t = std::make_tuple(1, 2.5, \"Hello\");\nusing FirstType = std::tuple_element&lt;0, decltype(t)&gt;::type; // int\nusing SecondType = std::tuple_element&lt;1, decltype(t)&gt;::type; // double\n\n// tuple_cat \u8fde\u63a5\u591a\u4e2atuple\nauto t1 = std::make_tuple(1, 2.5);\nauto t2 = std::make_tuple(\"Hello\", 'a');\nauto t3 = std::tuple_cat(t1, t2); // t3 is std::tuple&lt;int, double, const char*, char&gt;\n\n// apply \u5c06tuple\u4e2d\u7684\u5143\u7d20\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u4e00\u4e2a\u51fd\u6570\nvoid print(int i, double d, const char* s) {\n    std::cout &lt;&lt; i &lt;&lt; \", \" &lt;&lt; d &lt;&lt; \", \" &lt;&lt; s &lt;&lt; std::endl;\n}\n\nauto t = std::make_tuple(1, 2.5, \"Hello\");\nstd::apply(print, t); // 1, 2.5, Hello\n\n// for_each + index_sequence \u904d\u5386\u5e76\u4f7f\u7528\u5143\u7d20\ntemplate&lt;typename Tuple, std::size_t... I&gt;\nvoid print_tuple(const Tuple&amp; t, std::index_sequence&lt;I...&gt;) {\n    ((std::cout &lt;&lt; (I == 0 ? \"\" : \", \") &lt;&lt; std::get&lt;I&gt;(t)), ...);\n    std::cout &lt;&lt; std::endl;\n}\n\ntemplate&lt;typename... Args&gt;\nvoid print_tuple(const std::tuple&lt;Args...&gt;&amp; t) {\n    print_tuple(t, std::index_sequence_for&lt;Args...&gt;{});\n}\n\nint main() {\n    auto t = std::make_tuple(1, 2.5, \"Hello\");\n    print_tuple(t); // 1, 2.5, Hello\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/STL/#_1","title":"\u4e8c\u5206","text":"<p>\u7531\u4e8e set \u8fed\u4ee3\u5668\u662f\u5355\u5411\u7684\uff0c\u6240\u4ee5\u4e00\u822c\u60c5\u51b5\u4e0b std::set.lower_bound() \u7684\u6027\u80fd\u8981\u4f18\u4e8e std::lower_bound()</p> C++<pre><code>lower_bound(begin,end,num)\uff1a\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8e\u6216\u7b49\u4e8e num \u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56de end\nupper_bound(begin,end,num)\uff1a\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8e num \u7684\u6570\u5b57\n\u5728\u4ece\u5927\u5230\u5c0f\u7684\u6392\u5e8f\u6570\u7ec4\u4e2d\uff0c\u91cd\u8f7d lower_bound() \u548c upper_bound()\nlower_bound(begin,end,num,greater()): \u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u6216\u7b49\u4e8e num \u7684\u6570\u5b57\nupper_bound(begin,end,num,greater()): \u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5c0f\u4e8e num \u7684\u6570\u5b57\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/STL/#extract-c17","title":"extract (C++17)","text":"<p>extract \u590d\u6742\u5ea6 \\(log(size())\\)</p> <p>set::extract \u53ef\u4ee5\u79fb\u9664\u67d0\u4e2a\u5143\u7d20</p> C++<pre><code>std::set&lt;int&gt; cont{1, 2, 3};\n\n// Extract node handle and change key\nauto nh = cont.extract(1);\nnh.value() = 4;\n\nprint(\"After extract and before insert:\", cont); // 2 3\n\n// Insert node handle back\ncont.insert(std::move(nh));\n\nprint(\"End:\", cont); // 2 3 4\n</code></pre> <p>map::extract \u80fd\u591f\u4fee\u6539\u4e00\u7ec4  \u4e2d\u7684 key <p>extract is the only way to change a key of a map element without reallocation</p> C++<pre><code>std::map&lt;int, char&gt; cont{{1, 'a'}, {2, 'b'}, {3, 'c'}};\n\n// Extract node handle and change key\nauto nh = cont.extract(1);\nnh.key() = 4;\n\nprint(\"After extract and before insert:\", cont); // 2(b) 3(c)\n\n// Insert node handle back\ncont.insert(std::move(nh));\n\nprint(\"End:\", cont); // 2(b) 3(c) 4(a)\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Segment_tree/","title":"Segment tree","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Segment_tree/#_1","title":"\u5c01\u88c5\u533a\u95f4\u52a0\u3001\u533a\u95f4\u6700\u503c\u67e5\u8be2","text":"C++<pre><code>template&lt;class T&gt; struct Segt {\n    struct node {\n        int l, r;\n        T w, rmq, lazy;\n    };\n    std::vector&lt;T&gt; w;\n    std::vector&lt;node&gt; t;\n\n    Segt() {}\n    Segt(int n) { init(n); }\n    Segt(std::vector&lt;int&gt; in) {\n        int n = in.size() - 1;\n        w.resize(n + 1);\n        for (int i = 1; i &lt;= n; i++) {\n            w[i] = in[i];\n        }\n        init(in.size() - 1);\n    }\n\n    #define GL (k &lt;&lt; 1)\n    #define GR (k &lt;&lt; 1 | 1)\n\n    void init(int n) {\n        w.resize(n + 1);\n        t.resize(n * 4 + 1);\n        auto build = [&amp;](auto self, int l, int r, int k = 1) {\n            if (l == r) {\n                t[k] = {l, r, w[l], w[l], -1};\n                return;\n            }\n            t[k] = {l, r};\n            int mid = (l + r) / 2;\n            self(self, l, mid, GL);\n            self(self, mid + 1, r, GR);\n            pushup(k);\n        };\n        build(build, 1, n);\n    }\n    void pushdown(node &amp;p, T lazy) {\n        p.w += (p.r - p.l + 1) * lazy;\n        p.rmq += lazy;\n        p.lazy += lazy;\n    }\n    void pushdown(int k) {\n        if (t[k].lazy == -1) return;\n        pushdown(t[GL], t[k].lazy);\n        pushdown(t[GR], t[k].lazy);\n        t[k].lazy = -1;\n    }\n    void pushup(int k) {\n        auto pushup = [&amp;](node &amp;p, node &amp;l, node &amp;r) {\n            p.w = l.w + r.w;\n            p.rmq = std::min(l.rmq, r.rmq); // RMQ -&gt; min/max\n        };\n        pushup(t[k], t[GL], t[GR]);\n    }\n    void modify(int l, int r, T val, int k = 1) {\n        if (l &lt;= t[k].l &amp;&amp; t[k].r &lt;= r) {\n            pushdown(t[k], val);\n            return;\n        }\n        pushdown(k);\n        int mid = (t[k].l + t[k].r) / 2;\n        if (l &lt;= mid) modify(l, r, val, GL);\n        if (mid &lt; r) modify(l, r, val, GR);\n        pushup(k);\n    }\n    T rmq(int l, int r, int k = 1) {\n        if (l &lt;= t[k].l &amp;&amp; t[k].r &lt;= r) {\n            return t[k].rmq;\n        }\n        pushdown(k);\n        int mid = (t[k].l + t[k].r) / 2;\n        T ans = std::numeric_limits&lt;T&gt;::max(); // RMQ -&gt; \u4e3a max \u65f6\u9700\u8981\u4fee\u6539\u4e3a ::lowest()\n        if (l &lt;= mid) ans = std::min(ans, rmq(l, r, GL)); // RMQ -&gt; min/max\n        if (mid &lt; r) ans = std::min(ans, rmq(l, r, GR)); // RMQ -&gt; min/max\n        return ans;\n    }\n    T ask(int l, int r, int k = 1) { // \u533a\u95f4\u8be2\u95ee\n        if (l &lt;= t[k].l &amp;&amp; t[k].r &lt;= r) {\n            return t[k].w;\n        }\n        pushdown(k);\n        int mid = (t[k].l + t[k].r) / 2;\n        T ans = 0;\n        if (l &lt;= mid) ans += ask(l, r, GL);\n        if (mid &lt; r) ans += ask(l, r, GR);\n        return ans;\n    }\n    void debug(int k = 1) {\n        std::cout &lt;&lt; \"[\" &lt;&lt; t[k].l &lt;&lt; \", \" &lt;&lt; t[k].r &lt;&lt; \"]: \";\n        std::cout &lt;&lt; \"w = \" &lt;&lt; t[k].w &lt;&lt; \", \";\n        std::cout &lt;&lt; \"Min = \" &lt;&lt; t[k].rmq &lt;&lt; \", \";\n        std::cout &lt;&lt; \"lazy = \" &lt;&lt; t[k].lazy &lt;&lt; \", \";\n        std::cout &lt;&lt; std::endl;\n        if (t[k].l == t[k].r) return;\n        debug(GL), debug(GR);\n    }\n};\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Segment_tree/#_2","title":"\u5c01\u88c5\u533a\u95f4\u52a0\u3001\u533a\u95f4\u4e58","text":"C++<pre><code>template &lt;class T&gt; struct Segt_ {\n    struct node {\n        int l, r;\n        T w, add, mul = 1; // \u6ce8\u610f\u521d\u59cb\u8d4b\u503c\n    };\n    std::vector&lt;T&gt; w;\n    std::vector&lt;node&gt; t;\n\n    Segt_(int n) {\n        w.resize(n + 1);\n        t.resize((n &lt;&lt; 2) + 1);\n        build(1, n);\n    }\n    Segt_(vector&lt;int&gt; in) {\n        int n = in.size() - 1;\n        w.resize(n + 1);\n        for (int i = 1; i &lt;= n; i++) {\n            w[i] = in[i];\n        }\n        t.resize((n &lt;&lt; 2) + 1);\n        build(1, n);\n    }\n    void pushdown(node &amp;p, T add, T mul) {\n        p.w = p.w * mul + (p.r - p.l + 1) * add;\n        p.add = p.add * mul + add;\n        p.mul *= mul;\n    }\n    void pushup(node &amp;p, node &amp;l, node &amp;r) {\n        p.w = l.w + r.w;\n    }\n#define GL (k &lt;&lt; 1)\n#define GR (k &lt;&lt; 1 | 1)\n    void pushdown(int k) { // \u4e0d\u9700\u8981\u52a8\n        pushdown(t[GL], t[k].add, t[k].mul);\n        pushdown(t[GR], t[k].add, t[k].mul);\n        t[k].add = 0, t[k].mul = 1;\n    }\n    void pushup(int k) { // \u4e0d\u9700\u8981\u52a8\n        pushup(t[k], t[GL], t[GR]);\n    }\n    void build(int l, int r, int k = 1) {\n        if (l == r) {\n            t[k] = {l, r, w[l]};\n            return;\n        }\n        t[k] = {l, r};\n        int mid = (l + r) / 2;\n        build(l, mid, GL);\n        build(mid + 1, r, GR);\n        pushup(k);\n    }\n    void modify(int l, int r, T val, int k = 1) { // \u533a\u95f4\u4fee\u6539\n        if (l &lt;= t[k].l &amp;&amp; t[k].r &lt;= r) {\n            t[k].w += (t[k].r - t[k].l + 1) * val;\n            t[k].add += val;\n            return;\n        }\n        pushdown(k);\n        int mid = (t[k].l + t[k].r) / 2;\n        if (l &lt;= mid) modify(l, r, val, GL);\n        if (mid &lt; r) modify(l, r, val, GR);\n        pushup(k);\n    }\n    void modify2(int l, int r, T val, int k = 1) { // \u533a\u95f4\u4fee\u6539\n        if (l &lt;= t[k].l &amp;&amp; t[k].r &lt;= r) {\n            t[k].w *= val;\n            t[k].add *= val;\n            t[k].mul *= val;\n            return;\n        }\n        pushdown(k);\n        int mid = (t[k].l + t[k].r) / 2;\n        if (l &lt;= mid) modify2(l, r, val, GL);\n        if (mid &lt; r) modify2(l, r, val, GR);\n        pushup(k);\n    }\n    T ask(int l, int r, int k = 1) { // \u533a\u95f4\u8be2\u95ee\uff0c\u4e0d\u5408\u5e76\n        if (l &lt;= t[k].l &amp;&amp; t[k].r &lt;= r) {\n            return t[k].w;\n        }\n        pushdown(k);\n        int mid = (t[k].l + t[k].r) / 2;\n        T ans = 0;\n        if (l &lt;= mid) ans += ask(l, r, GL);\n        if (mid &lt; r) ans += ask(l, r, GR);\n        return ans;\n    }\n    void debug(int k = 1) {\n        std::cout &lt;&lt; \"[\" &lt;&lt; t[k].l &lt;&lt; \", \" &lt;&lt; t[k].r &lt;&lt; \"]: \";\n        std::cout &lt;&lt; \"w = \" &lt;&lt; t[k].w &lt;&lt; \", \";\n        std::cout &lt;&lt; \"add = \" &lt;&lt; t[k].add &lt;&lt; \", \";\n        std::cout &lt;&lt; \"mul = \" &lt;&lt; t[k].mul &lt;&lt; \", \";\n        std::cout &lt;&lt; std::endl;\n        if (t[k].l == t[k].r) return;\n        debug(GL), debug(GR);\n    }\n};\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Segment_tree/#_3","title":"\u533a\u95f4\u8d4b\u503c","text":"C++<pre><code>void pushdown(node &amp;p, T lazy) { \n    p.w = (p.r - p.l + 1) * lazy;\n    p.lazy = lazy;\n}\nvoid modify(int l, int r, T val, int k = 1) {\n    if (l &lt;= t[k].l &amp;&amp; t[k].r &lt;= r) {\n        t[k].w = val * (t[k].r - t[k].l + 1);\n        t[k].lazy = val;\n        return;\n    }\n    // \u5269\u4f59\u90e8\u5206\u4e0d\u53d8\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Segment_tree/#_4","title":"\u5355\u70b9\u8d4b\u503c","text":"C++<pre><code>void modify(int p, T val, int k = 1) { // make a[p]=k\n    if (l == r) {\n        t[k].w = k;\n        return;\n    }\n    // \u5269\u4f59\u90e8\u5206\u4e0d\u53d8\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Segment_tree/#_5","title":"\u5feb\u901f\u7ebf\u6bb5\u6811 \u5355\u70b9\u4fee\u6539+\u533a\u95f4\u6700\u503c","text":"C++<pre><code>struct Segt {\n    std::vector&lt;int&gt; w;\n    int n;\n    Segt(int n) : w(2 * n, (int)-2E9), n(n) {}\n\n    void modify(int pos, int val) {\n        for (w[pos += n] = val; pos &gt; 1; pos /= 2) {\n            w[pos / 2] = max(w[pos], w[pos ^ 1]);\n        }\n    }\n    int ask(int l, int r) { // \u8fd4\u56de\u5de6\u95ed\u53f3\u5f00[l,r)\u7684\u6700\u503c\n        int res = -2E9;\n        for (l += n, r += n; l &lt; r; l /= 2, r /= 2) {\n            if (l % 2) res = max(res, w[l++]);\n            if (r % 2) res = max(res, w[--r]);\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Segment_tree/#_6","title":"\u533a\u95f4\u5f00\u6839\u53f7","text":"<p>\u7531\u4e8e long long \u7ea7\u522b\u7684 \\(10^{18}\\) \u53ea\u9700\u8981 \\(1\\)4 \u6b21\u5f00\u6839\u53f7\u5c31\u80fd\u5230 \\(1.002\\)\uff0c\u6240\u4ee5\u603b\u7684\u66b4\u529b\u4fee\u6539\u6b21\u6570\u4e0d\u4f1a\u592a\u5927\uff0c\u9012\u5f52\u5230\u5355\u70b9\u7ef4\u62a4\uff0c\u5982\u679c\u533a\u95f4\u957f\u5ea6\u7b49\u4e8e\u533a\u95f4\u548c\uff0c\u8bf4\u660e\u533a\u95f4\u5185\u90fd\u662f \\(1\\)\uff0c\u4e0d\u9700\u8981\u7ee7\u7eed\u9012\u5f52\u3002</p> C++<pre><code>void modify(int l, int r, int k = 1) {\n    if (l &lt;= t[k].l &amp;&amp; t[k].r &lt;= r) {\n        if (t[k].rmq &lt; val) return; // \u526a\u679d\n    }\n    if (t[k].l == t[k].r) {\n        t[k].w = t[k].rmq = std::sqrt(t[k].w);\n        return;\n    }\n    int mid = (t[k].l + t[k].r) / 2;\n    if (l &lt;= mid) modify(l, r, val, GL);\n    if (mid &lt; r) modify(l, r, val, GR);\n    pushup(k);\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Segment_tree/#_7","title":"\u533a\u95f4\u6700\u5927\u8fde\u7eed\u5b50\u6bb5\u548c","text":"C++<pre><code>template&lt;class T&gt; struct Segt {\n    struct node {\n        int l, r;\n        T S, LS, RS, MS; // LS\u4ece\u533a\u95f4\u5de6\u7aef\u70b9\u5f00\u59cb\u7684\u8fde\u7eed\u5b50\u6bb5\uff0cRS\u5728\u533a\u95f4\u53f3\u7aef\u70b9\u7ed3\u675f\uff0cMS\u533a\u95f4\u6700\u5927\u8fde\u7eed\u5b50\u6bb5\u548c\n    };\n\n    // ...... \n\n    void pushup(int k) {\n        auto pushup = [&amp;](node &amp;p, node &amp;l, node &amp;r) {\n            p.S = l.S + r.S;\n            p.LS = std::max(l.LS, l.S + r.LS);\n            p.RS = std::max(r.RS, l.RS + r.S);\n            p.MS = std::max(l.RS + r.LS, max(l.MS, r.MS));\n            };\n        pushup(t[k], t[GL], t[GR]);\n    }\n    void modify(int p, T val, int k = 1) {\n        if (t[k].l == t[k].r) {\n            t[k].S = t[k].LS = t[k].RS = t[k].MS = val;\n            return;\n        }\n        int mid = (t[k].l + t[k].r) / 2;\n        if (p &lt;= mid) modify(p, val, GL);\n        else modify(p, val, GR);\n        pushup(k);\n    }\n    node ask(int l, int r, int k = 1) {\n        if (l &lt;= t[k].l &amp;&amp; t[k].r &lt;= r) {\n            return t[k];\n        }\n        int mid = (t[k].l + t[k].r) / 2;\n        if (r &lt;= mid) {\n            return ask(l, r, GL);\n        }\n        else {\n            if (l &gt; mid) {\n                return ask(l, r, GR);\n            }\n            else {\n                node no, a = ask(l, r, GL), b = ask(l, r, GR);\n                no.LS = std::max(a.LS, a.S + b.LS);\n                no.RS = std::max(b.RS, b.S + a.RS);\n                no.MS = std::max(max(a.MS, b.MS), a.RS + b.LS);\n                return no;\n            }\n        }\n    }\n};\n// T.ask(l, r).MS \u4e3a\u7b54\u6848\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Segment_tree/#by-dzx","title":"\u7ebf\u6bb5\u6811\u5c01\u88c5 by \u961f\u53cbdzx","text":"C++<pre><code>struct segmentTree {\n#define ls (u &lt;&lt; 1)\n#define rs (u &lt;&lt; 1 | 1)\n#define mid ((l + r) &gt;&gt; 1)\n\n    int s[N &lt;&lt; 2]{}, tag[N &lt;&lt; 2]{}, siz[N &lt;&lt; 2]{}, mx[N &lt;&lt; 2]{};\n\n    inline void build(int u, int l, int r) {\n        if (l == r) {\n            s[u] = a[l];\n            siz[u] = 1;\n            tag[u] = 0;\n            mx[u] = a[l];\n            return;\n        }\n        if (l &lt;= mid) build(ls, l, mid);\n        if (mid &lt; r) build(rs, mid + 1, r);\n        pushup(u);\n    }\n    inline void pushdown(int u) {\n        if (tag[u] != 0) {\n            tag[ls] += tag[u];\n            tag[rs] += tag[u];\n            s[ls] += siz[ls] * tag[u];\n            s[rs] += siz[rs] * tag[u];\n            mx[ls] += tag[u];\n            mx[rs] += tag[u];\n        }\n        tag[u] = 0;\n    }\n    inline void pushup(int u) {\n        s[u] = s[ls] + s[rs];\n        siz[u] = siz[ls] + siz[rs];\n        mx[u] = max(mx[ls], mx[rs]);\n    }\n    inline void modify(int u, int l, int r, int ql, int qr, int k) {\n        if (ql &lt;= l &amp;&amp; r &lt;= qr) {\n            s[u] += siz[u] * k;\n            mx[u] += k;\n            tag[u] += k;\n            return;\n        }\n        pushdown(u);\n        if (ql &lt;= mid) modify(ls, l, mid, ql, qr, k);\n        if (qr &gt; mid) modify(rs, mid + 1, r, ql, qr, k);\n        pushup(u);\n    }\n    inline int query(int u, int l, int r, int ql, int qr) {\n        if (ql &lt;= l &amp;&amp; r &lt;= qr) {\n            return s[u];\n        }\n        pushdown(u);\n        int res = 0;\n        if (ql &lt;= mid) res = query(ls, l, mid, ql, qr);\n        if (qr &gt; mid) res += query(rs, mid + 1, r, ql, qr);\n        return res;\n    }\n} T;\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/String/","title":"String","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/String/#1-manacher","title":"1 manacher","text":"C++<pre><code>// \u590d\u6742\u5ea6 O(n)\nint n, P[N &lt;&lt; 1]; // P[i] \u8868\u793a\u4ee5 S[i] \u4e3a\u4e2d\u5fc3\u7684\u56de\u6587\u534a\u5f84\nchar a[N], S[N &lt;&lt; 1];\nvoid change() {\n    n = strlen(a);\n    int k = 0; S[k++] = '$'; S[k++] = '#';\n    for (int i = 0; i &lt; n; i++) { S[k++] = a[i]; S[k++] = '#'; }\n    S[k++] = '&amp;';\n    n = k;\n}\nvoid manacher() {\n    int R = 0, c;\n    for (int i = 1; i &lt; n; i++) {\n        if (i &lt; R) P[i] = min(P[(c &lt;&lt; 1) - i], P[c] + c - i);\n        else P[i] = 1;\n        while (S[i + P[i]] == S[i - P[i]]) P[i]++;\n        if (P[i] + i &gt; R) {\n            R = P[i] + i;\n            c = i;\n        }\n    }\n}\nvoid solve() {\n    cin &gt;&gt; a; change();\n    manacher();\n    int ans = 1;\n    for (int i = 0; i &lt; n; i++) ans = max(ans, P[i]);\n    cout &lt;&lt; ans - 1 &lt;&lt; endl;\n    return;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/String/#2-kmp","title":"2 KMP","text":"C++<pre><code>const int N = 1e5 + 5;\nint nex[N];\nchar s1[N]; //\u6587\u672c\u4e32 \nchar s2[N]; //\u6a21\u5f0f\u4e32 \nint n, m;//\u6587\u672c\u4e32\u548c\u6a21\u5f0f\u4e32\u7684\u957f\u5ea6 \n//\u4e0b\u6807\u4ece 1 \u5f00\u59cb\nvoid getnext() {\n    nex[1] = 0;\n    int i, j = 0;\n    for (i = 2; i &lt;= m; i++) {\n        while (j &gt; 0 &amp;&amp; s2[j + 1] != s2[i])j = nex[j];\n        //\u5982\u679c\u56de\u8df3\u5230\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5c31\u4e0d \u7528\u518d\u56de\u8df3\u4e86\n        if (s2[j + 1] == s2[i])j++;\n        nex[i] = j;\n    }\n}\nint kmp() {\n    int i, j = 0;\n    getnext();\n    for (i = 1; i &lt;= n; i++) {\n        while (s1[i] != s2[j + 1] &amp;&amp; j &gt; 0)j = nex[j];\n        //\u5982\u679c\u5931\u914d \uff0c\u90a3\u4e48\u5c31\u4e0d\u65ad\u5411\u56de\u8df3\uff0c\u76f4\u5230\u53ef\u4ee5\u7ee7\u7eed\u5339\u914d\n        if (s1[i] == s2[j + 1])j++;\n        //\u5982\u679c\u5339\u914d\u6210\u529f\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u6a21\u5f0f\u4e32\u4f4d\u7f6e++ \n        if (j == m) {\n            //\u8f93\u51fa\u6240\u6709\u51fa\u73b0\u4f4d\u7f6e\u7684\u8d77\u59cb\u4e0b\u6807\n            printf(\"%d \", i - m + 1);\n            //\u6ce8\u610f\u4e0b\u6807\uff0c\u662f\u4ece 0 \u8fd8\u662f 1\n            j = nex[j];//\u7ee7\u7eed\u5339\u914d \n        }\n    }\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/String/#3","title":"3 \u540e\u7f00\u81ea\u52a8\u673a\u6216\u540e\u7f00\u6570\u7ec4\u6c42\u4e0d\u540c\u7684\u5b50\u4e32\u4e2a\u6570","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s, \u6c42 s \u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u5b50\u4e32\u3002</p>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/String/#sam","title":"SAM \u540e\u7f00\u81ea\u52a8\u673a\u6c42\u89e3","text":"C++<pre><code>string s;\nint n;\nint sz, last;\n// sz \u4e3a\u8282\u70b9\u72b6\u6001\u7684\u7f16\u53f7\uff0clast \u6307\u5411\u6700\u540e\u88ab\u6dfb\u52a0\u7684\u8282\u70b9\nll dp[N];\nstruct node {\n    int son[26];\n    int father;\n    int len; // \u8fd9\u4e2a\u7b49\u4ef7\u7c7b\u7684\u6700\u5927\u5b50\u4e32\u957f\u5ea6\n}t[N &lt;&lt; 1]; // \u540e\u7f00\u81ea\u52a8\u673a\u7684\u72b6\u6001\u6570\u4e0d\u8d85\u8fc7 2n \u4e2a\nvoid newNode(int length) { // \u65b0\u5efa\u8282\u70b9\uff0csz=0 \u662f\u6839\n    t[++sz].len = length; // \u8fd9\u4e2a\u8282\u70b9\u6240\u8868\u793a\u7684\u5b50\u4e32\u7684\u957f\u5ea6\n    t[sz].father = -1; // \u5b83\u7684\u7236\u8282\u70b9\u8fd8\u672a\u77e5\n    memset(t[sz].son, 0, sizeof(t[sz].son));\n}\nvoid init() {\n    sz = -1; last = 0; // \u6839\u662f 0\uff0c\u6839\u6307\u5411-1\uff0c\u8868\u793a\u7ed3\u675f\n    newNode(0);\n}\nvoid Insert(int c) {\n    newNode(t[last].len + 1);\n    int p = last, cur = sz; // p \u4e3a\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684\u4f4d\u7f6e\uff0ccur \u4e3a\u65b0\u8282\u70b9\u7684\u4f4d\u7f6e\n    while (p != -1 &amp;&amp; !t[p].son[c]) {\n        t[p].son[c] = cur, p = t[p].father;\n    }\n    if (p == -1)\n        t[cur].father = 0;\n    else {\n        int q = t[p].son[c];\n        if (t[q].len == t[p].len + 1)\n            t[cur].father = q;\n        else {\n            newNode(t[p].len + 1);\n            int nq = sz; // \u590d\u5236\u8282\u70b9\n            memcpy(t[nq].son, t[q].son, sizeof(t[q].son));\n            t[nq].father = t[q].father;\n            t[cur].father = t[q].father = nq;\n            while (p &gt;= 0 &amp;&amp; t[p].son[c] == q)\n                t[p].son[c] = nq, p = t[p].father;\n        }\n    }\n    last = cur;\n}\nvoid solve() {\n    cin &gt;&gt; n &gt;&gt; s;\n    init();\n    for (int i = 0; i &lt; n; i++) {\n        Insert(s[i] - 'a');\n        dp[i] = dp[i - 1] + t[last].len - t[t[last].father].len;\n    }\n    cout &lt;&lt; dp[n - 1] &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/String/#sa-lcp","title":"SA \u540e\u7f00\u6570\u7ec4 + LCP \uff08\u6700\u957f\u516c\u5171\u524d\u7f00\uff09 \u6c42\u89e3","text":"<p>\u5229\u7528 height \u6570\u7ec4\u6c42\u89e3</p> <p>\u5b50\u4e32\u5c31\u662f\u540e\u7f00\u7684\u524d\u7f00\uff0c\u6240\u4ee5\u53ef\u4ee5\u679a\u4e3e\u6bcf\u4e2a\u540e\u7f00\uff0c\u8ba1\u7b97\u524d\u7f00\u603b\u6570\uff0c\u518d\u51cf\u6389\u91cd\u590d\u3002</p> <p>\u300c\u524d\u7f00\u603b\u6570\u300d\u5176\u5b9e\u5c31\u662f\u5b50\u4e32\u4e2a\u6570\uff0c\u4e3a \\(\\frac{n(n+1)}{2}\\)\u3002</p> <p>\u5982\u679c\u6309\u540e\u7f00\u6392\u5e8f\u7684\u987a\u5e8f\u679a\u4e3e\u540e\u7f00\uff0c\u6bcf\u6b21\u65b0\u589e\u7684\u5b50\u4e32\u5c31\u662f\u9664\u4e86\u4e0e\u4e0a\u4e00\u4e2a\u540e\u7f00\u7684 LCP \u5269\u4e0b\u7684\u524d\u7f00\u3002 \u8fd9\u4e9b\u524d\u7f00\u4e00\u5b9a\u662f\u65b0\u589e\u7684\uff0c\u5426\u5219\u4f1a\u7834\u574f \\(lcp(sa[i],sa[j])=min(height[i+1..j])\\) \u7684\u6027\u8d28\u3002\u53ea\u6709\u8fd9\u4e9b\u524d\u7f00\u662f\u65b0\u589e\u7684\uff0c\u56e0\u4e3a LCP \u90e8\u5206\u5728\u679a\u4e3e\u4e0a\u4e00\u4e2a\u524d\u7f00\u65f6\u8ba1\u7b97\u8fc7\u4e86\u3002</p> <p>\u6700\u7ec8\u7b54\u6848\uff1a$ ans = \\frac{n(n+1)}{2} - \\sum_{i=2}^{n}height[i] $</p> C++<pre><code>string s;\nint n;\nll height[N];\nint x[N], y[N], rk[N], c[N], sa[N];\nvoid get_sa() {\n    int m = 127;\n    // \u6309\u7167\u7b2c\u4e00\u5173\u952e\u5b57\u6392\u5e8f\n    for(int i = 1; i &lt;= m; i++) c[i] = 0;\n    for(int i = 1; i &lt;= n; i++)  c[x[i] = s[i]]++;\n    for(int i = 2; i &lt;= m; i++) c[i] += c[i - 1];\n    for(int i = n; i &gt;= 1; i--) sa[c[x[i]]--] = i;\n\n    for(int k = 1; k &lt;= n; k *= 2) {\n        // 1. \u5148\u6309\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\n        // [n - k + 1, n] \u8fd9\u4e9b\u540e\u7f00\u6ca1\u6709\u7b2c\u4e8c\u5173\u952e\u5b57\uff0c\u80af\u5b9a\u6392\u5728\u524d\u9762\n        int cnt = 0;\n        for(int i = n; i &gt; n - k; i--) y[++cnt] = i;\n        for(int i = 1; i &lt;= n; i++) {    // \u6392\u540d   \n            if(sa[i] &gt; k) {      // \u7b2c i \u4e2a\u540e\u7f00\u7684\u7b2c\u4e8c\u5173\u952e\u5b57\u4e3a\u7b2c i + k \u4e2a\u540e\u7f00\u7684\u7b2c\u4e00\u5173\u952e\u5b57\n                y[++cnt] = sa[i] - k;\n            }\n        }\n\n        // 2. \u518d\u6309\u7b2c\u4e00\u5173\u952e\u5b57\u6392\u5e8f\n        for(int i = 1; i &lt;= m; i++) c[i] = 0;\n        for(int i = 1; i &lt;= n; i++) c[x[i]]++;\n        for(int i = 2; i &lt;= m; i++) c[i] += c[i - 1];\n        for(int i = n; i &gt;= 1; i--) sa[c[x[y[i]]]--] = y[i], y[i] = 0;\n\n        // 3. \u79bb\u6563\u5316 [i, i + 2k]\n        // swap(x, y);\n        y[sa[1]] = 1, cnt = 1;\n        for(int i = 2; i &lt;= n; i++) {\n            y[sa[i]] = (x[sa[i]] == x[sa[i - 1]] &amp;&amp; \n                x[sa[i] + k] == x[sa[i - 1] + k]) ? cnt : ++cnt;\n        }\n        for(int i = 1; i &lt;= n; i++) x[i] = y[i];\n        if(cnt == n) break;\n        m = cnt;\n    }\n}\nvoid get_height() {\n    for(int i = 1; i &lt;= n; i++) rk[sa[i]] = i;\n    for(int i = 1, k = 0; i &lt;= n; i++) {\n        if(rk[i] == 1) continue;\n        if(k) k--;\n        int j = sa[rk[i] - 1];\n        while(i + k &lt;= n &amp;&amp; j + k &lt;= n &amp;&amp; s[i + k] == s[j + k]) k++;\n        height[rk[i]] = k;\n    }   \n}\nvoid solve() {\n    cin &gt;&gt; n;\n    cin &gt;&gt; s;\n    s = \"(\" + s;\n    get_sa();\n    get_height();\n    ll ans = (1LL + n) * n / 2;\n    for (int i = 2; i &lt;= n; i++) ans -= height[i];\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/String/#sam_1","title":"SAM \u5c01\u88c5","text":"C++<pre><code>struct SuffixAutomaton {\n    int tot = 1, last = 1;\n    int link[N &lt;&lt; 1], ch[N &lt;&lt; 1][26], len[N &lt;&lt; 1], endpos[N &lt;&lt; 1];\n\n    void clear() {\n        for (int i = 0; i &lt;= tot; i++) {\n            link[i] = len[i] = endpos[i] = 0;\n            fill(ch[i], ch[i] + 26, 0);\n        }\n        tot = 1, last = 1;\n    }\n\n    void extend(int c) {\n        int p = ++tot, x = last, r, q;\n        endpos[p] = 1;\n        for (len[last = p] = len[x] + 1; x &amp;&amp; !ch[x][c]; x = link[x]) ch[x][c] = p;\n        if (!x) link[p] = 1;\n        else if (len[x] + 1 == len[q = ch[x][c]]) link[p] = q;\n        else {\n            link[r = ++tot] = link[q];\n            memcpy(ch[r], ch[q], sizeof(ch[r]));\n            len[r] = len[x] + 1;\n            link[p] = link[q] = r;\n            for (; x &amp;&amp; ch[x][c] == q; x = link[x]) ch[x][c] = r;\n        }\n    }\n\n    vector&lt;int&gt; p[N &lt;&lt; 1]; // \u5efa\u7acbparent\u6811\n    void dfs(int u) {\n        int v;\n        for (int i = 0; i &lt; p[u].size(); i++) {\n            v = p[u][i];\n            dfs(v);\n            endpos[u] += endpos[v]; // \u6811\u4e0a\u5dee\u5206\n        }\n    }\n    // get_endpos()\u540e\uff0cendpos[]\u8868\u793a\u5728\u4e32\u4e2d\u51fa\u73b0\u7684\u603b\u6b21\u6570\uff0c\u5373\u539f\u6570\u7ec4\u7684\u5b50\u6811\u6c42\u548c\n    void get_endpos() {\n        for (int i = 1; i &lt;= tot; i++) p[i].clear();\n        for (int i = 2; i &lt;= tot; i++) {\n            p[link[i]].push_back(i);\n        }\n        dfs(1);\n        for (int i = 1; i &lt;= tot; i++) p[i].clear();\n    }\n\n    void debug() {\n        for (int i = 1; i &lt;= tot; i++) {\n            cout &lt;&lt; \"node: \" &lt;&lt; i &lt;&lt; \", father: \" &lt;&lt; link[i] &lt;&lt; \", endpos: \" &lt;&lt; endpos[i] &lt;&lt; \", len: \" &lt;&lt; len[i] &lt;&lt; '\\n';\n        }\n    }\n}sam;\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/String/#4-z-kmp","title":"4 Z \u51fd\u6570\uff08\u6269\u5c55 KMP\uff09","text":"<p>\u5b9a\u4e49\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32 \\(s\\)\uff0c\u5b9a\u4e49\u51fd\u6570 \\(z_i\\) \u8868\u793a \\(s\\) \u548c \\(s_{i,n-1}\\) (\u5373\u4ee5 s[i] \u5f00\u5934\u7684\u540e\u7f00\uff09\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\uff08LCP) \u7684\u957f\u5ea6\uff0c\u5219 \\(z\\) \u88ab\u79f0\u4e3a \\(s\\) \u7684 Z \u51fd\u6570\u3002\u7279\u522b\u5730\uff0c\\(z_0 = 0\\)\u3002</p> C++<pre><code>// O(n^2) \u5b9e\u73b0\nvector&lt;int&gt; z_function(string s) {\n  int n = (int)s.length();\n  vector&lt;int&gt; z(n);\n  for (int i = 1, l = 0, r = 0; i &lt; n; ++i) {\n    if (i &lt;= r &amp;&amp; z[i - l] &lt; r - i + 1) {\n      z[i] = z[i - l];\n    } else {\n      z[i] = max(0, r - i + 1);\n      while (i + z[i] &lt; n &amp;&amp; s[z[i]] == s[i + z[i]]) ++z[i];\n    }\n    if (i + z[i] - 1 &gt; r) l = i, r = i + z[i] - 1;\n  }\n  return z;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/String/#_1","title":"\u5339\u914d\u6240\u6709\u5b50\u4e32","text":"<p>\u4e3a\u4e86\u907f\u514d\u6df7\u6dc6\uff0c\u6211\u4eec\u5c06 t \u79f0\u4f5c \u6587\u672c\uff0c\u5c06 p \u79f0\u4f5c \u6a21\u5f0f\u3002\u6240\u7ed9\u51fa\u7684\u95ee\u9898\u662f\uff1a\u5bfb\u627e\u5728\u6587\u672c t \u4e2d\u6a21\u5f0f p \u7684\u6240\u6709\u51fa\u73b0\uff08occurrence\uff09\u3002</p> <p>\u4e3a\u4e86\u89e3\u51b3\u8be5\u95ee\u9898\uff0c\u6211\u4eec\u6784\u9020\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32 s = p + % + t\uff0c\u4e5f\u5373\u6211\u4eec\u5c06 p \u548c t \u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u5176\u4e2d % \u4e0d\u4f1a\u51fa\u73b0\u5728\u4efb\u4f55\u4e32\u4e2d\u3002</p> <p>\u9996\u5148\u8ba1\u7b97 s \u7684 Z \u51fd\u6570\u3002\u63a5\u4e0b\u6765\uff0c\u5bf9\u4e8e\u5728\u533a\u95f4 [0,|t| - 1] \u4e2d\u7684\u4efb\u610f i\uff0c\u6211\u4eec\u8003\u8651\u4ee5 t[i] \u4e3a\u5f00\u5934\u7684\u540e\u7f00\u5728 s \u4e2d\u7684 Z \u51fd\u6570\u503c \\(k=z_{i+|p|+1}\\) \u3002\u5982\u679c k = |p|\uff0c\u90a3\u4e48\u6211\u4eec\u77e5\u9053\u6709\u4e00\u4e2a p \u7684\u51fa\u73b0\u4f4d\u4e8e t \u7684\u7b2c i \u4e2a\u4f4d\u7f6e\uff0c\u5426\u5219\u6ca1\u6709 p \u7684\u51fa\u73b0\u4f4d\u4e8e t \u7684\u7b2c i \u4e2a\u4f4d\u7f6e\u3002</p> <p>\u5176\u65f6\u95f4\u590d\u6742\u5ea6\uff08\u540c\u65f6\u4e5f\u662f\u5176\u7a7a\u95f4\u590d\u6742\u5ea6\uff09\u4e3a \\(O(|t| + |p|)\\)\u3002</p>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/String/#_2","title":"\u5b57\u7b26\u4e32\u6574\u5468\u671f","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u5b57\u7b26\u4e32 s\uff0c\u627e\u5230\u5176\u6700\u77ed\u7684\u6574\u5468\u671f\uff0c\u5373\u5bfb\u627e\u4e00\u4e2a\u6700\u77ed\u7684\u5b57\u7b26\u4e32 t\uff0c\u4f7f\u5f97 s \u53ef\u4ee5\u88ab\u82e5\u5e72\u4e2a t \u62fc\u63a5\u800c\u6210\u7684\u5b57\u7b26\u4e32\u8868\u793a\u3002</p> <p>\u8003\u8651\u8ba1\u7b97 s \u7684 Z \u51fd\u6570\uff0c\u5219\u5176\u6574\u5468\u671f\u7684\u957f\u5ea6\u4e3a\u6700\u5c0f\u7684 n \u7684\u56e0\u6570 i\uff0c\u6ee1\u8db3 $i+z_i*i=n $ \u3002</p>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/String/#5-trie","title":"5 Trie \u5b57\u5178\u6811","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/String/#_3","title":"\u57fa\u7840\u5c01\u88c5","text":"C++<pre><code>const int N = 1e6 + 5;\nstruct trie {\n    int nxt[N][26], cnt;\n    bool exist[N];\n    void insert(string s, int n) {\n        int p = 0;\n        for (int i = 0; i &lt; n; i++) {\n            int c = s[i] - 'a';\n            if (!nxt[p][c])\n                nxt[p][c] = ++cnt;\n            p = nxt[p][c];\n        }\n        exist[p] = true;\n    }\n    bool find(string s, int l) {\n        int p = 0;\n        for (int i = 0; i &lt; l; i++) {\n            int c = s[i] - 'a';\n            if (!nxt[p][c])\n                return false;\n            p = nxt[p][c];\n        }\n        return exist[p];\n    }\n}t;\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/String/#01-trie","title":"01 Trie","text":"C++<pre><code>struct Trie {\n    int n, idx;\n    vector&lt;vector&lt;int&gt;&gt; ch;\n    Trie(int n) {\n        this-&gt;n = n;\n        idx = 0;\n        ch.resize(30 * (n + 1), vector&lt;int&gt;(2));\n    }\n    void insert(int x) {\n        int u = 0;\n        for (int i = 30; ~i; i--) {\n            int &amp;v = ch[u][x &gt;&gt; i &amp; 1];\n            if (!v) v = ++idx;\n            u = v;\n        }\n    }\n    int query(int x) {\n        int u = 0, res = 0;\n        for (int i = 30; ~i; i--) {\n            int v = x &gt;&gt; i &amp; 1;\n            if (ch[u][!v]) {\n                res += (1 &lt;&lt; i);\n                u = ch[u][!v];\n            } else {\n                u = ch[u][v];\n            }\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/String/#6-ac","title":"6 AC \u81ea\u52a8\u673a","text":"<p>\u6709 \\(N\\) \u4e2a\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u6a21\u5f0f\u4e32\u4ee5\u53ca\u4e00\u4e2a\u6587\u672c\u4e32 \\(T\\)\u3002\u6bcf\u4e2a\u6a21\u5f0f\u4e32\u53ef\u80fd\u4f1a\u5728\u6587\u672c\u4e32\u4e2d\u51fa\u73b0\u591a\u6b21\u3002\u4f60\u9700\u8981\u627e\u51fa\u54ea\u4e9b\u6a21\u5f0f\u4e32\u5728\u6587\u672c\u4e32 \\(T\\) \u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u6700\u591a\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(km+nm)\\)</p> C++<pre><code>// \u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u8f93\u51fa\u6a21\u5f0f\u4e32\u6700\u591a\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u63a5\u4e0b\u53bb\u82e5\u5e72\u884c\u6bcf\u884c\u8f93\u51fa\u4e00\u4e2a\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u6a21\u5f0f\u4e32\uff0c\u6309\u8f93\u5165\u987a\u5e8f\u6392\u5217\n#include &lt;bits/stdc++.h&gt;\n#define ll long long \nusing namespace std;\nconst ll N = 1e6 + 10;\nint trie[N][26], cnt[N], fail[N], id = 0, maxnum, num[N];\nstring ss[N];\nstring s;\nvoid insert(string s) {\n    int p = 0;\n    int len = s.size();\n    for (int i = 0; i &lt; len; ++i) {\n        int temp = s[i] - 'a';\n        if (trie[p][temp] == 0) {\n            trie[p][temp] = ++id;\n        }\n        p = trie[p][temp];\n    }\n    cnt[p]++;\n    ss[p] = s;\n}\nvoid creatfail() {\n    queue&lt;int&gt; q;\n    int p = 0;\n    for (int i = 0; i &lt;= 25; ++i) {\n        if (trie[p][i]) q.push(trie[p][i]);\n    }\n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        for (int i = 0; i &lt;= 25; ++i) {\n            if (trie[u][i]) {\n                fail[trie[u][i]] = trie[fail[u]][i];\n                q.push(trie[u][i]);\n            }\n            else trie[u][i] = trie[fail[u]][i];\n        }\n    }\n}\nvoid query(string s) {\n    int p = 0;\n    int len = s.size();\n    for (int i = 0; i &lt; len; ++i) {\n        int temp = s[i] - 'a';\n        p = trie[p][temp];\n        for (int j = p; j != 0; j = fail[j]) {\n            if (cnt[j]) {\n                num[j]++;\n                if (num[j] &gt; maxnum) {\n                    maxnum = num[j];\n                }\n            }\n        }\n    }\n}\nvoid solve() {\n    while (1) {\n        int n;\n        cin &gt;&gt; n;\n        if (n == 0) break;\n        for (int i = 0; i &lt;= id; ++i) {\n            cnt[i] = fail[i] = num[i] = 0;\n            for (int j = 0; j &lt;= 25; ++j) {\n                trie[i][j] = 0;\n            }\n        }\n        id = maxnum = 0;\n        for (int i = 0; i &lt; n; ++i) {\n            cin &gt;&gt; s;\n            insert(s);\n        }\n        creatfail();\n        cin &gt;&gt; s;\n        query(s);\n        cout &lt;&lt; maxnum &lt;&lt; '\\n';\n        for (int i = 1; i &lt;= id; ++i) {\n            if (num[i] == maxnum) cout &lt;&lt; ss[i] &lt;&lt; '\\n';\n        }\n    }\n}\nint main() {\n    ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);\n    int _t = 1;\n    //cin &gt;&gt; _t;\n    while (_t--) {\n        solve();\n    }\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/String/#7-ac","title":"7 AC \u81ea\u52a8\u673a\u4f18\u5316\u52a0\u5f3a","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6587\u672c\u4e32 \\(S\\) \u548c \\(n\\) \u4e2a\u6a21\u5f0f\u4e32 \\(T_{1\\dots n}\\) , \u5206\u522b\u6c42\u51fa\u6bcf\u4e2a\u6a21\u5f0f\u4e32 \\(T_i\\) \u5728 \\(S\\) \u4e2d\u51fa\u73b0\u7684\u6b21\u6570</p> C++<pre><code>#include &lt;bits/stdc++.h&gt;\n#define ll long long\nusing namespace std;\nconst ll N = 2e6 + 10;\nint trie[N][26], cnt[N], fail[N], id = 0, num[N], MAP[N];\nstring s;\nvector&lt;vector&lt;int&gt; &gt; v(N);\nvoid insert(int cur, string s) {\n    int p = 0;\n    int len = s.size();\n    for (int i = 0; i &lt; len; ++i) {\n        int temp = s[i] - 'a';\n        if (trie[p][temp] == 0) {\n            trie[p][temp] = ++id;\n        }\n        p = trie[p][temp];\n    }\n    MAP[cur] = p;\n}\nvoid creatfail() {\n    queue&lt;int&gt; q;\n    int p = 0;\n    for (int i = 0; i &lt;= 25; ++i) {\n        if (trie[p][i]) q.push(trie[p][i]);\n    }\n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        for (int i = 0; i &lt;= 25; ++i) {\n            if (trie[u][i]) {\n                fail[trie[u][i]] = trie[fail[u]][i];\n                q.push(trie[u][i]);\n            }\n            else trie[u][i] = trie[fail[u]][i];\n        }\n    }\n}\nvoid query(string s) {\n    int p = 0;\n    int len = s.size();\n    for (int i = 0; i &lt; len; ++i) {\n        int temp = s[i] - 'a';\n        p = trie[p][temp];\n        num[p]++;\n    }\n}\nvoid build() {\n    for (int i = 1; i &lt;= id; ++i) {\n        v[fail[i]].push_back(i);\n    }\n}\nvoid dfs(int u) {\n    for (auto i : v[u]) {\n        dfs(i);\n        num[u] += num[i];\n    }\n}\nvoid solve() {\n    int n;\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; ++i) {\n        cin &gt;&gt; s;\n        insert(i, s);\n    }\n    creatfail();\n    cin &gt;&gt; s;\n    query(s);\n    build();\n    dfs(0);\n    for (int i = 0; i &lt; n; ++i) {\n        cout &lt;&lt; num[MAP[i]] &lt;&lt; '\\n';\n    }\n}\nint main() {\n    ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);\n    int _t = 1;\n    //cin &gt;&gt; _t;\n    while (_t--) {\n        solve();\n    }\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/String/#8","title":"8 \u5b57\u7b26\u4e32\u54c8\u5e0c","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/String/#_4","title":"\u666e\u901a\u7248\u54c8\u5e0c","text":"<p>ull \u81ea\u7136\u6ea2\u51fa</p> C++<pre><code>#define ull unsigned long long\nconst int N = 1e4 + 5;\nconst ull P = 13331;\null p[N];\nstd::string s;\n\nvoid init() {\n    p[0] = 1;\n    for (int i = 1; i &lt; N; i++)\n        p[i] = p[i - 1] * P;\n}\null Hash(std::string s) {\n    ull H = 0;\n    int n = s.length();\n    for (int i = 0; i &lt; n; i++)\n        H = H * P + s[i] - 'a' + 1;\n    return H;\n}\n\null get_hash(ull L, ull R) { return H[R] - H[L - 1] * p[R - L + 1]; }\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/String/#_5","title":"\u53cc\u6a21\u6570\u54c8\u5e0c","text":"C++<pre><code>// \u968f\u673a\u8d28\u6570\u5217\u8868\uff1a1111111121\u30011211111123\u30011311111119\nconst int N = 1 &lt;&lt; 21;\nstatic const int mod1 = 1E9 + 7, base1 = 127;\nstatic const int mod2 = 1E9 + 9, base2 = 131;\nusing U = Zmod&lt;mod1&gt;;\nusing V = Zmod&lt;mod2&gt;;\nvector&lt;U&gt; val1;\nvector&lt;V&gt; val2;\nvoid init(int n = N) {\n    val1.resize(n + 1), val2.resize(n + 2);\n    val1[0] = 1, val2[0] = 1;\n    for (int i = 1; i &lt;= n; i++) {\n        val1[i] = val1[i - 1] * base1;\n        val2[i] = val2[i - 1] * base2;\n    }\n}\nstruct String {\n    vector&lt;U&gt; hash1;\n    vector&lt;V&gt; hash2;\n    string s;\n\n    String(string s_) : s(s_), hash1{0}, hash2{0} {\n        for (auto it : s) {\n            hash1.push_back(hash1.back() * base1 + it);\n            hash2.push_back(hash2.back() * base2 + it);\n        }\n    }\n    pair&lt;U, V&gt; get() { // \u8f93\u51fa\u6574\u4e32\u7684\u54c8\u5e0c\u503c\n        return {hash1.back(), hash2.back()};\n    }\n    pair&lt;U, V&gt; substring(int l, int r) { // \u8f93\u51fa\u5b50\u4e32\u7684\u54c8\u5e0c\u503c\n        if (l &gt; r) swap(l, r);\n        U ans1 = hash1[r] - hash1[l - 1] * val1[r - l + 1];\n        V ans2 = hash2[r] - hash2[l - 1] * val2[r - l + 1];\n        return {ans1, ans2};\n    }\n    pair&lt;U, V&gt; modify(int idx, char x) { // \u4fee\u6539 idx \u4f4d\u4e3a x\n        int n = s.size() - 1;\n        U ans1 = hash1.back() + val1[n - idx] * (x - s[idx]);\n        V ans2 = hash2.back() + val2[n - idx] * (x - s[idx]);\n        return {ans1, ans2};\n    }\n};\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/String/#_6","title":"\u54c8\u5e0c\u5224\u65ad\u56de\u6587\u4e32","text":"C++<pre><code>#define ull unsigned long long\n\nint n;\nchar s[N], t[N];\null ans, PP = 131, f[N], g[N], P[N];\n\nvoid init() {\n    P[0] = 1;\n    for (int i = 1; i &lt;= n; i++) t[i] = s[n - i + 1];\n    for (int i = 1; i &lt;= n; i++) P[i] = P[i - 1] * PP;\n    for (int i = 1; i &lt;= n; i++) f[i] = f[i - 1] * PP + s[i];\n    for (int i = n; i &gt;= 1; i--) g[i] = g[i + 1] * PP + t[i];\n}\n\nbool isPalindrome_even(int l, int r) { // \u957f\u5ea6\u4e3a\u5076\u6570\n    int mid = (l + r) &gt;&gt; 1;\n    int x = l + mid - 1; // \u4ee5s[x]\u4e3a\u4e2d\u5fc3\n    ull a = f[x] - f[x - mid] * P[mid];\n    ull b = g[x + 1] - g[x + 1 + mid] * P[mid];\n    return a == b;\n}\nbool isPalindrome_odd(int l, int r) { // \u957f\u5ea6\u4e3a\u5947\u6570\n    int mid = ((l + r) &gt;&gt; 1);\n    int x = l + mid; // \u4ee5s[x]\u4e3a\u4e2d\u5fc3\n    ull a = f[x] - f[x - mid] * P[mid];\n    ull b = g[x + 1] - g[x + 1 + mid] * P[mid];\n    return a == b;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/String/#9-pam","title":"9 \u56de\u6587\u81ea\u52a8\u673a PAM\uff08\u56de\u6587\u6811\uff09","text":"C++<pre><code>struct PalindromeAutomaton {\n    constexpr static int N = 5e5 + 10;\n    int tr[N][26], fail[N], len[N];\n    int cntNodes, last;\n    int cnt[N];\n    string s;\n    PalindromeAutomaton(string s) {\n        memset(tr, 0, sizeof tr);\n        memset(fail, 0, sizeof fail);\n        len[0] = 0, fail[0] = 1;\n        len[1] = -1, fail[1] = 0;\n        cntNodes = 1;\n        last = 0;\n        this-&gt;s = s;\n    }\n    void insert(char c, int i) {\n        int u = get_fail(last, i);\n        if (!tr[u][c - 'a']) {\n            int v = ++cntNodes;\n            fail[v] = tr[get_fail(fail[u], i)][c - 'a'];\n            tr[u][c - 'a'] = v;\n            len[v] = len[u] + 2;\n            cnt[v] = cnt[fail[v]] + 1;\n        }\n        last = tr[u][c - 'a'];\n    }\n    int get_fail(int u, int i) {\n        while (i - len[u] - 1 &lt;= -1 || s[i - len[u] - 1] != s[i]) {\n            u = fail[u];\n        }\n        return u;\n    }\n};\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/String/#10","title":"10 \u524d\u540e\u7f00\u53bb\u91cd","text":"<p><code>sample please ease</code> \u53bb\u91cd\u540e\u5f97\u5230 <code>samplease</code>\u3002</p> C++<pre><code>string compress(vector&lt;string&gt; in) { // \u524d\u540e\u7f00\u538b\u7f29\n    vector&lt;U&gt; hash1{1};\n    vector&lt;V&gt; hash2{1};\n    string ans = \"#\";\n    for (auto s : in) {\n        s = \"#\" + s;\n        int st = 0;\n        U chk1 = 0;\n        V chk2 = 0;\n        for (int j = 1; j &lt; s.size() &amp;&amp; j &lt; ans.size(); j++) {\n            chk1 = chk1 * base1 + s[j];\n            chk2 = chk2 * base2 + s[j];\n            if ((hash1.back() == hash1[ans.size() - 1 - j] * val1[j] + chk1) &amp;&amp;\n                (hash2.back() == hash2[ans.size() - 1 - j] * val2[j] + chk2)) {\n                st = j;\n            }\n        }\n        for (int j = st + 1; j &lt; s.size(); j++) {\n            ans += s[j];\n            hash1.push_back(hash1.back() * base1 + s[j]);\n            hash2.push_back(hash2.back() * base2 + s[j]);\n        }\n    }\n    return ans.substr(1);\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Tree/","title":"Tree","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Tree/#1","title":"1 \u6811\u7684\u76f4\u5f84","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Tree/#dfs","title":"\u4e24\u6b21 DFS \uff08\u4e0d\u80fd\u6709\u8d1f\u6743\u8fb9\uff09","text":"C++<pre><code>int n, c, d[N]; // c \u4e3a\u6700\u6df1\u70b9\nvector&lt;int&gt; ed[N];\nvoid dfs(int u, int fa) {\n    for (int v : ed[u]) {\n        if (v == fa) continue;\n        d[v] = d[u] + 1;\n        if (d[v] &gt; d[c]) c = v;\n        dfs(v, u);\n    }\n}\nvoid solve() {\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt; n; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        ed[u].push_back(v);\n        ed[v].push_back(u);\n    }\n    dfs(1, 0);\n    d[c] = 0;\n    dfs(c, 0); // \u4ece\u76f4\u5f84\u7684\u4e00\u7aef\u4e00\u8def\u5411\u4e0a\n    cout &lt;&lt; d[c] &lt;&lt; endl;\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Tree/#dp","title":"\u6811\u5f62 DP\uff08\u5141\u8bb8\u8d1f\u6743\uff09","text":"<p>\u5bf9\u4e8e\u6811\u7684\u76f4\u5f84\uff0c\u5b9e\u9645\u4e0a\u662f\u53ef\u4ee5\u901a\u8fc7\u679a\u4e3e\u4ece\u67d0\u4e2a\u8282\u70b9\u51fa\u53d1\u4e0d\u540c\u7684\u4e24\u6761\u8def\u5f84\u76f8\u52a0\u7684\u6700\u5927\u503c\u6c42\u51fa\u3002\u56e0\u6b64\uff0c\u5728 DP \u6c42\u89e3\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u66f4\u65b0 \\(dp[u]\\) \u4e4b\u524d\uff0c\u8ba1\u7b97 \\(d = max(d, dp[u] + dp[v] + w(u, v))\\) \u5373\u53ef\u7b97\u51fa\u76f4\u5f84 \\(d\\)\u3002</p> C++<pre><code>int n, d = 0;\nint dp[N];\nvector&lt;int&gt; E[N];\nvoid dfs(int u, int fa) {\n    for (int v : E[u]) {\n        if (v == fa) continue;\n        dfs(v, u);\n        d = max(d, dp[u] + dp[v] + 1);\n        dp[u] = max(dp[u], dp[v] + 1);\n    }\n}\n</code></pre> <p><code>\u6027\u8d28</code> \u82e5\u6811\u4e0a\u6240\u6709\u8fb9\u6743\u4e3a\u6b63\uff0c\u5219\u6811\u7684\u6240\u6709\u76f4\u5f84\u7684\u4e2d\u70b9\u76f8\u540c</p>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Tree/#2-lcalowest-common-ancestor","title":"2  \u6700\u8fd1\u516c\u5171\u7956\u5148  LCA\uff08Lowest Common Ancestor\uff09","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Tree/#on-ologn","title":"\u500d\u589e\u6cd5 \\(O(n)\\) \u9884\u5904\u7406\uff0c\\(O(logn)\\) \u67e5\u8be2","text":"C++<pre><code>#include &lt;bits/stdc++.h&gt;\n#define ll long long\nusing namespace std;\nconst int N = 5e5 + 5;\nint n, m, s;\nint fa[N][20], d[N]; // fa[x][i] \u8868\u793a x \u7684\u7b2c (2^i) \u4e2a\u7236\u4eb2 d[i] \u4e3a\u6df1\u5ea6\nvector&lt;int&gt; ed[N];\nvoid dfs(int u, int f) {\n    d[u] = d[f] + 1;\n    fa[u][0] = f;\n    for (int i = 1; (1 &lt;&lt; i) &lt;= d[u]; i++)\n        fa[u][i] = fa[fa[u][i - 1]][i - 1];\n    for (int v : ed[u]) {\n        if (v != f)\n            dfs(v, u);\n    }\n}\nint LCA(int x, int y) {\n    if (d[x] &lt; d[y]) swap(x, y);\n    for (int i = 19; i &gt;= 0; i--) { // \u628a x \u548c y \u63d0\u5230\u76f8\u540c\u9ad8\u5ea6\n        if (d[x] - (1 &lt;&lt; i) &gt;= d[y])\n            x = fa[x][i];\n    }\n    if (x == y) return x;\n    for (int i = 19; i &gt;= 0; i--) {\n        if (fa[x][i] != fa[y][i]) {\n            x = fa[x][i];\n            y = fa[y][i];\n        }\n    }\n    return fa[x][0];\n}\nint main() {\n    ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;\n    for (int i = 1; i &lt; n; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        ed[u].push_back(v);\n        ed[v].push_back(u);\n    }\n    dfs(s, 0);\n    while (m--) {\n        int a, b;\n        cin &gt;&gt; a &gt;&gt; b;\n        cout &lt;&lt; LCA(a, b) &lt;&lt; '\\n';\n    }\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Tree/#tarjan-on-m","title":"tarjan \u79bb\u7ebf\u5904\u7406 \\(O(n + m)\\)","text":"C++<pre><code>#include &lt;bits/stdc++.h&gt;\n#define ll long long\n#define PII pair&lt;int, int&gt;\nusing namespace std;\nconst int N = 5e5 + 5;\nint n, m, s;\nint fa[N], ans[N];\nvector&lt;int&gt; ed[N];\nvector&lt;PII&gt; query[N];\nbool vis[N];\nint find_set(int x) {\n    int root = fa[x];\n    while (root != fa[root]) root = fa[root];\n    while (x != root) {\n        int t = fa[x];\n        fa[x] = root;\n        x = t;\n    }\n    return root;\n}\nvoid tarjan(int u) {\n    vis[u] = true;\n    for (int v : ed[u]) {\n        if (!vis[v]) {\n            tarjan(v);\n            fa[v] = u;\n        }\n    }\n    for (auto it : query[u]) {\n        int v = it.first;\n        if (vis[v])\n            ans[it.second] = find_set(v);\n    }\n}\nint main() {\n    ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;\n    for (int i = 1; i &lt; n; i++) {\n        fa[i] = i; // \u5e76\u67e5\u96c6\u521d\u59cb\u5316\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        ed[u].push_back(v);\n        ed[v].push_back(u);\n    }\n    fa[n] = n;\n    for (int i = 1; i &lt;= m; i++) {\n        int a, b;\n        cin &gt;&gt; a &gt;&gt; b;\n        query[a].push_back({b, i});\n        query[b].push_back({a, i});\n    }\n    tarjan(s);\n    for (int i = 1; i &lt;= m; i++)\n        cout &lt;&lt; ans[i] &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Tree/#on-olog-n","title":"\u6811\u94fe\u5256\u5206 \\(O(n)\\) \u9884\u5904\u7406 \\(O(\\log n)\\) \u67e5\u8be2","text":"C++<pre><code>struct HLD {\n    int n, idx;\n    vector&lt;vector&lt;int&gt;&gt; ver;\n    vector&lt;int&gt; siz, dep;\n    vector&lt;int&gt; top, son, parent;\n\n    HLD(int n) {\n        this-&gt;n = n;\n        ver.resize(n + 1);\n        siz.resize(n + 1);\n        dep.resize(n + 1);\n\n        top.resize(n + 1);\n        son.resize(n + 1);\n        parent.resize(n + 1);\n    }\n    void add(int x, int y) { // \u5efa\u7acb\u53cc\u5411\u8fb9\n        ver[x].push_back(y);\n        ver[y].push_back(x);\n    }\n    void dfs1(int x) {\n        siz[x] = 1;\n        dep[x] = dep[parent[x]] + 1;\n        for (auto y : ver[x]) {\n            if (y == parent[x]) continue;\n            parent[y] = x;\n            dfs1(y);\n            siz[x] += siz[y];\n            if (siz[y] &gt; siz[son[x]]) {\n                son[x] = y;\n            }\n        }\n    }\n    void dfs2(int x, int up) {\n        top[x] = up;\n        if (son[x]) dfs2(son[x], up);\n        for (auto y : ver[x]) {\n            if (y == parent[x] || y == son[x]) continue;\n            dfs2(y, y);\n        }\n    }\n    int lca(int x, int y) {\n        while (top[x] != top[y]) {\n            if (dep[top[x]] &gt; dep[top[y]]) {\n                x = parent[top[x]];\n            }\n            else {\n                y = parent[top[y]];\n            }\n        }\n        return dep[x] &lt; dep[y] ? x : y;\n    }\n    int clac(int x, int y) { // \u67e5\u8be2\u4e24\u70b9\u95f4\u8ddd\u79bb\n        return dep[x] + dep[y] - 2 * dep[lca(x, y)];\n    }\n    void work(int root = 1) { // \u5728\u6b64\u521d\u59cb\u5316\n        dfs1(root);\n        dfs2(root, root);\n    }\n};\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Tree/#3","title":"3 \u6811\u7684\u91cd\u5fc3","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Tree/#_1","title":"\u5b9a\u4e49","text":"<p>\u5982\u679c\u5728\u6811\u4e2d\u9009\u62e9\u67d0\u4e2a\u8282\u70b9\u5e76\u5220\u9664\uff0c\u8fd9\u68f5\u6811\u5c06\u5206\u4e3a\u82e5\u5e72\u68f5\u5b50\u6811\uff0c\u7edf\u8ba1\u5b50\u6811\u8282\u70b9\u6570\u5e76\u8bb0\u5f55\u6700\u5927\u503c\u3002\u53d6\u904d\u6811\u4e0a\u6240\u6709\u8282\u70b9\uff0c\u4f7f\u6b64\u6700\u5927\u503c\u53d6\u5230\u6700\u5c0f\u7684\u8282\u70b9\u88ab\u79f0\u4e3a\u6574\u4e2a\u6811\u7684\u91cd\u5fc3\u3002</p>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Tree/#_2","title":"\u6027\u8d28","text":"<ul> <li>\u6811\u7684\u91cd\u5fc3\u5982\u679c\u4e0d\u552f\u4e00\uff0c\u5219\u81f3\u591a\u6709\u4e24\u4e2a\uff0c\u4e14\u8fd9\u4e24\u4e2a\u91cd\u5fc3\u76f8\u90bb\u3002</li> <li>\u4ee5\u6811\u7684\u91cd\u5fc3\u4e3a\u6839\u65f6\uff0c\u6240\u6709\u5b50\u6811\u7684\u5927\u5c0f\u90fd\u4e0d\u8d85\u8fc7\u6574\u68f5\u6811\u5927\u5c0f\u7684\u4e00\u534a\u3002</li> <li>\u6811\u4e2d\u6240\u6709\u70b9\u5230\u67d0\u4e2a\u70b9\u7684\u8ddd\u79bb\u548c\u4e2d\uff0c\u5230\u91cd\u5fc3\u7684\u8ddd\u79bb\u548c\u662f\u6700\u5c0f\u7684\uff1b\u5982\u679c\u6709\u4e24\u4e2a\u91cd\u5fc3\uff0c\u90a3\u4e48\u5230\u5b83\u4eec\u7684\u8ddd\u79bb\u548c\u4e00\u6837\u3002</li> <li>\u628a\u4e24\u68f5\u6811\u901a\u8fc7\u4e00\u6761\u8fb9\u76f8\u8fde\u5f97\u5230\u4e00\u68f5\u65b0\u7684\u6811\uff0c\u90a3\u4e48\u65b0\u7684\u6811\u7684\u91cd\u5fc3\u5728\u8fde\u63a5\u539f\u6765\u4e24\u68f5\u6811\u7684\u91cd\u5fc3\u7684\u8def\u5f84\u4e0a\u3002</li> <li>\u5728\u4e00\u68f5\u6811\u4e0a\u6dfb\u52a0\u6216\u5220\u9664\u4e00\u4e2a\u53f6\u5b50\uff0c\u90a3\u4e48\u5b83\u7684\u91cd\u5fc3\u6700\u591a\u53ea\u79fb\u52a8\u4e00\u6761\u8fb9\u7684\u8ddd\u79bb\u3002</li> </ul>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/Tree/#_3","title":"\u6c42\u89e3","text":"<p>\u5728 DFS \u4e2d\u8ba1\u7b97\u6bcf\u4e2a\u5b50\u6811\u7684\u5927\u5c0f\uff0c\u8bb0\u5f55\u300c\u5411\u4e0b\u300d\u7684\u5b50\u6811\u7684\u6700\u5927\u5927\u5c0f\uff0c\u5229\u7528\u603b\u70b9\u6570 - \u5f53\u524d\u5b50\u6811\uff08\u8fd9\u91cc\u7684\u5b50\u6811\u6307\u6709\u6839\u6811\u7684\u5b50\u6811\uff09\u7684\u5927\u5c0f\uff0c \u5f97\u5230\u300c\u5411\u4e0a\u300d\u7684\u5b50\u6811\u7684\u5927\u5c0f\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u4f9d\u636e\u5b9a\u4e49\u627e\u5230\u91cd\u5fc3\u4e86\u3002</p> C++<pre><code>const int N = 1e4 + 5;\nint n;\nint Size[N];  // \u8fd9\u4e2a\u8282\u70b9\u7684\u300c\u5927\u5c0f\u300d\uff08\u6240\u6709\u5b50\u6811\u4e0a\u8282\u70b9\u6570 + \u8be5\u8282\u70b9\uff09\nint weight[N];  // \u8fd9\u4e2a\u8282\u70b9\u7684\u300c\u91cd\u91cf\u300d\uff0c\u5373\u6240\u6709\u5b50\u6811\u300c\u5927\u5c0f\u300d\u7684\u6700\u5927\u503c\nint centroid[2];  // \u7528\u4e8e\u8bb0\u5f55\u6811\u7684\u91cd\u5fc3\uff08\u5b58\u7684\u662f\u8282\u70b9\u7f16\u53f7\uff09\nvector&lt;int&gt; ed[N];\nvoid GetCentroid(int cur, int fa) {  // cur \u8868\u793a\u5f53\u524d\u8282\u70b9 (current)\n    Size[cur] = 1;\n    weight[cur] = 0;\n    for (int v : ed[cur]) {\n        if (v != fa) {  // v \u8868\u793a\u8fd9\u6761\u6709\u5411\u8fb9\u6240\u901a\u5411\u7684\u8282\u70b9\u3002\n            GetCentroid(v, cur);\n            Size[cur] += Size[v];\n            weight[cur] = max(weight[cur], Size[v]);\n        }\n    }\n    weight[cur] = max(weight[cur], n - Size[cur]);\n    if (weight[cur] &lt;= n / 2) {  // \u4f9d\u7167\u6811\u7684\u91cd\u5fc3\u7684\u5b9a\u4e49\u7edf\u8ba1\n        centroid[centroid[0] != 0] = cur;\n    }\n}\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/python/","title":"Python","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/python/#1","title":"1 \u8f93\u5165\u8f93\u51fa","text":""},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/python/#_1","title":"\u5728\u591a\u884c\u4e2d\u8f93\u5165\u591a\u4e2a\u6574\u6570","text":"<p>\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570 \\(n\\), \u7b2c\u4e8c\u884c\u8f93\u5165 \\(n\\) \u4e2a\u6574\u6570</p> Python<pre><code>n = int(input())\na = input().spilt(\" \")\nint(a[i]) # \u4f7f\u7528\u65f6\u8981\u8f6c\u6362\u4e3a\u6574\u6570\n# \u6216\nA = [int(i) for i in input().spilt()]\n</code></pre> <p>\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570 \\(n\\), \u540e\u9762 \\(n\\) \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570 \\(a_i\\)</p> Python<pre><code>n = int(input())\nnumlist = []\nfor i in range(n):\n    numlist.append(int(input()))\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/python/#map","title":"\u7528 map \u8f93\u5165","text":"<p>\u7b2c\u4e00\u884c\u56db\u4e2a\u6574\u6570 \\(a,b,c,m\\), \u7b2c\u4e8c\u884c \\(a*b*c\\) \u4e2a\u6574\u6570</p> Python<pre><code>A,B,C,m = map(int, input().spilt())\nlife = list(map(int, input().spilt()))\n</code></pre> <p>\u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570 \\(n\\) \u548c \\(k\\), \u540e\u9762 \\(n\\) \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 \\(h,w\\)</p> Python<pre><code>n,k = map(int, input().spilt())\nw = []\nh = []\nfor i in range(n):\n    a,b = map(int, input().spilt())\n    w.append(a)\n    h.append(b)\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/python/#_2","title":"\u4e8c\u7ef4\u6570\u7ec4\u7684\u8f93\u5165","text":"<p>\u7b2c\u4e00\u884c\u8f93\u5165 \\(n,m,T\\)\uff0c \u540e\u9762 \\(m\\) \u884c\uff0c\u6bcf\u884c\u8f93\u5165\u4e24\u4e2a\u6574\u6570</p> Python<pre><code>first = input()\nn,m,T = [int(i) for i in first.spilt()]\na = [] # \u53ef\u4ee5\u901a\u8fc7 a[i][0] \u7684\u65b9\u5f0f\u6765\u4f7f\u7528\u4e8c\u7ef4\u6570\u7ec4 a\nfor i in range(m):\n    a.append([int(i) for i in input.spilt()]) # \u6bcf\u884c\u8bfb\u5165\u51e0\u4e2a\u6574\u6570\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/python/#_3","title":"\u672a\u660e\u786e\u8bf4\u660e\u7ec8\u6b62\u7684\u8f93\u5165","text":"Python<pre><code>import sys\nfor n in sys.stdin:\n    n = int(n)\n    # \u5904\u7406 n...\n\n# \u6216\u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff1a\u8bfb\u5165\u51fa\u9519\u5c31\u505c\u6b62\nwhile True:\n    try:\n        n,m = map(int, input().spilt())\n        # \u5904\u7406 n\uff0cm\n    except EOFError:\n        break\n</code></pre>"},{"location":"algorithm/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/python/#_4","title":"\u5e26\u683c\u5f0f\u8f93\u51fa","text":"Python<pre><code># \u8f93\u51fa\u56db\u820d\u4e94\u5165\u4fdd\u7559 4 \u4f4d\u7684\u5c0f\u6570\uff0c\u4e09\u79cd\u65b9\u6cd5\nn = 12.345678\nprint('{:.4f}'.format(n))\nprint(\"%.4f\" %n)\nprint(round(n, 4))\n# \u8f93\u51fa hh:mm:ss \u7684\u5f62\u5f0f\nhh,mm,ss = 3,24,5\nprint(\"{:0&gt;2d}:{:0&gt;2d}:{:0&gt;2d}\".format(hh,mm,ss)) # 03:24:05\nprint(\"%02d:%02d:%02d\" %(hh,mm,ss)) # 03:24:05\n</code></pre>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/","title":"Index","text":""},{"location":"algorithm/%E9%A2%98%E8%A7%A3/#xcpc","title":"XCPC","text":"<p>2024 CCPC \u54c8\u5c14\u6ee8 B. Concave Hull</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/#codeforces","title":"CodeForces","text":""},{"location":"algorithm/%E9%A2%98%E8%A7%A3/#atcoder","title":"Atcoder","text":""},{"location":"algorithm/%E9%A2%98%E8%A7%A3/#oj","title":"OJ","text":""},{"location":"algorithm/%E9%A2%98%E8%A7%A3/#_1","title":"\u5929\u68af\u8d5b","text":"<p>2021 \u56fd\u8d5b\u9898\u89e3</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/","title":"2021 final","text":""},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#l1-1","title":"L1-1 \u4eba\u4e0e\u795e","text":""},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_1","title":"\u4ee3\u7801","text":"Python<pre><code>print(\"To iterate is human, to recurse divine.\") # \u6bd4\u8f83\u5feb\n\n#include &lt;iostream&gt;\nint main() {\n    std::cout &lt;&lt; \"To iterate is human, to recurse divine.\";\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#l1-2-c","title":"L1-2 \u4e24\u5c0f\u65f6\u5b66\u5b8c C \u8bed\u8a00","text":""},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_2","title":"\u6807\u7b7e","text":"<p>\u7b80\u5355\u6570\u5b66</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_3","title":"\u601d\u8def","text":"<p>\u6839\u636e\u5e7c\u513f\u56ed\u4e8c\u5e74\u7ea7\u829d\u58eb\uff0c\u5269\u4f59\u5b57\u6570 = \u603b\u5b57\u6570 - \u6bcf\u5206\u949f\u80fd\u770b\u5b57\u6570 * \u770b\u7684\u65f6\u957f</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_4","title":"\u4ee3\u7801","text":"C++<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint main()\n{\n    int n, k, m;\n    cin &gt;&gt; n &gt;&gt; k &gt;&gt; m;\n    cout &lt;&lt; n - k * m;\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#l1-3","title":"L1-3 \u5f3a\u8feb\u75c7","text":""},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_5","title":"\u6807\u7b7e","text":"<p>\u5b57\u7b26\u4e32\uff0c\u6a21\u62df</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_6","title":"\u601d\u8def","text":"<p>\u5224\u65ad\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u4e3a 6 \u5219\u76f4\u63a5\u8f93\u51fa\uff08\u6ce8\u610f\u8865\u4e00\u4e2a'-'\uff09; \u4e3a 4 \u5219\u5224\u65ad\u5c5e\u4e8e 19xx \u8fd8\u662f 20xx \u5e74\u3002</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_7","title":"\u4ee3\u7801","text":"C++<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint main()\n{\n    string s;\n    cin &gt;&gt; s;\n    if (s.length() == 6) {\n        for (int i = 0; i &lt; 6; i++) {\n            cout &lt;&lt; s[i];\n            if (i == 3) cout &lt;&lt; '-';\n        }\n    }\n    else {\n        int y = (s[0] - '0') * 10 + (s[1] - '0');\n        if (y &lt; 22) {\n            cout &lt;&lt; \"20\" &lt;&lt; s[0] &lt;&lt; s[1] &lt;&lt; \"-\" &lt;&lt; s[2] &lt;&lt; s[3];\n        }\n        else {\n            cout &lt;&lt; \"19\" &lt;&lt; s[0] &lt;&lt; s[1] &lt;&lt; \"-\" &lt;&lt; s[2] &lt;&lt; s[3];\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#l1-4","title":"L1-4 \u964d\u4ef7\u63d0\u9192\u673a\u5668\u4eba","text":""},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_8","title":"\u6807\u7b7e","text":"<p>\u6a21\u62df</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_9","title":"\u601d\u8def","text":"<p>\u6bcf\u6b21\u8f93\u5165\u7684 p \u548c m \u5bf9\u6bd4\u5373\u53ef\uff0c\u5c0f\u4e8e m \u5c31\u8f93\u51fa\uff0c\u8bb0\u5f97\u4fdd\u7559\u4e00\u4f4d\u5c0f\u6570</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_10","title":"\u4ee3\u7801","text":"C++<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint main() {\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;double&gt; p(n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; p[i];\n        if (p[i] &lt; m) {\n            cout &lt;&lt; \"On Sale! \" &lt;&lt; fixed &lt;&lt; setprecision(1) &lt;&lt; p[i] &lt;&lt; '\\n';\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#l1-5","title":"L1-5 \u5927\u7b28\u949f\u7684\u5fc3\u60c5","text":""},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_11","title":"\u6807\u7b7e","text":"<p>\u6a21\u62df</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_12","title":"\u601d\u8def","text":"<p>\u5b58\u50a8 24 \u5c0f\u65f6\u7684\u5fc3\u60c5\u6307\u6570\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e0e 50 \u8fdb\u884c\u6bd4\u8f83\u5373\u53ef</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_13","title":"\u4ee3\u7801","text":"C++<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint main() {\n    int a[25];\n    for (int i = 0; i &lt; 24; i++) cin &gt;&gt; a[i];\n    int n;\n    cin &gt;&gt; n;\n    while (n &gt;= 0 &amp;&amp; n &lt;= 23) {\n        cout &lt;&lt; a[n] &lt;&lt; \" \";\n        if (a[n] &gt; 50) cout &lt;&lt; \"Yes\\n\";\n        else cout &lt;&lt; \"No\\n\";\n        cin &gt;&gt; n;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#l1-6","title":"L1-6 \u5409\u8001\u5e08\u7684\u56de\u5f52","text":""},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_14","title":"\u6807\u7b7e","text":"<p>\u5b57\u7b26\u4e32\uff0c\u6a21\u62df</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_15","title":"\u601d\u8def","text":"<p>\u5c06\u6bcf\u9053\u9898\u7684\u63cf\u8ff0\u548c qiandao \u4e0e easy \u8fdb\u884c\u6bd4\u5bf9\uff0c\u82e5\u5b58\u5728\u5176\u4e2d\u4e00\u4e2a\u5c31\u8df3\u8fc7\uff0c\u5426\u5219\u5b58\u5165\u8fd9\u9053\u9898\u3002\u6700\u540e\u5982\u679c m \u5927\u4e8e\u5b58\u50a8\u9898\u76ee\u7684\u6570\u91cf\u5c31\u8bf4\u660e\u505a\u5b8c\u4e86\uff0c\u5426\u5219\u6839\u636e\u4e0b\u6807\u8f93\u51fa\u3002</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_16","title":"\u4ee3\u7801","text":"C++<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint main() {\n    int n, m;\n    string q = \"qiandao\", e = \"easy\";\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;string&gt; ans;\n    n++; // \u6ca1\u6709\u6e05\u9664\u8f93\u5165\u7f13\u5b58\uff0cgetline \u4f1a\u8bfb\u53d6\u4e00\u4e2a\u6362\u884c\u7b26\uff0c\u8fd9\u91cc\u7528 n++\u6765\u62b5\u6d88\n    while (n--) {\n        string s;\n        getline(cin, s); // \u8f93\u5165\u7684\u9898\u76ee\u63cf\u8ff0\u542b\u7a7a\u683c\uff0c\u53ef\u7528 getline \u6765\u8bfb\u53d6\n        bool f = 0;\n        for (int i = 0; i &lt; s.length(); i++) {\n            bool be = 1, bq = 1;\n            for (int j = 0; j &lt; 4; j++) {\n                if (s[i + j] != e[j]) {\n                    be = 0;\n                    break;\n                }\n            }\n            for (int j = 0; j &lt; 7; j++) {\n                if (s[i + j] != q[j]) {\n                    bq = 0;\n                    break;\n                }\n            }\n            if (be || bq) {\n                f = 1;\n                break;\n            }\n        }\n        if (!f) ans.push_back(s);\n    }\n    if (m + 1 &gt;= ans.size()) cout &lt;&lt; \"Wo AK le\";\n    else cout &lt;&lt; ans[m + 1];\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#l1-7","title":"L1-7 \u5929\u68af\u8d5b\u7684\u5584\u826f","text":""},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_17","title":"\u6807\u7b7e","text":"<p>\u6a21\u62df</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_18","title":"\u601d\u8def","text":"<ol> <li>\u4f7f\u7528\u4e24\u4e2a\u53d8\u91cf\u8bb0\u5f55\u6700\u503c\uff0c\u518d\u5206\u522b\u8bb0\u5f55\u6700\u503c\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6709\u65b0\u7684\u6700\u503c\u51fa\u73b0\u65f6\u66f4\u65b0\u6700\u503c\u548c cnt</li> <li>\u6216\u8005\u4f7f\u7528 map \u6765\u5b58\u50a8\u6570\u91cf</li> </ol>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_19","title":"\u4ee3\u7801","text":"C++<pre><code>// 1.\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    int mx = -1, mn = 1e7;\n    int cnt_mx = 0, cnt_mn = 0;\n    while (n--) {\n        int a;\n        cin &gt;&gt; a;\n        if (a &gt; mx) mx = a, cnt_mx = 1;\n        else if (a == mx) cnt_mx++;\n        if (a &lt; mn) mn = a, cnt_mn = 1;\n        else if (a == mn) cnt_mn++;\n    }\n    cout &lt;&lt; mn &lt;&lt; \" \" &lt;&lt; cnt_mn &lt;&lt; endl;\n    cout &lt;&lt; mx &lt;&lt; \" \" &lt;&lt; cnt_mx;\n}\n\n// 2.\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    map&lt;int, int&gt; m;\n    int mx = 0, mn = 1e7;\n    while (n--) {\n        int a;\n        cin &gt;&gt; a;\n        mn = min(mn, a);\n        mx = max(mx, a);\n        m[a]++;\n    }\n    cout &lt;&lt; mn &lt;&lt; \" \" &lt;&lt; m[mn] &lt;&lt; endl;\n    cout &lt;&lt; mx &lt;&lt; \" \" &lt;&lt; m[mx];\n}\n</code></pre>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#l1-8","title":"L1-8 \u4e58\u6cd5\u53e3\u8bc0\u6570\u5217","text":""},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_20","title":"\u6807\u7b7e","text":"<p>\u6a21\u62df</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_21","title":"\u601d\u8def","text":"<p>\u5b9a\u4e49\u4e0b\u6807 pre \u548c now \u8868\u793a\u5f53\u524d\u8fdb\u884c\u8fd0\u7b97\u7684\u4e24\u4e2a\u6570\uff0c\u6839\u636e\u9898\u610f\u6a21\u62df\u5373\u53ef\uff0c\u6ce8\u610f\u4e24\u4f4d\u6570\u7684\u63d2\u5165</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_22","title":"\u4ee3\u7801","text":"C++<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint main() {\n    int a, b, n;\n    cin &gt;&gt; a &gt;&gt; b &gt;&gt; n;\n    vector&lt;int&gt; ans;\n    ans.push_back(a);\n    ans.push_back(b);\n    int pre = 0, now = 1;\n    while (ans.size() &lt; n) {\n        int p = ans[pre] * ans[now];\n        if (p &gt; 9) ans.push_back(p / 10);\n        ans.push_back(p % 10);\n        pre++, now++;\n    }\n    for (int i = 0; i &lt; n; i++) { // \u6ce8\u610f\u53ea\u9700\u8981\u8f93\u51fa n \u4e2a\n        if (i) cout &lt;&lt; \" \";\n        cout &lt;&lt; ans[i];\n    }\n}\n</code></pre>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#l2-1","title":"L2-1 \u5305\u88c5\u673a","text":""},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_23","title":"\u6807\u7b7e","text":"<p>\u5b57\u7b26\u4e32\uff0c\u6a21\u62df\uff0c\u6808</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_24","title":"\u601d\u8def","text":"<p>\u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u6bcf\u6761\u8f68\u9053\u5f53\u524d\u7684\u9996\u4e2a\u7269\u54c1\uff08\u4e0b\u6807\uff09, \u5229\u7528\u6808\u6a21\u62df\uff0c\u4f7f\u7528 vector \u8bb0\u5f55\u6846\u91cc\u6293\u51fa\u7684\u7269\u54c1\uff0c\u6a21\u62df</p> <p>\u6ce8\u610f\u6808\u6ee1\u7684\u72b6\u6001</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_25","title":"\u4ee3\u7801","text":"C++<pre><code>#include &lt;bits/stdc++.h&gt;\n#define rep(i, j, k) for(int i = (j); i &lt;= (k); i++)\n#define per(i, k, j) for(int i = (k); i &gt;= (j); i--)\n#define ll long long\nusing namespace std;\nint n, m, smx;\nvector&lt;char&gt; ans;\nstack&lt;char&gt; st;\nint p[105];\nstring s[105];\nvoid out() {\n    if (st.empty()) return;\n    ans.push_back(st.top());\n    st.pop();\n}\nvoid solve()\n{\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; smx;\n    rep(i, 1, n) {\n        cin &gt;&gt; s[i];\n        s[i] = \"%\" + s[i]; // \u65b9\u4fbf\u4ece 1 \u5f00\u59cb\u8ba1\u6570\n        p[i] = 1; // \u4ece 1 \u5f00\u59cb\u6293\u7269\u54c1\n    }\n    int op;\n    cin &gt;&gt; op;\n    while (op != -1) {\n        if (op == 0) {\n            out();\n        }\n        else {\n            if (p[op] &lt; m + 1) {\n                if (st.size() == smx) out(); // \u7b50\u6ee1\uff0c\u5148\u6254\u51fa\n                st.push(s[op][p[op]]);\n                p[op]++;\n            }\n        }\n        cin &gt;&gt; op;\n    }\n    for (auto c : ans) cout &lt;&lt; c;\n}\nint main()\n{\n    int T_T = 1;\n    // cin &gt;&gt; T_T;\n    while (T_T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#l2-2","title":"L2-2 \u75c5\u6bd2\u6eaf\u6e90","text":""},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_26","title":"\u6807\u7b7e","text":"<p>\u94fe\u8868\uff0c\u641c\u7d22\uff0c\u6a21\u62df</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_27","title":"\u601d\u8def","text":"<p>\u53ef\u4ee5\u7528\u94fe\u8868\uff08\u6211\u7528\u4e86 vector \u6765\u6a21\u62df\uff09\u8bb0\u5f55\u6bcf\u4e2a\u75c5\u6bd2\u4ea7\u751f\u7684\u53d8\u5f02\u6bd2\u682a\u3002\u7531\u4e8e\u6e90\u5934\u552f\u4e00\uff0c\u53ef\u7528 vis=1 \u6765\u8bb0\u5f55\u67d0\u4e2a\u75c5\u6bd2\u662f\u5426\u7531\u53d8\u5f02\u5f97\u6765\uff0c\u6700\u540e vis \u4e3a 0 \u7684\u90a3\u4e2a\u75c5\u6bd2\u5373\u4e3a\u6e90\u5934\u3002 \u5bf9\u6bcf\u4e2a\u75c5\u6bd2\u4ea7\u751f\u7684\u53d8\u5f02\u6bd2\u682a\u5e8f\u53f7\u8fdb\u884c\u6392\u5e8f\uff0c\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u6240\u6709\u957f\u5ea6\u76f8\u540c\u7684\u5e8f\u5217\uff0c\u6700\u5148\u5f97\u5230\u7684\u4e00\u5b9a\u662f\u6700\u5c0f\u7684\u5e8f\u5217\uff0c\u957f\u5ea6\u66f4\u5927\u65f6\u518d\u66f4\u65b0\u7b54\u6848\u3002 \u6216\u8005\u4e5f\u53ef\u4ee5\u7528 vector \u6bd4\u8f83\u5927\u5c0f\u6765\u5224\u65ad\u662f\u5426\u66f4\u65b0\u7b54\u6848</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_28","title":"\u4ee3\u7801","text":"C++<pre><code>#include &lt;bits/stdc++.h&gt;\n#define rep(i, j, k) for(int i = (j); i &lt;= (k); i++)\n#define per(i, k, j) for(int i = (k); i &gt;= (j); i--)\n#define ll long long\nusing namespace std;\nvector&lt;int&gt; List[10005]; // \u8bb0\u5f55\u8be5\u75c5\u6bd2\u7684\u53d8\u5f02\u6bd2\u682a\nint n;\nbool vis[10005]; // \u8bb0\u5f55\u662f\u5426\u7531\u53d8\u5f02\u5f97\u6765\nvector&lt;int&gt; now;\nint ans[10005];\nint len = 0;\nvoid dfs(int x) {\n    now.push_back(x); // \u66f4\u65b0\u72b6\u6001\n    if (List[x].empty()) { // \u4e0d\u80fd\u518d\u5f80\u4e0b\u53d8\u5f02\u4f20\u9012\n        if (now.size() &gt; len) { // \u66f4\u65b0\u7b54\u6848\n            len = now.size();\n            for (int i = 0; i &lt; len; i++)\n                ans[i] = now[i];\n        }\n        now.pop_back(); // \u56de\u6eaf\n        return;\n    }\n    for (auto i : List[x]) {\n        dfs(i);\n    }\n    now.pop_back(); // \u56de\u6eaf\n}\nvoid solve()\n{\n    cin &gt;&gt; n;\n    rep(i, 0, n - 1) {\n        int k;\n        cin &gt;&gt; k;\n        rep(j, 0, k - 1) {\n            int a;\n            cin &gt;&gt; a;\n            vis[a] = 1;\n            List[i].push_back(a);\n        }\n        sort(List[i].begin(), List[i].end());\n    }\n    rep(i, 0, n - 1) {\n        if (!vis[i]) { // \u627e\u5230\u6e90\u5934\n            dfs(i);\n            break;\n        }\n    }\n    cout &lt;&lt; len &lt;&lt; '\\n';\n    for (int i = 0; i &lt; len; i++) {\n        if (i != 0) cout &lt;&lt; \" \";\n        cout &lt;&lt; ans[i];\n    }\n}\nint main()\n{\n    int T_T = 1;\n    // cin &gt;&gt; T_T;\n    while (T_T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#l2-3","title":"L2-3 \u6e05\u70b9\u4ee3\u7801\u5e93","text":""},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_29","title":"\u6807\u7b7e","text":"<p>\u6570\u636e\u7ed3\u6784\uff0cSTL, \u6a21\u62df</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_30","title":"\u601d\u8def","text":"<p>\u4f7f\u7528 map \u6765\u8bb0\u5f55\u6bcf\u79cd\u6d4b\u8bd5\u8f93\u5165\u7684\u6570\u91cf\uff0c\u7136\u540e\u4ee5 pair \u7684\u5f62\u5f0f\u4e22\u5c3d vector \u91cc\uff0c\u518d\u5bf9 vector \u8fdb\u884c\u6392\u5e8f</p> <p>\u6ce8\u610f\u6392\u5e8f\u51fd\u6570 cmp \u7684\u7f16\u5199\uff0c\u9898\u76ee\u8981\u6c42\u9996\u5148\u6309\u6a21\u5757\u4e2a\u6570\u975e\u9012\u589e\u987a\u5e8f\uff0c\u5982\u679c\u6709\u5e76\u5217\uff0c\u5219\u6309\u8f93\u51fa\u5e8f\u5217\u7684\u9012\u589e\u5e8f\u8f93\u51fa</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_31","title":"\u4ee3\u7801","text":"C++<pre><code>#include &lt;bits/stdc++.h&gt;\n#define rep(i, j, k) for(int i = (j); i &lt;= (k); i++)\n#define per(i, k, j) for(int i = (k); i &gt;= (j); i--)\n#define ll long long\nusing namespace std;\nint n, m;\nmap&lt;vector&lt;int&gt;, int&gt; mp;\nvector&lt;pair&lt;vector&lt;int&gt;, int&gt; &gt; ans;\nbool cmp(pair&lt;vector&lt;int&gt;, int&gt; a, pair&lt;vector&lt;int&gt;, int&gt; b) {\n    if (a.second != b.second) return a.second &gt; b.second;\n    return a.first &lt; b.first;\n}\nvoid solve()\n{\n    cin &gt;&gt; n &gt;&gt; m;\n    rep(i, 1, n) {\n        vector&lt;int&gt; v(m);\n        rep(j, 0, m - 1) {\n            cin &gt;&gt; v[j];\n        }\n        mp[v]++;\n    }\n    for (auto&amp; [i, j] : mp) {\n        ans.push_back({i, j});\n    }\n    sort(ans.begin(), ans.end(), cmp);\n    cout &lt;&lt; ans.size() &lt;&lt; '\\n';\n    for (auto p : ans) {\n        cout &lt;&lt; p.second &lt;&lt; \" \";\n        rep(k, 0, m - 1) {\n            if (k != 0) cout &lt;&lt; \" \";\n            cout &lt;&lt; p.first[k];\n        }\n        cout &lt;&lt; '\\n';\n    }\n}\nint main()\n{\n    int T_T = 1;\n    // cin &gt;&gt; T_T;\n    while (T_T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#l2-4","title":"L2-4 \u54f2\u54f2\u6253\u6e38\u620f","text":""},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_32","title":"\u6807\u7b7e","text":"<p>\u6a21\u62df</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_33","title":"\u601d\u8def","text":"<p>\u5bf9\u4e8e\u6bcf\u4e2a\u64cd\u4f5c\u8fdb\u884c\u6a21\u62df\u5373\u53ef\uff0c\u8bb0\u5f55\u5b58\u6863\u70b9\u53ea\u9700\u4fdd\u5b58\u5f53\u524d\u72b6\u6001\uff0c\u4e0d\u7528\u4fdd\u5b58\u662f\u5982\u4f55\u5230\u8fbe\u7684\u8fd9\u4e2a\u72b6\u6001</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_34","title":"\u4ee3\u7801","text":"C++<pre><code>#include &lt;bits/stdc++.h&gt;\n#define rep(i, j, k) for(int i = (j); i &lt;= (k); i++)\n#define per(i, k, j) for(int i = (k); i &gt;= (j); i--)\n#define ll long long\nusing namespace std;\nconst int N = 1e5 + 5;\nint n, m;\nint k[N];\nvector&lt;int&gt; ed[N];\nint rec[105];\nvoid solve()\n{\n    cin &gt;&gt; n &gt;&gt; m;\n    rep(i, 1, n) {\n        cin &gt;&gt; k[i];\n        ed[i].push_back(-1); // \u4e3a\u4e86\u505a\u51fa\u9009\u62e9\u7684\u4e0b\u6807\u4ece 1 \u5f00\u59cb\n        rep(j, 1, k[i]) {\n            int a;\n            cin &gt;&gt; a;\n            ed[i].push_back(a);\n        }\n    }\n    int now = 1;\n    rep(i, 1, m) {\n        int op, j;\n        cin &gt;&gt; op &gt;&gt; j;\n        if (op == 0) { // make choice\n            now = ed[now][j];\n        }\n        else if (op == 1) { // save\n            rec[j] = now;\n            cout &lt;&lt; now &lt;&lt; '\\n';\n        }\n        else if (op == 2) { // read\n            now = rec[j];\n        }\n\n    }\n    cout &lt;&lt; now;\n}\nint main()\n{\n    int T_T = 1;\n    // cin &gt;&gt; T_T;\n    while (T_T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#l3-1","title":"L3-1 \u68ee\u68ee\u65c5\u6e38","text":""},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_35","title":"\u6807\u7b7e","text":"<p>\u56fe\u8bba\uff0c\u7ebf\u6bb5\u6811\uff0c\u6570\u636e\u7ed3\u6784</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_36","title":"\u601d\u8def","text":"<p>\u9996\u5148\u5bf9\u652f\u4ed8\u73b0\u91d1\u7684\u7ebf\u8def\u5efa\u56fe</p> <p>\u56e0\u4e3a\u5982\u679c\u8981\u5151\u6362\u65c5\u6e38\u91d1\uff0c\u5c31\u9700\u8981\u628a\u624b\u4e2d\u73b0\u91d1\u5168\u90e8\u5151\u6362\u3002\u6240\u4ee5\u8003\u8651\u652f\u4ed8\u65c5\u6e38\u91d1\u7684\u7ebf\u8def\u53cd\u5411\u5efa\u56fe\uff0c \u7136\u540e\u5206\u522b\u4ece\u8d77\u70b9\u548c\u7ec8\u70b9\u8dd1\u4e00\u8fb9 dijkstra, \u518d\u904d\u5386 n \u4e2a\u70b9\u5f97\u5230\u521d\u59cb\u7b54\u6848\uff0c\u7528 map+set \u6216\u76f4\u63a5 multiset \u6765\u5b58\u50a8\uff0c\u65b9\u4fbf\u627e\u5230\u6700\u5c0f\u503c\uff08\u597d\u5427\u6211\u4e0d\u4f1a\u7ebf\u6bb5\u6811\uff09. \u5728\u6bcf\u4e2a\u70b9\u7684\u7b54\u6848\uff08\u9700\u8981\u7684\u73b0\u91d1\uff09\u662f dis1[i] + ceil(dis2[i] / a) \uff08\u5411\u4e0a\u53d6\u6574\uff09</p> <p>\u6bcf\u6b21\u66f4\u65b0\u7684\u65f6\u5019\u53ea\u9700\u8981\u5224\u65ad\u88ab\u66f4\u65b0\u6389\u7684\u7b54\u6848\u662f\u5426\u4e3a\u552f\u4e00\u6781\u5c0f\u503c\uff0c\u5982\u679c\u662f\uff0c\u5219\u66f4\u65b0\u7b54\u6848\u3002</p> <p>ps: \u611f\u89c9\u7ebf\u6bb5\u6811\u5e94\u8be5\u66f4\u5feb\uff0c\u6211\u8fd9\u65b9\u6cd5\u6709\u4e00\u4e2a test \u5230\u4e86 937ms \u9a6c\u4e0a\u8d85\u65f6\u4e86\uff0c\u4f46\u662f\u4e0d\u4f1a\u7ebf\u6bb5\u6811</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_37","title":"\u4ee3\u7801","text":"C++<pre><code>#include &lt;bits/stdc++.h&gt;\n#define rep(i, j, k) for(int i = (j); i &lt;= (k); i++)\n#define per(i, k, j) for(int i = (k); i &gt;= (j); i--)\n#define lson (x &lt;&lt; 1)\n#define rson (x &lt;&lt; 1 | 1)\n#define ll long long\nusing namespace std;\nconst int N = 1e5 + 5;\nconst ll llinf = 0x3f3f3f3f3f3f3f3f;\nstruct edge {\n    int v;\n    ll w;\n};\nstruct node {\n    ll dis;\n    int u;\n    bool operator&gt;(const node&amp; a) const { return dis &gt; a.dis; }\n};\nvector&lt;edge&gt; ed1[N], ed2[N];\nll dis1[N], dis2[N], ans[N], a[N];\nbool vis1[N], vis2[N];\nint n, m, q;\nvoid dijkstra() {\n    memset(dis1, llinf, sizeof(dis1));\n    memset(dis2, llinf, sizeof(dis2));\n    priority_queue&lt;node, vector&lt;node&gt;, greater&lt;node&gt; &gt; q;\n    q.push({0, 1});\n    dis1[1] = 0;\n    while (!q.empty()) {\n        int u = q.top().u;\n        q.pop();\n        if (vis1[u]) continue;\n        vis1[u] = 1;\n        for (auto e : ed1[u]) {\n            int v = e.v;\n            ll w = e.w;\n            if (dis1[v] &gt; dis1[u] + w) {\n                dis1[v] = dis1[u] + w;\n                q.push({dis1[v], v});\n            }\n        }\n    }\n    // \u4e5f\u53ef\u4ee5\u4f7f\u7528\u4f20\u53c2\u7684\u65b9\u5f0f\u53ea\u5199\u4e00\u904d\uff0c\u8fd9\u91cc\u76f4\u63a5\u590d\u5236\u4e86\n    priority_queue&lt;node, vector&lt;node&gt;, greater&lt;node&gt; &gt; qq;\n    qq.push({0, n});\n    dis2[n] = 0;\n    while (!qq.empty()) {\n        int u = qq.top().u;\n        qq.pop();\n        if (vis2[u]) continue;\n        vis2[u] = 1;\n        for (auto e : ed2[u]) {\n            int v = e.v;\n            ll w = e.w;\n            if (dis2[v] &gt; dis2[u] + w) {\n                dis2[v] = dis2[u] + w;\n                qq.push({dis2[v], v});\n            }\n        }\n    }\n}\nmap&lt;ll, int&gt; mp;\nset&lt;ll&gt; st;\nll mn = llinf;\nvoid solve()\n{\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;\n    while (m--) {\n        int u, v;\n        ll c, d;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; c &gt;&gt; d;\n        ed1[u].push_back({v, c});\n        ed2[v].push_back({u, d}); // \u65c5\u6e38\u91d1\u53cd\u5411\u5efa\u56fe\n    }\n    dijkstra();\n    rep(i, 1, n) {\n        cin &gt;&gt; a[i];\n        if (dis1[i] == llinf || dis2[i] == llinf) { ans[i] = llinf; continue; } // \u8d70\u4e0d\u901a\u7684\u4e0d\u7528\u7ba1\n        else ans[i] = dis1[i] + dis2[i] / a[i] + (dis2[i] % a[i] ? 1 : 0); // \u5411\u4e0a\u53d6\u6574\uff0c\u4e0d\u80fd\u6574\u9664\u5c31\u52a0 1\n        mn = min(mn, ans[i]);\n        mp[ans[i]]++;\n        if (mp[ans[i]] == 1) st.insert(ans[i]);\n    }\n    while (q--) {\n        int x;\n        ll b;\n        cin &gt;&gt; x &gt;&gt; b;\n        if (dis1[x] != llinf &amp;&amp; dis2[x] != llinf) {\n            ll t = dis1[x] + dis2[x] / b + (dis2[x] % b ? 1 : 0);\n            mp[t]++;\n            if (mp[t] == 1) st.insert(t);\n            mp[ans[x]]--;\n            if (mp[ans[x]] == 0) {\n                st.erase(st.find(ans[x])); // \u5df2\u7ecf\u6ca1\u6709\u8fd9\u4e2a\u60c5\u51b5\u4e86\uff0c\u5220\u9664\u8fd9\u4e2a\u6570\n            }\n            mn = *st.begin(); // \u66f4\u65b0\u6700\u5c0f\u503c\n            ans[x] = t; // \u66f4\u65b0\u8fd9\u4e2a\u70b9\u7684\u7b54\u6848\n        }\n        cout &lt;&lt; mn &lt;&lt; '\\n';\n    }\n}\nint main()\n{\n    solve();\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#l3-2","title":"L3-2 \u8fd8\u539f\u6587\u4ef6","text":""},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_38","title":"\u6807\u7b7e","text":"<p>\u6a21\u62df\uff0c\u641c\u7d22</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_39","title":"\u601d\u8def","text":"<p>\u9898\u76ee\u8bf4\u4e86\u552f\u4e00\u89e3\uff0c\u8bf4\u660e\u4e0d\u5b58\u5728\u76f8\u540c\u60c5\u51b5\u7684\u4e24\u4e2a\u7eb8\u6761\u3002\u6240\u4ee5\u76f4\u63a5\u66b4\u529b\u5faa\u73af\u5339\u914d\uff0c\u76f4\u5230\u6240\u6709\u7eb8\u6761\u90fd\u5339\u914d\u5230\u76f8\u5e94\u4f4d\u7f6e</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_40","title":"\u4ee3\u7801","text":"C++<pre><code>#include &lt;bits/stdc++.h&gt;\n#define rep(i, j, k) for(int i = (j); i &lt;= (k); i++)\n#define per(i, k, j) for(int i = (k); i &gt;= (j); i--)\n#define ll long long\nusing namespace std;\nconst int N = 1e5 + 5;\nint n, m;\nint cnt[105], a[N];\nvector&lt;int&gt; h[105];\nint vis[N];\nvoid dfs(int x) {\n    if (x == m + 1) {\n        int p = 1, num = 0;\n        vector&lt;int&gt; res;\n        while (p &lt;= n) {\n            if (vis[p] == 0) {\n                p++;\n                continue;\n            }\n            if (num == 0) {\n                res.push_back(vis[p]);\n                p++;\n                num++;\n            }\n            else {\n                if (vis[p] == res[num - 1])\n                    p++;\n                else {\n                    res.push_back(vis[p]);\n                    p++, num++;\n                }\n            }\n        }\n        rep(i, 0, num - 1) {\n            if (i) cout &lt;&lt; \" \";\n            cout &lt;&lt; res[i];\n        }\n        exit(0);\n    }\n    rep(i, 1, n) {\n        if (a[i + cnt[x] - 1] != h[x][cnt[x] - 1]) continue;\n        bool flag = 1;\n        rep(j, 0, cnt[x] - 2) {\n            if (vis[i + j] || a[i + j] != h[x][j]) {\n                flag = 0;\n                break;\n            }\n        }\n        if (flag == 0) continue; // \u4e0d\u5b8c\u5168\u5339\u914d\uff0c\u8df3\u8fc7\n        rep(j, 0, cnt[x] - 2) vis[i + j] = x; // \u6700\u5de6\u7aef\u4e0d\u6807\u8bb0\uff0c\u9632\u6b62\u7279\u6b8a\u60c5\u51b5\u65e0\u6cd5\u6807\u8bb0\uff08\u5982 k == 2\uff09\n        dfs(x + 1);\n        rep(j, 0, cnt[x] - 2) vis[i + j] = 0; // \u56de\u6eaf\n    }\n}\nvoid solve()\n{\n    cin &gt;&gt; n;\n    rep(i, 1, n) {\n        cin &gt;&gt; a[i];\n    }\n    cin &gt;&gt; m;\n    rep(i, 1, m) {\n        cin &gt;&gt; cnt[i];\n        rep(j, 1, cnt[i]) { \n            int x;\n            cin &gt;&gt; x;\n            h[i].push_back(x);\n        }\n    }\n    dfs(1);\n}\nint main()\n{\n    int T_T = 1;\n    // cin &gt;&gt; T_T;\n    while (T_T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#l3-3","title":"L3-3 \u53ef\u601c\u7684\u7b80\u5355\u9898","text":""},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_41","title":"\u6807\u7b7e","text":"<p>\u6570\u8bba</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/GPLT/2021_final/#_42","title":"\u601d\u8def","text":"<p>\u4e0d\u4f1a\uff0c\u5148\u9e3d\u4e86 QAQ</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/XCPC/24_CCPC_Harbin_B/","title":"24 CCPC Harbin B","text":"<p>\u9898\u76ee\u94fe\u63a5</p> <p>QOJ</p> <p>CF GYM</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/XCPC/24_CCPC_Harbin_B/#_1","title":"\u9898\u76ee\u5927\u610f","text":"<p>\u7ed9\u5b9a\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u70b9\u96c6\uff0c\u8981\u6c42\u9009\u62e9\u82e5\u5e72\u4e2a\u70b9\u4ee5\u53ca\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u987a\u5e8f\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u70b9\u8fde\u6210\u4e00\u4e2a\u9762\u79ef\u4e25\u683c\u5927\u4e8e 0 \u7684\u7b80\u5355\u51f9\u591a\u8fb9\u5f62\uff0c\u6700\u5927\u5316\u8fd9\u4e2a\u51f9\u591a\u8fb9\u5f62\u7684\u9762\u79ef\u3002 \\(1 \\leq n \\leq 10^5\\)\u3002</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/XCPC/24_CCPC_Harbin_B/#_2","title":"\u601d\u8def\uff08\u5b98\u65b9\u9898\u89e3\uff09","text":"<p>\u9996\u5148\u53ef\u4ee5\u53d1\u73b0\uff0c\u6211\u4eec\u4e00\u5b9a\u4f1a\u9009\u62e9\u5230\u51f8\u5305\u4e0a\u7684\u6240\u6709\u70b9\uff0c\u5982\u679c\u6ca1\u9009\u5b8c\uff0c\u90a3\u4e48\u9009\u4e0a\uff0c\u5c06\u51f8\u5305\u4e0a\u7684\u70b9\u6309\u7167\u6781\u89d2\u5e8f\u63d2\u5165\u8fd9\u4e9b\u70b9\u5185\uff0c\u4e00\u5b9a\u4e0d\u4f1a\u4f7f\u5f97\u51f9\u5305\u53d8\u6210\u51f8\u5305\uff0c\u5e76\u4e14\u4f1a\u4f7f\u9762\u79ef\u589e\u5927\u3002</p> <p>\u8003\u8651\u73b0\u5728\u5df2\u7ecf\u6709\u4e00\u4e2a\u51f8\u5305\u4e86\uff0c\u6211\u4eec\u8981\u9009\u62e9\u4e00\u4e9b\u5269\u4e0b\u7684\u70b9\u63d2\u5230\u51f8\u5305\u7684\u70b9\u4e4b\u95f4\u3002\u9996\u5148\u662f\u4e00\u4e9b\u9000\u5316\u7684\u60c5\u51b5\uff0c\u5982\u679c\u6240\u6709\u70b9\u90fd\u5728\u51f8\u5305\u4e0a\u90a3\u4e00\u5b9a\u4e0d\u5408\u6cd5\u3002\u5426\u5219\u4efb\u610f\u987a\u5e8f\u63d2\u5165\u4efb\u610f\u4e00\u4e2a\u70b9\u90fd\u80fd\u4f7f\u5f97\u51f8\u5305\u53d8\u6210\u51f9\u5305\uff0c\u56e0\u4e3a\u8981\u6700\u5927\u5316\u9762\u79ef\uff0c\u800c\u6bcf\u63d2\u5165\u4e00\u4e2a\u70b9\u80af\u5b9a\u90fd\u4f1a\u51cf\u5c11\u9762\u79ef\uff0c\u6240\u4ee5\u6211\u4eec\u81f3\u591a\u53ea\u4f1a\u63d2\u5165\u4e00\u4e2a\u70b9\u8bbe\u4e3a \\(x\\)\u3002</p> <p>\u6211\u4eec\u4e5f\u4e0d\u4f1a\u6539\u53d8\u539f\u6765\u7684\u8fde\u63a5\u987a\u5e8f\uff0c\u53ea\u4f1a\u5c06\u539f\u6765\u7684\u4e00\u6761\u8fb9 \\((a,b)\\) \u53d8\u6210 \\((a,x),(x,b)\\) \uff0c\u51cf\u5c11\u7684\u9762\u79ef\u5c31\u662f \\(|ab| \\cdot dis(x,ab)\\)\uff0c\\(dis\\) \u5373\u70b9 \\(x\\) \u5230\u76f4\u7ebf \\(ab\\) \u7684\u8ddd\u79bb\uff0c\u76f4\u63a5\u679a\u4e3e\u6240\u6709\u8fb9\u548c \\(x\\) \u663e\u7136\u4f1a\u8d85\u65f6\u3002</p> <p>\u4f46\u53ef\u4ee5\u53d1\u73b0\uff0c\u6700\u4f18\u7684 \\(x\\) \u4e00\u5b9a\u662f\u5220\u53bb\u51f8\u5305\u4e4b\u540e\uff0c\u5269\u4e0b\u7684\u70b9\uff0c\u7ec4\u6210\u7684\u51f8\u5305\u4e0a\u7684\u70b9\uff08\u5982\u679c\u4e0d\u9000\u5316\uff09\uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u5c3d\u91cf\u6700\u5c0f\u5316 \\(dis(x,ab)\\) \u3002</p> <p>\u800c\u5bf9\u6240\u6709\u8fb9\u627e\u5230\u51f8\u5305\u4e0a\u8ddd\u79bb\u8fd9\u4e2a\u8fb9\u6700\u8fd1\u7684\u70b9\uff0c\u53ef\u4ee5\u76f4\u63a5\u53cc\u6307\u9488\u7ef4\u62a4\uff0c\u5bf9\u4e8e\u6bcf\u6761\u5916\u5c42\u51f8\u5305\u7684\u8fb9\uff0c\u7ef4\u62a4\u8ddd\u79bb\u6700\u8fd1\u7684\u70b9\uff0c\u8ba1\u7b97\u63d2\u5165\u8fd9\u4e2a\u70b9\u540e\u51cf\u5c0f\u7684\u9762\u79ef\uff0c\u53d6\u6700\u5c0f\u503c\uff0c\u4f9d\u6b21\u79fb\u52a8\u8fb9\u4e4b\u540e\u6700\u8fd1\u70b9\u7684\u53d8\u5316\u5373\u53ef\u3002\u6ce8\u610f\u53ef\u80fd\u9700\u8981\u5904\u7406\u5185\u5c42\u51f8\u5305\u9000\u5316\u4e3a\u4e00\u4e2a\u6216\u4e24\u4e2a\u70b9\u7684\u60c5\u51b5\u3002</p> <p>\u590d\u6742\u5ea6 \\(O(n \\log n)\\)\u3002</p>"},{"location":"algorithm/%E9%A2%98%E8%A7%A3/XCPC/24_CCPC_Harbin_B/#_3","title":"\u4ee3\u7801\u5b9e\u73b0","text":"C++<pre><code>#include &lt;bits/stdc++.h&gt;\n#define ll long long\nusing namespace std;\nconst int N = 1e5 + 5;\n\nconst double pi = acos(-1.0);\nconst double eps = 1e-8;\n\n// \u5224\u65ad x \u7684\u5927\u5c0f\uff0c&lt;0 \u8fd4\u56de -1\uff0c&gt;0 \u8fd4\u56de 1\uff0c==0 \u8fd4\u56de 0\nint sgn(ll x) {\n    if (abs(x) == 0) return 0;\n    else return x &lt; 0 ? -1 : 1;\n}\n\nstruct Point {\n    ll x, y;\n    Point() {}\n    Point(ll x, ll y) : x(x), y(y) {}\n\n    Point operator + (const Point&amp; B) const { return Point(x + B.x, y + B.y); }\n    Point operator - (const Point&amp; B) const { return Point(x - B.x, y - B.y); }\n\n    bool operator == (const Point&amp; B) const {\n        return sgn(x - B.x) == 0 &amp;&amp; sgn(y - B.y) == 0;\n    }\n    bool operator &lt; (const Point&amp; B) const {\n        return sgn(x - B.x) &lt; 0 || sgn(x - B.x) == 0 &amp;&amp; sgn(y - B.y) &lt; 0;\n    }\n};\ntypedef Point Vector;\n\nclass Geometry {\npublic:\n    static double Distance(const Point&amp; A, const Point&amp; B) {\n        return sqrt((A.x - B.x) * (A.x - B.x) + (A.y - B.y) * (A.y - B.y));\n    }\n\n    static ll Cross(const Vector&amp; A, const Vector&amp; B) {\n        return A.x * B.y - A.y * B.x;\n    }\n\n    static ll Area2(const Point&amp; A, const Point&amp; B, const Point&amp; C) {\n        return Cross(B - A, C - A);\n    }\n};\n\nclass PolygonOps {\npublic:\n    static ll Area(int n, Point* ch) {\n        ll area = 0;\n        for (int i = 0; i &lt; n; i++)\n            area += Geometry::Cross(ch[i], ch[(i + 1) % n]);\n        return area;\n    }\n};\n\nint Convex_hull(Point* p, int n, Point* ch) {\n    sort(p, p + n);\n    int v = 0;\n    for (int i = 0; i &lt; n; i++) {\n        while (v &gt; 1 &amp;&amp; sgn(Geometry::Cross(ch[v - 1] - ch[v - 2], p[i] - ch[v - 1])) &lt;= 0) {\n            v--;\n        }\n        ch[v++] = p[i];\n    }\n    int j = v;\n    for (int i = n - 1; i &gt;= 0; i--) {\n        while (v &gt; j &amp;&amp; sgn(Geometry::Cross(ch[v - 1] - ch[v - 2], p[i] - ch[v - 1])) &lt;= 0) {\n            v--;\n        }\n        ch[v++] = p[i];\n    }\n    if (n &gt; 1) v--;\n    return v;\n}\n\nint n, n_left;\nPoint p[N], Left[N];\nPoint ch[N], chL[N]; // ch\u5b58\u5916\u51f8\u5305\uff0cchL\u5b58\u5185\u51f8\u5305\n\nvoid solve() {\n    cin &gt;&gt; n;\n    n_left = 0;\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; p[i].x &gt;&gt; p[i].y;\n    }\n    int v = Convex_hull(p, n, ch);\n    set&lt;Point&gt; st;\n    for (int i = 0; i &lt; v; i++) {\n        st.emplace(ch[i]);\n    }\n    for (int i = 0; i &lt; n; i++) {\n        if (!st.count(p[i])) {\n            Left[n_left++] = p[i]; // \u7528\u4e0d\u5728\u5916\u51f8\u5305\u4e0a\u7684\u70b9\u8dd1\u5185\u51f8\u5305\n        }\n    }\n    int vL = Convex_hull(Left, n_left, chL);\n    if (vL == 0) {\n        cout &lt;&lt; -1 &lt;&lt; '\\n';\n        return;\n    }\n    ll area = PolygonOps::Area(v, ch);\n    ll ans = 0;\n    ch[v] = ch[0];\n    chL[vL] = chL[0];\n    for (int i = 0, j = 0; i &lt; v; i++) {\n        // i \u679a\u4e3e\u5916\u51f8\u5305\u8fb9\uff0cj \u679a\u4e3e\u5185\u51f8\u5305\u70b9\n        // \u627e\u9762\u79ef\u6700\u5c0f\u4e09\u89d2\u5f62\uff0c\u5373\u627e\u5230 u \u8fb9\u8ddd\u79bb\u6700\u5c0f\u7684 j \u70b9\n        int nxt = (i + 1) % v;\n        auto u = Vector(ch[nxt] - ch[i]);\n\n        while (Geometry::Cross(u, chL[j] - ch[i]) &gt; Geometry::Cross(u, chL[(j + 1) % vL] - ch[i])) {\n            j = (j + 1) % vL;\n        }\n        while (Geometry::Cross(u, chL[j] - ch[i]) &gt; Geometry::Cross(u, chL[(j + vL - 1) % vL] - ch[i])) {\n            j = (j + vL - 1) % vL;\n        }\n\n        ll res = area - Geometry::Cross(u, chL[j] - ch[i]);\n        ans = max(res, ans);\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\nint main() {\n    ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);\n    int _T = 1;\n    cin &gt;&gt; _T;\n    while (_T--)\n        solve();\n    return 0;\n}\n</code></pre> <p>\u7cbe\u5ea6\u95ee\u9898</p> <p>\u8be5\u9898\u9700\u4f7f\u7528 longlong \u8ba1\u7b97\uff0c\u4f7f\u7528 double \u4f1a\u4ea7\u751f\u8bef\u5dee\u5bfc\u81f4 WA\u3002</p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/DDD%20%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%90%91%E4%B8%8A%E4%BE%9D%E8%B5%96%E9%A2%86%E5%9F%9F%E5%AF%BC%E8%87%B4%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E4%B8%8E%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/","title":"DDD \u57fa\u7840\u8bbe\u65bd\u5411\u4e0a\u4f9d\u8d56\u9886\u57df\u5bfc\u81f4\u4f9d\u8d56\u5012\u7f6e\u4e0e\u5faa\u73af\u5f15\u7528\u95ee\u9898","text":""},{"location":"develop/%E5%90%8E%E7%AB%AF/DDD%20%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%90%91%E4%B8%8A%E4%BE%9D%E8%B5%96%E9%A2%86%E5%9F%9F%E5%AF%BC%E8%87%B4%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E4%B8%8E%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/#_1","title":"\u95ee\u9898\u63cf\u8ff0","text":"<p>MVC \u67b6\u6784\u4e2d <code>service/impl/WeixinServiceImpl</code> \u7c7b\u4e2d\u6709\u65b9\u6cd5\uff1a  </p> Java<pre><code>@Override  \npublic void saveLoginState(String ticket, String openid) throws IOException {  \n    redissonCacheManager.getOpenidTicketMap().put(ticket, openid);\n\n    // 1. \u83b7\u53d6 access_token\n    RBucket&lt;String&gt; accessTokenBucket = redissonCacheManager.getAccessTokenBucket();\n    String accessToken = accessTokenBucket.get();\n    if (accessToken == null) {\n        Call&lt;WeixinTokenResponse&gt; call = weixinApiService.getToken(\"client_credential\", appid, appSecret);\n        WeixinTokenResponse weixinTokenResponse = call.execute().body();\n        ThrowUtils.throwIf(weixinTokenResponse == null, Constants.ResponseCode.UN_ERROR);\n        accessToken = weixinTokenResponse.getAccess_token();\n        // TODO: \u65b9\u6cd5\u5e9f\u5f03\uff0c\u4fee\u6539\u63a8\u8350\u65b9\u6cd5\n        accessTokenBucket.set(accessToken, 7200, TimeUnit.SECONDS);\n    }\n\n    // 2. \u53d1\u9001\u6a21\u677f\u6d88\u606f\n    Map&lt;String, Map&lt;String, String&gt;&gt; data = new HashMap&lt;&gt;();\n    WeixinTemplateMessageVO.put(data, WeixinTemplateMessageVO.TemplateKey.USER, openid);\n\n    WeixinTemplateMessageVO templateMessageDTO = new WeixinTemplateMessageVO(openid, templateId);\n    templateMessageDTO.setUrl(\"https://www.dopplerxd.top\");\n    templateMessageDTO.setData(data);\n\n    Call&lt;Void&gt; call = weixinApiService.sendMessage(accessToken, templateMessageDTO);\n    call.execute();\n}\n</code></pre> <p>\u6211\u8981\u628a\u8fd9\u4e2a\u65b9\u6cd5\u8fc1\u79fb\u5230 DDD \u4e2d\uff0c\u5b9e\u73b0\u7c7b\u4f4d\u4e8e <code>package site.dopplerxd.domain.auth.service</code> </p> Java<pre><code>@Resource  \nprivate ILoginPort loginPort;\n\n@Override  \npublic void saveLoginState(String ticket, String openid) throws IOException {  \n    redissonCacheManager.getOpenidTicketMap().put(ticket, openid);\n\n    // \u53d1\u9001\u5fae\u4fe1\u516c\u4f17\u53f7\u6a21\u677f\u6d88\u606f\n    loginPort.sendLoginTemplate(openid);\n}\n</code></pre> <p><code>interface ILoginPort</code> \u4f4d\u4e8e <code>package site.dopplerxd.domain.auth.adapter.port</code>\uff0c\u800c <code>class LoginPort</code> \u4f4d\u4e8e <code>package site.dopplerxd.infrastructure.adapter.port</code>\uff0c\u5728 <code>LoginPort</code> \u4e2d\u5b9e\u73b0\u65b9\u6cd5\uff1a</p> Java<pre><code>@Override  \npublic void sendLoginTemplate(String openid) throws IOException {  \n    // 1. \u83b7\u53d6 access_token  \n    RBucket accessTokenBucket = redissonCacheManager.getAccessTokenBucket();  \n    String accessToken = accessTokenBucket.get();  \n    if (accessToken == null) {  \n        Call call = weixinApiService.getToken(\"client_credential\", appid, appSecret);  \n        WeixinTokenResponseDTO weixinTokenResponse = call.execute().body();  \n        ThrowUtils.throwIf(weixinTokenResponse == null, Constants.ResponseCode.UN_ERROR);  \n        accessToken = weixinTokenResponse.getAccess_token();  \n        // TODO: \u65b9\u6cd5\u5e9f\u5f03\uff0c\u4fee\u6539\u63a8\u8350\u65b9\u6cd5  \n        accessTokenBucket.set(accessToken, 7200, TimeUnit.SECONDS);  \n    }\n\n    // 2. \u53d1\u9001\u6a21\u677f\u6d88\u606f\n    Map&lt;String, Map&lt;String, String&gt;&gt; data = new HashMap&lt;&gt;();\n    WeixinTemplateMessageDTO.put(data, WeixinTemplateMessageDTO.TemplateKey.USER, openid);\n\n    WeixinTemplateMessageDTO templateMessageDTO = new WeixinTemplateMessageDTO(openid, templateId);\n    templateMessageDTO.setUrl(\"https://www.dopplerxd.top\");\n    templateMessageDTO.setData(data);\n\n    Call&lt;Void&gt; call = weixinApiService.sendMessage(accessToken, templateMessageDTO);\n    call.execute();\n}\n</code></pre> <p>\u5982\u679c\u8fd9\u6837\u5199\u7684\u8bdd\uff0c\u6211\u7684 <code>RedissonCacheManager</code> \u5728 <code>infrastructure/redis</code> \u4e0b\uff0c\u4f46\u662f\u56e0\u4e3a\u4f9d\u8d56\u5012\u7f6e\uff0c\u6211\u7684 <code>infrastructure</code> \u5f15\u5165\u4e86 <code>domain</code> \u6a21\u5757\uff0c\u56e0\u6b64 <code>domain</code> \u4e0d\u80fd\u901a\u8fc7\u5f15\u5165 <code>infrastructure</code> \u6a21\u5757\u6765\u4f7f\u7528 <code>RedissonCacheManager</code> \uff0c\u5426\u5219\u4f1a\u5f15\u8d77\u5faa\u73af\u4f9d\u8d56\u95ee\u9898\u3002\u5982\u4f55\u89e3\u51b3\uff1f</p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/DDD%20%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%90%91%E4%B8%8A%E4%BE%9D%E8%B5%96%E9%A2%86%E5%9F%9F%E5%AF%BC%E8%87%B4%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E4%B8%8E%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/#chatgpt","title":"ChatGPT \u56de\u7b54","text":"<p>\u4f60\u9047\u5230\u7684\u8fd9\u4e2a\u95ee\u9898\u662f DDD \u4e2d\u975e\u5e38\u7ecf\u5178\u7684\u201c\u57fa\u7840\u8bbe\u65bd\u5411\u4e0a\u4f9d\u8d56\u9886\u57df\uff0c\u4f46\u9886\u57df\u4e0d\u5e94\u8be5\u4f9d\u8d56\u57fa\u7840\u8bbe\u65bd\u201d\u6240\u5bfc\u81f4\u7684\u4f9d\u8d56\u5012\u7f6e\u4e0e\u5faa\u73af\u5f15\u7528\u95ee\u9898\u3002</p> <p>\u4f60\u5f53\u524d\u7684\u8bbe\u8ba1\u601d\u8def\u662f\u5bf9\u7684\uff1a</p> <ul> <li> <p>\u5728 domain \u5c42\u5b9a\u4e49\u63a5\u53e3\uff08\u5982 <code>ILoginPort</code>\uff09\uff1b</p> </li> <li> <p>\u5728 infrastructure \u5c42\u5b9e\u73b0\u63a5\u53e3\uff08\u5982 <code>LoginPort</code>\uff09\uff1b</p> </li> <li> <p>\u8ba9 domain \u5c42\u7684\u670d\u52a1\u4f9d\u8d56\u63a5\u53e3\u800c\u4e0d\u662f\u5177\u4f53\u5b9e\u73b0\u3002</p> </li> </ul> <p>\u4e0d\u8fc7\u4f60\u8fd8\u9047\u5230\u4e86\u4e00\u4e2a\u5173\u952e\u95ee\u9898\uff1a</p> <p>\u2757 <code>RedissonCacheManager</code> \u4f4d\u4e8e <code>infrastructure.redis</code> \u4e0b\uff0c<code>LoginPort</code> \u4f4d\u4e8e <code>infrastructure.adapter.port</code> \u4e0b\uff0c\u540c\u5c5e\u4e00\u4e2a\u6a21\u5757\uff0c\u4f46\u4f7f\u7528\u4e86\u5b83\u8981\u88ab domain \u8c03\u7528\uff0c\u56e0\u6b64 domain \u4e0d\u80fd\u76f4\u63a5\u62ff\u8fd9\u4e2a Redis \u7684\u4f9d\u8d56\u3002</p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/DDD%20%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%90%91%E4%B8%8A%E4%BE%9D%E8%B5%96%E9%A2%86%E5%9F%9F%E5%AF%BC%E8%87%B4%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E4%B8%8E%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/#redissoncachemanager","title":"\u2705 \u89e3\u51b3\u65b9\u6848\uff1a\u901a\u8fc7\u63a5\u53e3 + \u4f9d\u8d56\u6ce8\u5165\u89e3\u8026 <code>RedissonCacheManager</code>","text":""},{"location":"develop/%E5%90%8E%E7%AB%AF/DDD%20%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%90%91%E4%B8%8A%E4%BE%9D%E8%B5%96%E9%A2%86%E5%9F%9F%E5%AF%BC%E8%87%B4%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E4%B8%8E%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/#domain-infrastructure","title":"\ud83c\udfaf \u76ee\u6807\uff1adomain \u5c42\u6c38\u8fdc\u4e0d\u76f4\u63a5\u4f9d\u8d56 <code>infrastructure</code>\uff0c\u800c\u662f\u901a\u8fc7\u63a5\u53e3\u4ea4\u4e92\u3002","text":""},{"location":"develop/%E5%90%8E%E7%AB%AF/DDD%20%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%90%91%E4%B8%8A%E4%BE%9D%E8%B5%96%E9%A2%86%E5%9F%9F%E5%AF%BC%E8%87%B4%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E4%B8%8E%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/#1-domain-redis","title":"\u2705 \u6b65\u9aa4 1\uff1a\u5728 domain \u5c42\u5b9a\u4e49 Redis \u8bbf\u95ee\u63a5\u53e3","text":"<p>\u4f8b\u5982\uff1a</p> Java<pre><code>// site.dopplerxd.domain.auth.adapter.cache.RedisTokenCachePort\npublic interface RedisTokenCachePort {\n    String getAccessToken();\n    void setAccessToken(String token, long ttlSeconds);\n    void putOpenidTicket(String ticket, String openid);\n}\n</code></pre>"},{"location":"develop/%E5%90%8E%E7%AB%AF/DDD%20%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%90%91%E4%B8%8A%E4%BE%9D%E8%B5%96%E9%A2%86%E5%9F%9F%E5%AF%BC%E8%87%B4%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E4%B8%8E%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/#2-infrastructureredis","title":"\u2705 \u6b65\u9aa4 2\uff1a\u5728 infrastructure.redis \u4e2d\u5b9e\u73b0\u8fd9\u4e2a\u63a5\u53e3","text":"Java<pre><code>// site.dopplerxd.infrastructure.redis.RedisTokenCacheAdapter\n\n@Component\npublic class RedisTokenCacheAdapter implements RedisTokenCachePort {\n\n    @Resource\n    private RedissonCacheManager redissonCacheManager;\n\n    @Override\n    public String getAccessToken() {\n        return redissonCacheManager.getAccessTokenBucket().get();\n    }\n\n    @Override\n    public void setAccessToken(String token, long ttlSeconds) {\n        redissonCacheManager.getAccessTokenBucket().set(token, ttlSeconds, TimeUnit.SECONDS);\n    }\n\n    @Override\n    public void putOpenidTicket(String ticket, String openid) {\n        redissonCacheManager.getOpenidTicketMap().put(ticket, openid);\n    }\n}\n</code></pre> <p>\ud83d\udccc \u73b0\u5728 <code>RedissonCacheManager</code> \u53ea\u5b58\u5728\u4e8e <code>infrastructure</code> \u5c42\uff0cdomain \u5c42\u6c38\u8fdc\u770b\u4e0d\u5230\u5b83\uff0c\u4e14\u6ca1\u6709\u5faa\u73af\u4f9d\u8d56\u3002</p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/DDD%20%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%90%91%E4%B8%8A%E4%BE%9D%E8%B5%96%E9%A2%86%E5%9F%9F%E5%AF%BC%E8%87%B4%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E4%B8%8E%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/#3-domain-redistokencacheport","title":"\u2705 \u6b65\u9aa4 3\uff1a\u5728 domain \u5c42\u6ce8\u5165 RedisTokenCachePort","text":"Java<pre><code>// site.dopplerxd.domain.auth.service.AuthDomainService\n\n@Service\npublic class AuthDomainService implements IAuthDomainService {\n\n    @Resource\n    private RedisTokenCachePort redisTokenCachePort;\n\n    @Resource\n    private ILoginPort loginPort;\n\n    @Override\n    public void saveLoginState(String ticket, String openid) throws IOException {\n        redisTokenCachePort.putOpenidTicket(ticket, openid);\n        loginPort.sendLoginTemplate(openid);\n    }\n}\n</code></pre>"},{"location":"develop/%E5%90%8E%E7%AB%AF/DDD%20%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%90%91%E4%B8%8A%E4%BE%9D%E8%B5%96%E9%A2%86%E5%9F%9F%E5%AF%BC%E8%87%B4%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E4%B8%8E%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/#_2","title":"\u2705 \u7ed3\u679c\u7ed3\u6784\u56fe","text":"Text Only<pre><code>domain/\n\u251c\u2500\u2500 auth/\n\u2502   \u251c\u2500\u2500 service/\n\u2502   \u2502   \u2514\u2500\u2500 AuthDomainService.java\n\u2502   \u2514\u2500\u2500 adapter/\n\u2502       \u251c\u2500\u2500 port/\n\u2502       \u2502   \u251c\u2500\u2500 ILoginPort.java\n\u2502       \u2502   \u2514\u2500\u2500 RedisTokenCachePort.java\n\ninfrastructure/\n\u251c\u2500\u2500 adapter/\n\u2502   \u2514\u2500\u2500 port/\n\u2502       \u2514\u2500\u2500 LoginPort.java   // \u5b9e\u73b0 ILoginPort\n\u251c\u2500\u2500 redis/\n\u2502   \u251c\u2500\u2500 RedissonCacheManager.java\n\u2502   \u2514\u2500\u2500 RedisTokenCacheAdapter.java  // \u5b9e\u73b0 RedisTokenCachePort\n</code></pre>"},{"location":"develop/%E5%90%8E%E7%AB%AF/DDD%20%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%90%91%E4%B8%8A%E4%BE%9D%E8%B5%96%E9%A2%86%E5%9F%9F%E5%AF%BC%E8%87%B4%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E4%B8%8E%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/#_3","title":"\u2705 \u603b\u7ed3","text":"\u505a\u6cd5 \u662f\u5426\u63a8\u8350 \u539f\u56e0 domain \u76f4\u63a5\u7528 <code>RedissonCacheManager</code> \u274c \u4e0d\u63a8\u8350 \u6253\u7834 DDD \u4f9d\u8d56\u5012\u7f6e\uff0c\u5f62\u6210\u5faa\u73af\u4f9d\u8d56 domain \u5b9a\u4e49 Redis \u63a5\u53e3\uff0cinfrastructure \u5b9e\u73b0 \u2705 \u63a8\u8350 \u6e05\u6670\u804c\u8d23\u5206\u79bb\uff0c\u4fdd\u6301\u4f9d\u8d56\u5012\u7f6e\uff0c\u7075\u6d3b\u6269\u5c55 RedisCacheManager \u7684\u65b9\u6cd5\u66b4\u9732\u7ed9 domain \u274c \u4e0d\u63a8\u8350 domain \u770b\u5230\u592a\u591a\u57fa\u7840\u8bbe\u65bd\u7ec6\u8282"},{"location":"develop/%E5%90%8E%E7%AB%AF/Date%20%E7%B1%BB%E5%9E%8B%E8%A7%A3%E6%9E%90%E9%94%99%E8%AF%AF/","title":"Date \u7c7b\u578b\u89e3\u6790\u9519\u8bef","text":""},{"location":"develop/%E5%90%8E%E7%AB%AF/Date%20%E7%B1%BB%E5%9E%8B%E8%A7%A3%E6%9E%90%E9%94%99%E8%AF%AF/#_1","title":"\u9519\u8bef\u65e5\u5fd7\u4e0e\u5206\u6790","text":"<p>\u521a\u521a\u505a\u9879\u76ee\uff0c\u9047\u5230\u62a5\u9519\u5982\u4e0b\uff1a</p> TypeScript<pre><code>25-05-24.00:27:16.861 [http-nio-8092-exec-10] WARN DefaultHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `java.util.Date` from String \"2025-12-23 13:15:02\": not a valid representation (error: Failed to parse Date value '2025-12-23 13:15:02': Cannot parse date \"2025-12-23 13:15:02\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSX', parsing fails (leniency? null)); nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.util.Date` from String \"2025-12-23 13:15:02\": not a valid representation (error: Failed to parse Date value '2025-12-23 13:15:02': Cannot parse date \"2025-12-23 13:15:02\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSX', parsing fails (leniency? null))&lt;EOL&gt; at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 6, column: 21] (through reference chain: site.dopplerxd.api.dto.SettlementMarketPayOrderRequestDTO[\"outTradeTime\"])]\n</code></pre> <p>\u770b\u8d77\u6765\u662f Jackson \u5728\u53cd\u5e8f\u5217\u5316 <code>Date</code> \u7c7b\u578b\u65f6\uff0c\u65e0\u6cd5\u5c06\u5b57\u7b26\u4e32 <code>\"2025-12-23 13:15:02\"</code> \u8f6c\u6362\u6210 <code>java.util.Date</code>\u3002</p> <p>\u6839\u672c\u539f\u56e0\uff1a\u9ed8\u8ba4\u7684 Jackson <code>ObjectMapper</code> \u4e0d\u652f\u6301 <code>yyyy-MM-dd HH:mm:ss</code> \u683c\u5f0f\u7684\u65e5\u671f\u5b57\u7b26\u4e32\u89e3\u6790\u4e3a <code>java.util.Date</code>\u3002</p> <p>Jackson \u5c1d\u8bd5\u5c06 <code>\"2025-12-23 13:15:02\"</code> \u89e3\u6790\u4e3a <code>java.util.Date</code>\uff0c\u4f46\u5931\u8d25\u4e86\uff1a</p> <ul> <li>\u5b83\u9ed8\u8ba4\u4f7f\u7528 ISO 8601 \u683c\u5f0f\uff1a<code>yyyy-MM-dd'T'HH:mm:ss.SSSX</code></li> <li>\u800c\u4f60\u7684\u8f93\u5165\u683c\u5f0f\u662f\uff1a<code>yyyy-MM-dd HH:mm:ss</code>\uff08\u7f3a\u5c11 <code>T</code>\uff09</li> </ul>"},{"location":"develop/%E5%90%8E%E7%AB%AF/Date%20%E7%B1%BB%E5%9E%8B%E8%A7%A3%E6%9E%90%E9%94%99%E8%AF%AF/#_2","title":"\u89e3\u51b3\u65b9\u5f0f","text":""},{"location":"develop/%E5%90%8E%E7%AB%AF/Date%20%E7%B1%BB%E5%9E%8B%E8%A7%A3%E6%9E%90%E9%94%99%E8%AF%AF/#_3","title":"\u4fee\u6539\u5165\u53c2","text":"<p>\u56e0\u4e3a\u6211\u662f\u5728\u4f7f\u7528 <code>Apifox</code> \u8fdb\u884c\u6d4b\u8bd5\u7684\u65f6\u5019\u51fa\u73b0\u7684\u8fd9\u4e2a\u9519\u8bef\uff0c\u53d1\u73b0 <code>Apifox</code> \u9ed8\u8ba4\u4f7f\u7528 <code>ISO 9075</code> \u6807\u51c6\u5bf9\u65e5\u671f\u65f6\u95f4\u5b57\u7b26\u4e32\u8fdb\u884c\u683c\u5f0f\u5316\uff0c\u5982 <code>2025-05-24 01:11:24</code>\u3002</p> <p>\u4f46\u662f\u5982\u4e0a\u6587\u6240\u8ff0\uff0cJackson \u9ed8\u8ba4\u4f7f\u7528 <code>ISO 8601</code> \u683c\u5f0f\uff0c\u5f62\u5982 <code>2025-05-23T17:12:03.848Z</code>\u3002</p> <p>\u4e8e\u662f\u6211\u5c06 <code>Apifox</code> \u4e2d\u7684 Mock \u8bbe\u7f6e\u4e2d\u7684\u65f6\u95f4\u683c\u5f0f\u4fee\u6539\u4e3a <code>ISO 8601</code> \u683c\u5f0f\uff0c\u89e3\u51b3\u4e86\u95ee\u9898\u3002</p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/Date%20%E7%B1%BB%E5%9E%8B%E8%A7%A3%E6%9E%90%E9%94%99%E8%AF%AF/#gpt-jsonformat","title":"GPT \u65b9\u6cd5\u4e00\uff1a\u4f7f\u7528 <code>@JsonFormat</code> \u6ce8\u89e3\u6307\u5b9a\u683c\u5f0f","text":"<p>\u5728 DTO \u7c7b\u7684 <code>Date</code> \u5b57\u6bb5\u4e0a\u6dfb\u52a0\u5982\u4e0b\u6ce8\u89e3\uff1a</p> Java<pre><code>@JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\", timezone = \"GMT+8\")\nprivate Date outTradeTime;\n</code></pre> <p>\u26a0\ufe0f \u6ce8\u610f\u65f6\u533a\uff08\u5982\u679c\u7528\u7684\u662f\u4e1c\u516b\u533a\uff09</p> <p>\u4f8b\u5982 <code>SettlementMarketPayOrderRequestDTO</code> \u5e94\u8be5\u8fd9\u6837\u5199\uff1a</p> Java<pre><code>@Data public class SettlementMarketPayOrderRequestDTO {\n      @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\", timezone = \"GMT+8\")\n     private Date outTradeTime;      \n     // \u5176\u4ed6\u5b57\u6bb5... \n }\n</code></pre>"},{"location":"develop/%E5%90%8E%E7%AB%AF/Date%20%E7%B1%BB%E5%9E%8B%E8%A7%A3%E6%9E%90%E9%94%99%E8%AF%AF/#gpt-objectmapper","title":"GPT \u65b9\u6cd5\u4e8c\uff1a\u81ea\u5b9a\u4e49 <code>ObjectMapper</code> \u7684\u5168\u5c40\u65f6\u95f4\u683c\u5f0f\uff08\u9002\u7528\u4e8e\u6574\u4e2a\u9879\u76ee\uff09","text":"<p>\u5728\u914d\u7f6e\u7c7b\u4e2d\u52a0\u4e00\u6bb5\uff1a</p> Java<pre><code>@Configuration\npublic class JacksonConfig {\n    @Bean     \n    public Jackson2ObjectMapperBuilderCustomizer customDateFormat() {\n        return builder -&gt; builder.simpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n    }\n}\n</code></pre> <p>\u6240\u6709 <code>Date</code> \u5b57\u6bb5\u5c06\u9ed8\u8ba4\u6309\u8fd9\u4e2a\u683c\u5f0f\u89e3\u6790\u3002</p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/Date%20%E7%B1%BB%E5%9E%8B%E8%A7%A3%E6%9E%90%E9%94%99%E8%AF%AF/#gpt-date-string","title":"GPT \u65b9\u6cd5\u4e09\uff1a\u5c06 <code>Date</code> \u5b57\u6bb5\u66ff\u6362\u4e3a <code>String</code>\uff0c\u624b\u52a8\u8f6c\u6362","text":"<p>\u5982\u679c\u4f60\u4e0d\u60f3\u8ba9 Jackson \u7ba1\u8fd9\u4e8b\uff0c\u53ef\u4ee5\u5148\u63a5\u6536\u4e3a\u5b57\u7b26\u4e32\uff0c\u518d\u624b\u52a8\u8f6c\u6210 Date\uff1a</p> Java<pre><code>private String outTradeTimeStr;  \npublic Date getOutTradeTime() {\n    try {         \n        return new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(outTradeTimeStr);     \n    } catch (ParseException e) { \n        return null;     \n    } \n}\n</code></pre>"},{"location":"develop/%E5%90%8E%E7%AB%AF/IDEA%20Spring%20initialer%20%E6%96%B0%E5%BB%BA%E6%A8%A1%E5%9D%97%E4%B8%8D%E8%83%BD%E9%80%89Java%208/","title":"IDEA Spring initialer \u65b0\u5efa\u6a21\u5757\u4e0d\u80fd\u9009Java 8","text":"<p>\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6211\u53ef\u4ee5\u8bbe\u7f6e\u9879\u76ee JDK \u4e3a 1.8\uff0c\u4f46\u662f\u4e0d\u80fd\u9009\u62e9 Java 8</p> <p></p> <p>\u539f\u56e0\u662f SpringBoot \u5728\u8f83\u9ad8\u7248\u672c\u4e0d\u652f\u6301 JDK 8 \u4e86\uff0c\u800c\u670d\u52a1\u5668 URL \u9ed8\u8ba4\u662f https://start.spring.io \uff0c\u6539\u6210 https://start.aliyun.com/ \u5c31\u53ef\u4ee5\u9009\u62e9 Java 8 \u4e86\u3002</p> <p></p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/IDEA%20mvn%20clean%20%E5%90%8E%20Annotation%20processors%20%E8%87%AA%E5%8A%A8%E5%A4%B1%E6%95%88/","title":"IDEA mvn clean \u540e Annotation processors \u81ea\u52a8\u5931\u6548","text":"<p>\u6211\u9047\u5230\u4e86 <code>@Data</code> \u6ce8\u89e3\u4e0d\u751f\u6548\u7684\u95ee\u9898\uff0c\u53d1\u73b0\u9700\u8981\u5728\u8bbe\u7f6e\u4e2d\u5c06 Annotation Processors \u4e2d Default \u548c\u5177\u4f53 profile \u7684\u9009\u9879\u90fd\u8bbe\u7f6e\u4e3a Obtain processors from project classpath\u3002</p> <p>\u4f46\u662f\u6bcf\u6b21 mvn clean \u4e4b\u540e\uff0cprofile  \u7684\u8bbe\u7f6e\u5c31\u5931\u6548\u3002</p> <p>\u518d\u6b21\u67e5\u8be2\u4e00\u756a\uff0c\u53d1\u73b0 <code>pom.xml</code> \u4e2d\u6ce8\u91ca\u76f8\u5e94\u8bed\u53e5\u80fd\u591f\u89e3\u51b3\u3002</p> <p>\u6d89\u53ca\u5230\u4e24\u9879\uff0c\u4e00\u4e2a\u662f\u8981\u5220\u9664 lombok \u4f9d\u8d56\u7684 optional \u9009\u9879\uff1b\u8fd8\u6709\u4e00\u4e2a\u662f\u8981\u6ce8\u91ca\u6389\u63d2\u4ef6\u4e2d\u7684 maven-compiler-plugin</p> XML<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n    &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n&lt;!--            &lt;optional&gt;true&lt;/optional&gt;--&gt;\n    &lt;version&gt;1.18.36&lt;/version&gt;\n    &lt;scope&gt;provided&lt;/scope&gt;\n&lt;/dependency&gt;\n\n&lt;build&gt;\n        &lt;plugins&gt;\n&lt;!--            &lt;plugin&gt;--&gt;\n&lt;!--                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;--&gt;\n&lt;!--                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;--&gt;\n&lt;!--                &lt;configuration&gt;--&gt;\n&lt;!--                    &lt;annotationProcessorPaths&gt;--&gt;\n&lt;!--                        &lt;path&gt;--&gt;\n&lt;!--                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;--&gt;\n&lt;!--                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;--&gt;\n&lt;!--                        &lt;/path&gt;--&gt;\n&lt;!--                    &lt;/annotationProcessorPaths&gt;--&gt;\n&lt;!--                &lt;/configuration&gt;--&gt;\n&lt;!--            &lt;/plugin&gt;--&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;excludes&gt;\n                        &lt;exclude&gt;\n                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n                        &lt;/exclude&gt;\n                    &lt;/excludes&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n</code></pre>"},{"location":"develop/%E5%90%8E%E7%AB%AF/IDEA%20%E5%BF%AB%E6%8D%B7%E9%94%AE/","title":"IDEA \u5feb\u6377\u952e","text":"<p>\u6298\u884c\uff1a<code>ctrl + shift + j</code></p> <p>\u9009\u62e9\u5305\u56f4\uff0c\u5982 <code>try-catch</code>\u3001<code>if-else</code> \u7b49\uff1a<code>ctrl + alt + t</code></p> <p>\u81ea\u52a8\u683c\u5f0f\u5316\u4ee3\u7801\uff1a<code>ctrl + alt + l</code></p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/Mybatis-Plus%20%E5%85%B3%E9%97%AD%E9%A9%BC%E5%B3%B0%E5%BC%8F%E5%91%BD%E5%90%8D%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%B8%8B%E5%88%92%E7%BA%BF/","title":"Mybatis Plus \u5173\u95ed\u9a7c\u5cf0\u5f0f\u547d\u540d\u8f6c\u6362\u4e3a\u4e0b\u5212\u7ebf","text":"<p>SpringBoot \u9879\u76ee\u4e2d\uff0c\u5b9e\u4f53 User \u5c5e\u6027 userAccount\uff0c\u6570\u636e\u5e93\u5b57\u6bb5\u4e5f\u4e3a userAccount\uff0c\u540e\u7aef\u62a5\u9519 Text Only<pre><code>### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Unknown column 'user_account' in 'field list'\n### The error may exist in site/dopplerxd/backend/mapper/UserMapper.java (best guess)\n### The error may involve site.dopplerxd.backend.mapper.UserMapper.insert-Inline\n### The error occurred while setting parameters\n### SQL: INSERT INTO user  ( id, user_account, user_password )  VALUES (  ?, ?, ?  )\n### Cause: java.sql.SQLSyntaxErrorException: Unknown column 'user_account' in 'field list'\n</code></pre> \u539f\u56e0\u662f Mybatis-Plus \u81ea\u52a8\u5c06\u9a7c\u5cf0\u5f0f\u547d\u540d\u8f6c\u6362\u4e3a\u4e0b\u5212\u7ebf\u4e86\uff0c\u89e3\u51b3\u65b9\u6cd5\u6709\u4e8c\uff1a 1. \u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bbe\u7f6e\u5173\u95ed\u5373\u53ef Text Only<pre><code>mybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: false\n</code></pre> 2. \u901a\u8fc7 @TableField \u6ce8\u91ca\u6765\u8bbe\u7f6e\u5c5e\u6027\u5bf9\u5e94\u7684\u5b57\u6bb5\u540d Java<pre><code>@Data\npublic class UserInfo {\n    @TableId(value = \"id\")\n    private Integer id;\n    @TableField(value = \"userAccount\")\n    private String userAccount;\n}\n</code></pre></p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/SpringBoot%20Test%20%E6%97%B6%E6%8A%A5%E9%94%99%20Failed%20to%20load%20ApplicationContext/","title":"SpringBoot Test \u65f6\u62a5\u9519 Failed to load ApplicationContext","text":"<p>\u6211\u5728\u6d4b\u8bd5\u65f6\u9047\u5230\u4e86 <code>Failed to load ApplicationContext</code> \u62a5\u9519\uff0c\u539f\u56e0\u662f</p> <p>\u89e3\u51b3\u65b9\u6cd5\uff1a</p> <p>\u5b8c\u5584\u6d4b\u8bd5\u7c7b\u7684\u6ce8\u89e3\uff0c\u6dfb\u52a0 <code>classes = {Application.class}, webEnvironment = SpringBootTest.WebEnvironment.NONE</code>\uff0c\u6bd4\u5982\u6211\u7684\u6d4b\u8bd5\u7c7b\u540d\u662f <code>ApiTest</code>\uff0c\u90a3\u4e48 <code>Application.class</code> \u5c31\u5199 <code>ApiTest.class</code>\u3002</p> Java<pre><code>@SpringBootTest(classes = {ApiTest.class}, webEnvironment = SpringBootTest.WebEnvironment.NONE)\nclass ApiTest {\n    ...\n}\n</code></pre>"},{"location":"develop/%E5%90%8E%E7%AB%AF/SpringBoot%20%E9%A1%B9%E7%9B%AE%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%80%E8%B7%AF%E5%BE%84/","title":"SpringBoot \u9879\u76ee\u8bbe\u7f6e\u5168\u5c40\u8def\u5f84","text":"<p>\u5728\u540e\u7aef\u5f00\u53d1\u4e2d\uff0c\u7ecf\u5e38\u8bbe\u7f6e\u8bf7\u6c42\u8def\u5f84\u4e3a <code>/api</code> \u5f00\u5934\uff0c\u5728 SpringBoot \u9879\u76ee\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 <code>application. yml</code> \u6216 <code>application.properties</code> \u6587\u4ef6\u6765\u5b9e\u73b0\u3002</p> <p>\u4ee5 <code>application. yml</code> \u4e3a\u4f8b\uff1a</p> Text Only<pre><code># 2.0 \u4ee5\u4e0a\nserver:\n  servlet:\n    context-path: /api\n\n# 2.0 \u4ee5\u4e0b\nserver:\n  context-path: /api\n</code></pre>"},{"location":"develop/%E5%90%8E%E7%AB%AF/SpringBoot3.x%20%E6%95%B4%E5%90%88%20Swagger-UI%20%2B%20Knife4j%20%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/","title":"SpringBoot3.x \u6574\u5408 Swagger UI + Knife4j \u63a5\u53e3\u6587\u6863","text":""},{"location":"develop/%E5%90%8E%E7%AB%AF/SpringBoot3.x%20%E6%95%B4%E5%90%88%20Swagger-UI%20%2B%20Knife4j%20%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/#_1","title":"\u4e00\u3001\u6dfb\u52a0\u5408\u9002\u7248\u672c\u7684\u4f9d\u8d56","text":"<p>\u4ee5 maven \u4e3a\u4f8b\uff1a XML<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;\n    &lt;artifactId&gt;knife4j-openapi3-jakarta-spring-boot-starter&lt;/artifactId&gt;\n    &lt;!-- \u9009\u62e9\u4e0e SpringDoc \u517c\u5bb9\u7684\u7248\u672c --&gt;\n    &lt;version&gt;4.4.0&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springdoc&lt;/groupId&gt;\n    &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;\n    &lt;!-- \u9009\u62e9\u7a33\u5b9a\u4e14\u517c\u5bb9\u7684\u7248\u672c --&gt;\n    &lt;version&gt;2.2.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/SpringBoot3.x%20%E6%95%B4%E5%90%88%20Swagger-UI%20%2B%20Knife4j%20%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/#_2","title":"\u4e8c\u3001\u8bbe\u7f6e\u914d\u7f6e\u6587\u4ef6","text":"Text Only<pre><code># springdoc-openapi\u9879\u76ee\u914d\u7f6e\nspringdoc:\n  swagger-ui:\n    path: /swagger-ui.html\n    tags-sorter: alpha\n    operations-sorter: alpha\n    enabled: true\n  api-docs:\n    path: /v3/api-docs\n    enabled: true\n  group-configs:\n    - group: 'default'\n      paths-to-match: '/**'\n      #\u751f\u6210\u6587\u6863\u6240\u9700\u7684\u626b\u5305\u8def\u5f84\uff0c\u4e00\u822c\u4e3a\u542f\u52a8\u7c7b\u76ee\u5f55\n      packages-to-scan: site.dopplerxd.backend\n# knife4j\u7684\u589e\u5f3a\u914d\u7f6e\uff0c\u4e0d\u9700\u8981\u589e\u5f3a\u53ef\u4ee5\u4e0d\u914d\n#knife4j\u914d\u7f6e\nknife4j:\n  #\u662f\u5426\u542f\u7528\u589e\u5f3a\u8bbe\u7f6e\n  enable: true\n  #\u5f00\u542f\u751f\u4ea7\u73af\u5883\u5c4f\u853d\n  production: false\n  #\u662f\u5426\u542f\u7528\u767b\u5f55\u8ba4\u8bc1\n  basic:\n    enable: true\n    username: admin\n    password: 123456\n  setting:\n    language: zh_cn\n    enable-version: true\n    enable-swagger-models: true\n    swagger-model-name: \u7528\u6237\u6a21\u5757\n</code></pre>"},{"location":"develop/%E5%90%8E%E7%AB%AF/SpringBoot3.x%20%E6%95%B4%E5%90%88%20Swagger-UI%20%2B%20Knife4j%20%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/#_3","title":"\u4e09\u3001\u6dfb\u52a0\u914d\u7f6e\u7c7b","text":"<p>\u8bbe\u7f6e SwaggerConfig.java\uff1a Java<pre><code>package site.dopplerxd.backend.config;\n\nimport io.swagger.v3.oas.models.OpenAPI;\nimport io.swagger.v3.oas.models.info.Contact;\nimport io.swagger.v3.oas.models.info.Info;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class SwaggerConfig {\n    @Bean\n    public OpenAPI swaggerOpenApi() {\n        return new OpenAPI()\n                .info(new Info().title(\"doppler's demo\")\n                        .description(\"\u57fa\u4e8e Knife4j OpenApi3 \u7684\u6d4b\u8bd5\u63a5\u53e3\u6587\u6863\")\n                        .version(\"v1.0.0\")\n                        .contact(new Contact().name(\"DopplerXD\")\n                                .email(\"1509209607@qq.com\")));\n    }\n}\n</code></pre></p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/SpringBoot3.x%20%E6%95%B4%E5%90%88%20Swagger-UI%20%2B%20Knife4j%20%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/#_4","title":"\u56db\u3001\u7f16\u5199\u6d4b\u8bd5\u63a5\u53e3","text":"Java<pre><code>package site.dopplerxd.backend.test;\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author doppleryxc\n */\n@RestController\n@Tag(name = \"\u7528\u6237\u63a5\u53e3\")\n@RequestMapping(\"/user\")\npublic class TestController {\n\n    @Operation(summary = \"\u7528\u6237\u4fe1\u606f\")\n    @GetMapping(\"/info\")\n    public String test(){\n        return \"User Info\";\n    }\n\n    @Operation(summary = \"\u4f60\u597d\")\n    @GetMapping(\"/hello\")\n    public Object test2(){\n        return \"hello\";\n    }\n}\n</code></pre> <p>\u6700\u540e\u542f\u52a8 SpringBoot \u9879\u76ee\u7684\u542f\u52a8\u7c7b\uff0c\u5bfc\u822a\u680f\u8f93\u5165 http://localhost:port/doc.html \u6253\u5f00\u63a5\u53e3\u6587\u6863 ![[assets/Pasted image 20250218215206.png]]</p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/git%20%E5%AF%BC%E5%87%BA%E5%B7%AE%E5%BC%82%20diff%20%E6%96%87%E4%BB%B6/","title":"Git \u5bfc\u51fa\u5dee\u5f02 diff \u6587\u4ef6","text":"<p>\u6700\u8fd1\u60f3\u8ba9 AI \u8bfb\u53d6\u4ed3\u5e93\u91cc\u7684\u63d0\u4ea4\u8bb0\u5f55\uff0c\u5e2e\u6211\u5206\u6790\u6574\u7406\u4e1a\u52a1\u6d41\u7a0b\u548c\u4ee3\u7801\u5b9e\u73b0\u3002\u4f46\u662f\u6709\u65f6\u5019\u4ed3\u5e93\u662f\u79c1\u6709\u7684\u4e0d\u80fd\u516c\u5f00\uff0c\u6240\u4ee5\u5c31\u60f3\u80fd\u4e0d\u80fd\u5bfc\u51fa\u4e24\u6b21\u63d0\u4ea4\u7684 diff \u6587\u4ef6\uff0c\u8ba9 AI \u8bfb diff \u6765\u751f\u6210\u6587\u6863\u3002</p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/git%20%E5%AF%BC%E5%87%BA%E5%B7%AE%E5%BC%82%20diff%20%E6%96%87%E4%BB%B6/#diff","title":"\u5bfc\u51fa\u4e34\u8fd1\u4e24\u4e2a\u63d0\u4ea4\u7684 diff","text":"<p>\u53ef\u4ee5\u4f7f\u7528 <code>git log</code> \u67e5\u770b\u63d0\u4ea4\u8bb0\u5f55\uff0c\u7136\u540e\u901a\u8fc7\u4ee5\u4e0b\u683c\u5f0f\u5bfc\u51fa\u4e24\u6b21\u63d0\u4ea4\u4e4b\u95f4\u7684 diff\uff1a</p> Text Only<pre><code>git diff [old commit id] [new commit id] &gt;&gt; [\u5bfc\u51fa\u7684\u6587\u4ef6\u540d\u79f0]\n</code></pre> <p>\u8fd9\u6837\uff0c\u5c06\u4f1a\u4fdd\u5b58\u4e24\u6b21\u63d0\u4ea4\u7684 diff \u5230\u6307\u5b9a\u6587\u4ef6\u3002</p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/git%20%E5%AF%BC%E5%87%BA%E5%B7%AE%E5%BC%82%20diff%20%E6%96%87%E4%BB%B6/#diff_1","title":"\u5bfc\u51fa\u672c\u5730\u4fee\u6539\u7684 diff","text":"<p>\u672c\u5730\u4fee\u6539\u4e86\u6587\u4ef6\uff0c\u8fd8\u6ca1\u6709\u8fdb\u884c <code>git add</code>\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5bfc\u51fa\uff1a</p> Text Only<pre><code>git diff [\u4fee\u6539\u7684\u6587\u4ef6\u6216\u6587\u4ef6\u5939] &gt;&gt; [\u5bfc\u51fa\u7684\u6587\u4ef6\u540d\u79f0]\n</code></pre>"},{"location":"develop/%E5%90%8E%E7%AB%AF/tree%20%E5%91%BD%E4%BB%A4%E7%94%9F%E6%88%90%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/","title":"Tree \u547d\u4ee4\u751f\u6210\u9879\u76ee\u76ee\u5f55\u7ed3\u6784","text":"<p>\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u6253\u5f00\u63a7\u5236\u53f0\uff0c\u8fd0\u884c</p> Bash<pre><code>tree . &gt; tr.txt\n</code></pre> <p>\u4fbf\u80fd\u751f\u6210\u6587\u4ef6\u7ed3\u6784\u3002</p> <p>\u5982\uff1a</p> <p></p> <p></p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E5%B8%B8%E8%A7%81%E6%9C%AF%E8%AF%AD%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%20DTO%20%26%20VO%20%26%20PO%20%26%20DO/","title":"\u5e38\u89c1\u672f\u8bed\uff1a\u4ec0\u4e48\u662f DTO & VO & PO & DO","text":"<p>DTO\u3001VO\u3001PO \u662f\u5206\u5c42\u67b6\u6784\uff08\u5c24\u5176\u662f\u7ed3\u5408 DDD\u3001Spring Boot \u9879\u76ee\uff09\u4e2d\u5e38\u89c1\u7684\u51e0\u79cd\u5bf9\u8c61\u7c7b\u578b\uff0c\u5b83\u4eec\u5206\u522b\u670d\u52a1\u4e8e\u4e0d\u540c\u7684\u5c42\uff0c\u804c\u8d23\u6e05\u6670\u3001\u8fb9\u754c\u660e\u786e\u3002</p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E5%B8%B8%E8%A7%81%E6%9C%AF%E8%AF%AD%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%20DTO%20%26%20VO%20%26%20PO%20%26%20DO/#dto-vo-po-do","title":"\u2705 \u4e00\u5f20\u8868\u5feb\u901f\u533a\u5206\uff1aDTO / VO / PO / DO","text":"\u540d\u79f0 \u5168\u79f0 \u4f5c\u7528 \u5178\u578b\u4f7f\u7528\u5c42 \u662f\u5426\u4e0e\u6570\u636e\u5e93\u6620\u5c04 DTO Data Transfer Object \u670d\u52a1/\u63a5\u53e3\u5c42\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\u5bf9\u8c61 Controller \u2194 App \u2194 Domain \u274c\uff08\u4e00\u822c\u4e0d\u76f4\u63a5\uff09 VO View Object \u7528\u4e8e\u524d\u7aef\u5c55\u793a\u7684\u6570\u636e\u5bf9\u8c61 API Controller \u274c PO Persistent Object \u6570\u636e\u5e93\u6301\u4e45\u5316\u5bf9\u8c61\uff08\u5bf9\u5e94\u8868\u7ed3\u6784\uff09 Infrastructure (DAO) \u2705 DO Domain Object / Entity \u9886\u57df\u5b9e\u4f53/\u503c\u5bf9\u8c61 Domain Layer \u274c\uff08\u81ea\u5df1\u63a7\u5236\uff09"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E5%B8%B8%E8%A7%81%E6%9C%AF%E8%AF%AD%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%20DTO%20%26%20VO%20%26%20PO%20%26%20DO/#_1","title":"\ud83d\udd0d \u5404\u5bf9\u8c61\u7c7b\u578b\u8be6\u7ec6\u89e3\u6790","text":""},{"location":"develop/%E5%90%8E%E7%AB%AF/%E5%B8%B8%E8%A7%81%E6%9C%AF%E8%AF%AD%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%20DTO%20%26%20VO%20%26%20PO%20%26%20DO/#1-dtodata-transfer-object","title":"1. \u2705 DTO\uff08Data Transfer Object\uff09","text":"<ul> <li>\u7528\u4e8e\u670d\u52a1\u5c42/\u8fdc\u7a0b\u8c03\u7528\u5c42\u4e4b\u95f4\u7684\u6570\u636e\u4ea4\u6362</li> <li>\u53ef\u4ee5\u7528\u4e8e\u8bf7\u6c42\u53c2\u6570\u6216\u63a5\u53e3\u8fd4\u56de</li> <li>\u901a\u5e38\u662f\u6241\u5e73\u7ed3\u6784\u3001\u4e0d\u5305\u542b\u4e1a\u52a1\u903b\u8f91</li> </ul> <p>\ud83d\udce6 \u793a\u4f8b\uff1a</p> Java<pre><code>public class UserDTO {\n    private Long id;\n    private String username;\n    private String email;\n}\n</code></pre> <p>\ud83e\udded \u4f7f\u7528\u573a\u666f\uff1a</p> <ul> <li>\u63a5\u53e3\u53c2\u6570\u4f20\u9012\uff08\u5982 <code>@RequestBody UserDTO</code>\uff09</li> <li>\u5fae\u670d\u52a1\u4e4b\u95f4\u7684 RPC \u901a\u4fe1\uff08Feign \u7b49\uff09</li> <li>\u5e94\u7528\u670d\u52a1\u4e0e\u9886\u57df\u670d\u52a1\u7684\u6570\u636e\u6865\u6881</li> </ul>"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E5%B8%B8%E8%A7%81%E6%9C%AF%E8%AF%AD%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%20DTO%20%26%20VO%20%26%20PO%20%26%20DO/#2-voview-object","title":"2. \u2705 VO\uff08View Object\uff09","text":"<ul> <li>\u7528\u4e8e\u6784\u5efa\u524d\u7aef\u9875\u9762/\u54cd\u5e94\u5c55\u793a\u7684\u6570\u636e\u6a21\u578b</li> <li>\u53ef\u80fd\u4f1a\u7ec4\u5408\u591a\u4e2a\u6570\u636e\u6e90\u3001\u52a0\u5de5\u5c55\u793a</li> <li>\u901a\u5e38\u662f\u53ea\u8bfb\u7684\u3001\u5c55\u73b0\u5c42\u4e13\u7528\u7684</li> </ul> <p>\ud83d\udce6 \u793a\u4f8b\uff1a</p> Java<pre><code>public class UserVO {\n    private String username;\n    private String avatarUrl;\n    private String roleName;\n}\n</code></pre> <p>\ud83e\udded \u4f7f\u7528\u573a\u666f\uff1a</p> <ul> <li><code>Controller</code> \u63a5\u53e3\u54cd\u5e94\u6570\u636e\u5c01\u88c5\uff08<code>Result&lt;UserVO&gt;</code>\uff09</li> <li>\u7528\u4e8e\u9875\u9762\u5c55\u793a\u5b57\u6bb5\uff0c\u4e0d\u4e00\u5b9a\u662f\u6570\u636e\u5e93\u5b57\u6bb5</li> </ul>"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E5%B8%B8%E8%A7%81%E6%9C%AF%E8%AF%AD%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%20DTO%20%26%20VO%20%26%20PO%20%26%20DO/#3-popersistent-object","title":"3. \u2705 PO\uff08Persistent Object\uff09","text":"<ul> <li>\u76f4\u63a5\u5bf9\u5e94\u6570\u636e\u5e93\u8868\u7ed3\u6784</li> <li>\u901a\u5e38\u662f MyBatis\u3001JPA \u7b49 ORM \u6846\u67b6\u6620\u5c04\u5bf9\u8c61</li> <li>\u5305\u542b\u6570\u636e\u5e93\u5b57\u6bb5\uff08\u53ef\u80fd\u8fd8\u6709\u4e00\u4e9b\u6ce8\u89e3\u5982 <code>@Table</code>\u3001<code>@Column</code>\uff09</li> </ul> <p>\ud83d\udce6 \u793a\u4f8b\uff1a</p> Java<pre><code>@Table(name = \"user\")\npublic class UserPO {\n    private Long id;\n    private String username;\n    private String password;\n    private LocalDateTime createTime;\n}\n</code></pre> <p>\ud83e\udded \u4f7f\u7528\u573a\u666f\uff1a</p> <ul> <li>DAO \u5c42 / Mapper \u5c42\u4f7f\u7528</li> <li>ORM \u6846\u67b6\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92</li> </ul>"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E5%B8%B8%E8%A7%81%E6%9C%AF%E8%AF%AD%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%20DTO%20%26%20VO%20%26%20PO%20%26%20DO/#4-dodomain-object-domain-entity","title":"4. \u2705 DO\uff08Domain Object / Domain Entity\uff09","text":"<ul> <li>\u9886\u57df\u6a21\u578b\u7684\u6838\u5fc3</li> <li>\u805a\u7126\u4e1a\u52a1\u884c\u4e3a\uff0c\u5305\u542b\u4e1a\u52a1\u903b\u8f91</li> <li>\u4e0d\u4f9d\u8d56\u6570\u636e\u5e93\uff0c\u4e0d\u5173\u5fc3\u6301\u4e45\u5316\u7ec6\u8282</li> </ul> <p>\ud83d\udce6 \u793a\u4f8b\uff1a</p> Java<pre><code>public class User {\n    private UserId id;\n    private UserName name;\n    private Email email;\n\n    public void changeEmail(Email newEmail) {\n        // domain logic\n        this.email = newEmail;\n    }\n}\n</code></pre> <p>\ud83e\udded \u4f7f\u7528\u573a\u666f\uff1a</p> <ul> <li>DDD \u9886\u57df\u6a21\u578b</li> <li>\u9886\u57df\u670d\u52a1\u4e2d\u7684\u64cd\u4f5c\u5bf9\u8c61</li> <li>\u4e0d\u7528\u4e8e\u66b4\u9732\u7ed9 Controller</li> </ul>"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E5%B8%B8%E8%A7%81%E6%9C%AF%E8%AF%AD%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%20DTO%20%26%20VO%20%26%20PO%20%26%20DO/#_2","title":"\ud83c\udfaf \u5bf9\u6bd4\u56fe\u89e3\uff08\u4ece\u524d\u7aef\u5230\u6570\u636e\u5e93\uff09\uff1a","text":"Text Only<pre><code> \u524d\u7aef\u8bf7\u6c42/\u54cd\u5e94\n     \u2191\u2193\n  Controller\n     \u2191\u2193      \u2190   \u4f7f\u7528 VO / DTO\n  Application Service\n     \u2191\u2193      \u2190   \u4f7f\u7528 DTO\n  Domain Service\n     \u2191\u2193      \u2190   \u4f7f\u7528 DO\uff08\u5b9e\u4f53/\u503c\u5bf9\u8c61\uff09\n Repository\uff08\u63a5\u53e3\uff09\n     \u2191\u2193\n  Infrastructure\uff08DAO / Mapper\uff09\n     \u2191\u2193      \u2190   \u4f7f\u7528 PO\uff08ORM\u6620\u5c04\uff09\n   \u6570\u636e\u5e93\n</code></pre>"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E5%B8%B8%E8%A7%81%E6%9C%AF%E8%AF%AD%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%20DTO%20%26%20VO%20%26%20PO%20%26%20DO/#_3","title":"\ud83e\udde0 \u5f00\u53d1\u5efa\u8bae","text":"\u5efa\u8bae \u8bf4\u660e \u274c \u4e0d\u8981\u6df7\u7528 DTO \u2260 VO \u2260 PO \u2260 DO\uff0c\u5404\u81ea\u804c\u8d23\u6e05\u6670 \u2705 \u7528 MapStruct \u7b49\u5de5\u5177\u505a\u8f6c\u6362 \u907f\u514d\u624b\u52a8\u5197\u957f\u7684\u62f7\u8d1d \u2705 Controller \u63a5\u53d7 DTO / \u8fd4\u56de VO \u4e0d\u76f4\u63a5\u66b4\u9732 Domain Entity \u6216 PO \u2705 \u9886\u57df\u5c42\u53ea\u4f7f\u7528 DO\uff0c\u4e0d\u4f9d\u8d56 DTO/PO"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E5%B8%B8%E8%A7%81%E6%9C%AF%E8%AF%AD%EF%BC%9A%E4%BB%80%E4%B9%88%E6%98%AF%20DTO%20%26%20VO%20%26%20PO%20%26%20DO/#_4","title":"\u2705 \u603b\u7ed3\u4e00\u53e5\u8bdd","text":"<p>DTO \u7528\u6765\u4f20\u6570\u636e\uff0cVO \u7528\u6765\u5c55\u793a\u6570\u636e\uff0cPO \u7528\u6765\u5b58\u6570\u636e\uff0cDO \u7528\u6765\u7ba1\u4e1a\u52a1\u3002</p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E6%8A%A5%E9%94%99%20Expression%201%20of%20SELECT%20list%20is%20not%20in%20GROUP%20BY%20clause%20and%20contains%20nonaggregated%20column/","title":"\u62a5\u9519 Expression 1 of SELECT list is not in GROUP BY clause and contains nonaggregated column","text":"<p>\u5728\u505a\u9879\u76ee\u65f6\uff0c\u9047\u5230\u4e00\u4e2a\u62a5\u9519\uff1a<code>SQLSyntaxErrorException: Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column</code></p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E6%8A%A5%E9%94%99%20Expression%201%20of%20SELECT%20list%20is%20not%20in%20GROUP%20BY%20clause%20and%20contains%20nonaggregated%20column/#_1","title":"\u9519\u8bef\u65e5\u5fd7\u4e0e\u76f8\u5173\u4ee3\u7801","text":"Text Only<pre><code>### Error querying database. Cause: java.sql.SQLSyntaxErrorException: Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'group_buy_market.group_buy_order_list.user_id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by ### The error may exist in file [E:\\DevelopLearning\\doppler-group-buy-market\\doppler-group-buy-market-app\\target\\classes\\mybatis\\mapper\\group_buy_order_list_mapper.xml] ### The error may involve site.dopplerxd.infrastructure.dao.IGroupBuyOrderListDao.queryInProgressUserGroupBuyOrderDetailListByActivityId-Inline ### The error occurred while setting parameters ### SQL: select user_id, team_id, out_trade_no from group_buy_order_list where activity_id = ? and status in (0, 1) group by team_id ### Cause: java.sql.SQLSyntaxErrorException: Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'group_buy_market.group_buy_order_list.user_id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by ; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'group_buy_market.group_buy_order_list.user_id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by\n</code></pre> <p>\u76f8\u5173 xml \u6587\u4ef6\uff1a</p> XML<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt; \n&lt;mapper namespace=\"site.dopplerxd.infrastructure.dao.IGroupBuyOrderListDao\"&gt; \n    &lt;resultMap id=\"dataMap\" type=\"site.dopplerxd.infrastructure.dao.po.GroupBuyOrderList\"&gt; \n        &lt;id column=\"id\" property=\"id\"/&gt; \n        &lt;result column=\"user_id\" property=\"userId\"/&gt; \n        &lt;result column=\"team_id\" property=\"teamId\"/&gt; \n        &lt;result column=\"order_id\" property=\"orderId\"/&gt; \n        &lt;result column=\"activity_id\" property=\"activityId\"/&gt; \n        &lt;result column=\"start_time\" property=\"startTime\"/&gt; \n        &lt;result column=\"end_time\" property=\"endTime\"/&gt; \n        &lt;result column=\"goods_id\" property=\"goodsId\"/&gt; \n        &lt;result column=\"source\" property=\"source\"/&gt; \n        &lt;result column=\"channel\" property=\"channel\"/&gt; \n        &lt;result column=\"original_price\" property=\"originalPrice\"/&gt; \n        &lt;result column=\"deduction_price\" property=\"deductionPrice\"/&gt; \n        &lt;result column=\"status\" property=\"status\"/&gt; \n        &lt;result column=\"out_trade_no\" property=\"outTradeNo\"/&gt; \n        &lt;result column=\"out_trade_time\" property=\"outTradeTime\"/&gt; \n        &lt;result column=\"biz_id\" property=\"bizId\"/&gt; \n        &lt;result column=\"create_time\" property=\"createTime\"/&gt; \n        &lt;result column=\"update_time\" property=\"updateTime\"/&gt; \n    &lt;/resultMap&gt; \n\n    &lt;select id=\"queryInProgressUserGroupBuyOrderDetailListByActivityId\" parameterType=\"java.lang.Long\" resultMap=\"dataMap\"&gt; select user_id, team_id, out_trade_no from group_buy_order_list where activity_id = #{activityId} and status in (0, 1) group by team_id \n    &lt;/select&gt;\n&lt;/mapper&gt;\n</code></pre>"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E6%8A%A5%E9%94%99%20Expression%201%20of%20SELECT%20list%20is%20not%20in%20GROUP%20BY%20clause%20and%20contains%20nonaggregated%20column/#gpt","title":"GPT \u56de\u7b54","text":"<p>\u4f60\u9047\u5230\u7684\u9519\u8bef\u662f\uff1a</p> <p><code>SQLSyntaxErrorException: Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'group_buy_order_list.user_id'</code></p> <p>\u8fd9\u6765\u81ea MySQL \u7684 SQL \u6a21\u5f0f\u8bbe\u7f6e\u4e3a <code>ONLY_FULL_GROUP_BY</code>\uff0c\u5728\u8be5\u6a21\u5f0f\u4e0b\uff0c\u4f60\u7684 SQL \u8bed\u53e5\u4e0d\u5408\u6cd5\u3002</p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E6%8A%A5%E9%94%99%20Expression%201%20of%20SELECT%20list%20is%20not%20in%20GROUP%20BY%20clause%20and%20contains%20nonaggregated%20column/#_2","title":"\ud83e\udde9 \u4e00\u3001\u95ee\u9898\u6839\u56e0","text":"<p>\u5728 MySQL \u4e2d\u6267\u884c\u5e26 <code>GROUP BY</code> \u7684\u67e5\u8be2\u65f6\uff1a</p> <ul> <li> <p>\u6807\u51c6 SQL \u8981\u6c42\uff1a<code>SELECT</code> \u4e2d\u7684\u5b57\u6bb5\u5fc5\u987b\u662f\uff1a</p> <ul> <li> <p>\u51fa\u73b0\u5728 <code>GROUP BY</code> \u4e2d\uff0c\u6216\u8005</p> </li> <li> <p>\u88ab\u805a\u5408\u51fd\u6570\u5305\u88f9\uff08\u5982\uff1a<code>MAX()</code>, <code>SUM()</code>, <code>COUNT()</code> \u7b49\uff09</p> </li> </ul> </li> </ul> <p>\u5426\u5219\u6570\u636e\u5e93\u65e0\u6cd5\u786e\u5b9a\uff1a\u4e00\u7ec4\u8bb0\u5f55\u4e2d\u8be5\u5b57\u6bb5\u8be5\u53d6\u54ea\u4e00\u6761\u7684\u503c\u3002</p> <p>MySQL 5.7 \u4ee5\u524d\u9ed8\u8ba4\u5141\u8bb8\u4f60\u201c\u968f\u4fbf\u9009\u4e00\u6761\u201d\uff0c\u4f46\u8fd9\u662f\u4e0d\u786e\u5b9a\u884c\u4e3a\u3002\u4ece 5.7 \u5f00\u59cb\uff0c\u5f00\u542f\u4e86 <code>ONLY_FULL_GROUP_BY</code> \u6a21\u5f0f\u540e\uff0c\u5c31\u4e0d\u518d\u5141\u8bb8\u8fd9\u79cd\u201c\u6a21\u7cca\u5b57\u6bb5\u201d\u7684\u5199\u6cd5\u3002</p> <p>\u4f60\u7684 SQL \u8bed\u53e5\u5982\u4e0b\uff1a</p> SQL<pre><code>SELECT user_id, team_id, out_trade_no\nFROM group_buy_order_list\nWHERE activity_id = #{activityId} AND status IN (0, 1)\nGROUP BY team_id\n</code></pre>"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E6%8A%A5%E9%94%99%20Expression%201%20of%20SELECT%20list%20is%20not%20in%20GROUP%20BY%20clause%20and%20contains%20nonaggregated%20column/#_3","title":"\u274c \u9519\u8bef\u70b9\uff1a","text":"<p>\u8fd9\u4e2a\u95ee\u9898\u662f MySQL \u5728\u542f\u7528\u4e86 <code>ONLY_FULL_GROUP_BY</code> \u6a21\u5f0f\u65f6\u5f3a\u5236\u6267\u884c SQL \u8bed\u4e49\u7684\u4e00\u79cd\u4fdd\u62a4\u673a\u5236\u3002\u5728 <code>ONLY_FULL_GROUP_BY</code> \u6a21\u5f0f\u4e0b\uff0c\u6240\u6709 SELECT \u5b57\u6bb5\u5fc5\u987b\u51fa\u73b0\u5728 GROUP BY \u4e2d\uff0c\u6216\u5fc5\u987b\u901a\u8fc7\u805a\u5408\u51fd\u6570\u5305\u88f9\uff08\u5982 <code>MAX()</code>, <code>MIN()</code> \u7b49\uff09\uff0c\u5426\u5219\u62a5\u9519\u3002</p> <p>\u4f60\u53ea <code>GROUP BY team_id</code>\uff0c\u4f46 <code>user_id</code> \u548c <code>out_trade_no</code> \u6ca1\u6709\u505a\u805a\u5408\u6216\u5305\u542b\u5728 GROUP BY \u4e2d\uff0cMySQL \u65e0\u6cd5\u5224\u65ad\u5e94\u8be5\u9009\u54ea\u4e2a <code>user_id</code> \u548c <code>out_trade_no</code>\u3002</p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E6%8A%A5%E9%94%99%20Expression%201%20of%20SELECT%20list%20is%20not%20in%20GROUP%20BY%20clause%20and%20contains%20nonaggregated%20column/#_4","title":"\u4e3e\u4f8b\u8bf4\u660e","text":"<p>\u5047\u8bbe\u6709\u4e00\u5f20\u8ba2\u5355\u8868 <code>orders</code>\uff1a</p> order_id user_id team_id 1 A 101 2 B 101 3 C 102 <p>\u4f60\u6267\u884c\u4ee5\u4e0b SQL\uff1a</p> SQL<pre><code>SELECT user_id, team_id FROM orders GROUP BY team_id;\n</code></pre> <p>\u4f60\u5e0c\u671b\u7684\u662f\uff1a</p> <ul> <li>\u6bcf\u4e2a <code>team_id</code> \u53ea\u4fdd\u7559\u4e00\u6761\u8bb0\u5f55</li> </ul> <p>\u4f46\u95ee\u9898\u662f\uff0c\u5bf9\u4e8e team_id = 101\uff0c\u6709\u4e24\u6761\u8bb0\u5f55\uff08user_id A \u548c B\uff09\uff0cMySQL \u4e0d\u77e5\u9053\u9009\u54ea\u4e00\u6761 user_id</p> <ul> <li>\u8fd9\u65f6\u5982\u679c\u6ca1\u6709 <code>ONLY_FULL_GROUP_BY</code>\uff0c\u5b83\u4f1a\u201c\u968f\u4fbf\u6311\u4e00\u6761\u201d\uff08\u53ef\u80fd\u662f A\uff0c\u4e5f\u53ef\u80fd\u662f B\uff0c\u751a\u81f3\u6bcf\u6b21\u90fd\u4e0d\u4e00\u6837\uff09</li> <li>\u4f46\u5f00\u542f\u4e86 <code>ONLY_FULL_GROUP_BY</code> \u6a21\u5f0f\uff0c\u5b83\u4f1a\u62a5\u9519\uff1a<code>user_id</code> \u4e0d\u5728 <code>GROUP BY</code> \u4e2d\uff0c\u4e5f\u6ca1\u805a\u5408\uff0c\u6211\u65e0\u6cd5\u51b3\u5b9a\u9009\u54ea\u4e2a</li> </ul>"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E6%8A%A5%E9%94%99%20Expression%201%20of%20SELECT%20list%20is%20not%20in%20GROUP%20BY%20clause%20and%20contains%20nonaggregated%20column/#_5","title":"\u2705 \u4e8c\u3001\u89e3\u51b3\u65b9\u5f0f","text":""},{"location":"develop/%E5%90%8E%E7%AB%AF/%E6%8A%A5%E9%94%99%20Expression%201%20of%20SELECT%20list%20is%20not%20in%20GROUP%20BY%20clause%20and%20contains%20nonaggregated%20column/#1","title":"\u2705 \u65b9\u6848 1\uff1a\u4f7f\u7528\u805a\u5408\u51fd\u6570\uff08\u63a8\u8350\uff09","text":"<p>\u6839\u636e\u4e1a\u52a1\u8bed\u4e49\uff0c\u5047\u8bbe\u4f60\u5e0c\u671b\u83b7\u53d6\u67d0\u4e2a <code>team_id</code> \u4e0b\u7684\u4e00\u6761\u8bb0\u5f55\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>MAX()</code> \u6216 <code>MIN()</code>\uff1a</p> SQL<pre><code>SELECT \n    MAX(user_id) AS user_id,\n    team_id,\n    MAX(out_trade_no) AS out_trade_no\nFROM group_buy_order_list\nWHERE activity_id = #{activityId} AND status IN (0, 1)\nGROUP BY team_id\n</code></pre> <p>\u8868\u793a\u6bcf\u4e2a <code>team_id</code> \u53ea\u9009 user_id \u6700\u5927\u7684\u90a3\u4e00\u6761\uff08\u6309\u5b57\u6bcd\u987a\u5e8f C &gt; B &gt; A\uff09\u3002</p> <p>\u2705 \u9002\u5408\u573a\u666f\uff1a\u4f60\u53ea\u9700\u8981\u6bcf\u4e2a <code>team_id</code> \u4e0b\u4efb\u610f\u4e00\u6761\u8bb0\u5f55\u5373\u53ef\u3002</p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E6%8A%A5%E9%94%99%20Expression%201%20of%20SELECT%20list%20is%20not%20in%20GROUP%20BY%20clause%20and%20contains%20nonaggregated%20column/#2-only_full_group_by","title":"\u2705 \u65b9\u6848 2\uff1a\u5173\u95ed ONLY_FULL_GROUP_BY\uff08\u4e0d\u63a8\u8350\u7ebf\u4e0a\u4f7f\u7528\uff09","text":"<p>\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e MySQL \u7684 <code>sql_mode</code> \u4e34\u65f6\u53d6\u6d88\u4e25\u683c\u6a21\u5f0f\uff1a</p> SQL<pre><code>SET sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));\n</code></pre> <p>\u26a0\ufe0f \u98ce\u9669\uff1a\u653e\u677e\u7ea6\u675f\u53ef\u80fd\u63a9\u76d6\u4e1a\u52a1\u903b\u8f91\u4e0d\u660e\u786e\u7684\u95ee\u9898\uff0c\u4e0d\u5efa\u8bae\u5728\u7ebf\u4e0a\u73af\u5883\u4f7f\u7528\uff01</p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E6%8A%A5%E9%94%99%20Expression%201%20of%20SELECT%20list%20is%20not%20in%20GROUP%20BY%20clause%20and%20contains%20nonaggregated%20column/#3","title":"\u2705 \u65b9\u6848 3\uff1a\u6539\u5199\u4e3a\u5b50\u67e5\u8be2","text":"<p>\u5982\u679c\u4f60\u60f3\u83b7\u53d6\u6bcf\u4e2a team_id \u5bf9\u5e94\u7684\u6700\u65b0\u8ba2\u5355\uff0c\u53ef\u4ee5\u4f7f\u7528\u5b50\u67e5\u8be2\u5b9e\u73b0\uff1a</p> SQL<pre><code>SELECT a.*\nFROM group_buy_order_list a\nJOIN (\n    SELECT team_id, MAX(create_time) AS latest_time\n    FROM group_buy_order_list\n    WHERE activity_id = #{activityId} AND status IN (0, 1)\n    GROUP BY team_id\n) b ON a.team_id = b.team_id AND a.create_time = b.latest_time\n</code></pre> <p>\u2705 \u9002\u5408\u573a\u666f\uff1a\u4f60\u9700\u8981\u83b7\u53d6\u6bcf\u4e2a team_id \u6700\u65b0\u7684\u4e00\u6761\u8ba2\u5355\u8bb0\u5f55\u3002</p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E6%8A%A5%E9%94%99%20Expression%201%20of%20SELECT%20list%20is%20not%20in%20GROUP%20BY%20clause%20and%20contains%20nonaggregated%20column/#xml","title":"\ud83d\udee0 \u4e09\u3001\u5efa\u8bae\u6539\u5199 XML \u8bed\u53e5","text":"<p>\u5728\u4f60\u7684 <code>mapper.xml</code> \u4e2d\u5c06\u8be5\u8bed\u53e5\u6539\u4e3a\uff1a</p> XML<pre><code>&lt;select id=\"queryInProgressUserGroupBuyOrderDetailListByActivityId\" parameterType=\"java.lang.Long\"\n        resultMap=\"dataMap\"&gt;\n    SELECT MAX(user_id) AS user_id, team_id, MAX(out_trade_no) AS out_trade_no\n    FROM group_buy_order_list\n    WHERE activity_id = #{activityId} AND status IN (0, 1)\n    GROUP BY team_id\n&lt;/select&gt;\n</code></pre> <p>\u6216\u8005\u4f7f\u7528\u5b50\u67e5\u8be2\u66ff\u4ee3\uff0c\u89c6\u4f60\u7684\u4e1a\u52a1\u9700\u6c42\u800c\u5b9a\u3002</p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E6%8A%A5%E9%94%99%20Expression%201%20of%20SELECT%20list%20is%20not%20in%20GROUP%20BY%20clause%20and%20contains%20nonaggregated%20column/#_6","title":"\ud83d\udccc \u56db\u3001\u4f60\u7684\u6848\u4f8b\u56de\u987e","text":"<p>\u4f60\u60f3\u6267\u884c\u7684\u662f\uff1a</p> SQL<pre><code>SELECT user_id, team_id, out_trade_no\nFROM group_buy_order_list\nWHERE activity_id = #{activityId} AND status IN (0, 1)\nGROUP BY team_id\n</code></pre> <p>\u95ee\u9898\u5728\u4e8e\uff1a</p> <ul> <li>\u4f60\u53ea <code>GROUP BY team_id</code></li> <li>\u4f46 <code>user_id</code> \u548c <code>out_trade_no</code> \u5c5e\u4e8e\u8be5\u5206\u7ec4\u7684\u591a\u4e2a\u8bb0\u5f55\u4e2d\u7684\u5b57\u6bb5</li> <li>\u6ca1\u6709\u805a\u5408 \u2192 \u62a5\u9519</li> </ul>"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E6%8A%A5%E9%94%99%20Expression%201%20of%20SELECT%20list%20is%20not%20in%20GROUP%20BY%20clause%20and%20contains%20nonaggregated%20column/#_7","title":"\ud83e\udde0 \u603b\u7ed3","text":"<p>\u5f53\u4f60 <code>GROUP BY</code> \u67d0\u4e2a\u5b57\u6bb5\u65f6\uff0c\u6240\u6709 SELECT \u4e2d\u7684\u5176\u4ed6\u5b57\u6bb5\u5fc5\u987b\u662f\u8be5\u5b57\u6bb5\u7684\u786e\u5b9a\u6027\u51fd\u6570\u503c\uff0c\u5426\u5219 MySQL \u65e0\u6cd5\u5224\u65ad\u8be5\u53d6\u54ea\u4e00\u6761\uff01</p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E5%90%8E%E7%AB%AF%E6%97%B6%E5%8C%BA%E4%B8%8D%E4%B8%80%E8%87%B4%E5%AF%BC%E8%87%B4%20SQL%20%E8%AF%AD%E5%8F%A5%E8%BF%94%E5%9B%9E%E6%9C%89%E8%AF%AF/","title":"\u6570\u636e\u5e93\u4e0e\u540e\u7aef\u65f6\u533a\u4e0d\u4e00\u81f4\u5bfc\u81f4 SQL \u8bed\u53e5\u8fd4\u56de\u6709\u8bef","text":""},{"location":"develop/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E5%90%8E%E7%AB%AF%E6%97%B6%E5%8C%BA%E4%B8%8D%E4%B8%80%E8%87%B4%E5%AF%BC%E8%87%B4%20SQL%20%E8%AF%AD%E5%8F%A5%E8%BF%94%E5%9B%9E%E6%9C%89%E8%AF%AF/#_1","title":"\u95ee\u9898\u63cf\u8ff0","text":"<p>\u6700\u8fd1\u5728\u5f00\u53d1 SpringBoot \u5e94\u7528\uff0c\u4f7f\u7528 jdbc \u8fde\u63a5 MySQL \u6570\u636e\u5e93\uff0c\u5bf9\u63a5\u652f\u4ed8\u5b9d\u6c99\u7bb1\u3002MySQL \u90e8\u7f72\u5728\u56fd\u5185\u7684\u670d\u52a1\u5668\u4e0a\uff0c\u65f6\u533a\u4e3a SYSTEM\uff1bSpringBoot \u5e94\u7528\u4e2d\u7684 application.yml \u4e2d\u4e5f\u914d\u7f6e MySQL \u65f6\u533a\u4e3a Asia/Shanghai\u3002</p> SQL<pre><code>mysql&gt; SHOW VARIABLES LIKE '%time_zone%'; \n+------------------+--------+\n| Variable_name    | Value  |\n+------------------+--------+\n| system_time_zone | UTC    |\n| time_zone        | SYSTEM |\n+------------------+--------+\n</code></pre> YAML<pre><code>spring:\n  datasource:\n  username: username\n  password: password\n  url: jdbc:mysql://ip:port/s-pay-mall?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;zeroDateTimeBehavior=convertToNull&amp;serverTimezone=Asia/Shanghai&amp;useSSL=true\n</code></pre> <p>\u4e1a\u52a1\u903b\u8f91\uff1a\u521b\u5efa\u8ba2\u5355\u6216\u66f4\u65b0\u8ba2\u5355\u72b6\u6001\u65f6\uff0c\u901a\u8fc7 mapper\u3001xml \u8fd0\u884c SQL \u8bed\u53e5\uff0c\u5bf9\u8c61\u7684 order_time \u548c create_time\u3001update_time \u5b57\u6bb5\u7684\u65f6\u95f4\u4e0d\u4e00\u81f4\u3002create_time\u3001update_time \u90fd\u662f now()\uff0c\u4f46 order_time \u662f Java \u5e93\u7684 new Date()\u3002</p> <p>\u4f46\u662f\u63d2\u5165/\u66f4\u65b0\u5b57\u6bb5\u540e\uff0c\u6570\u636e\u5e93\u4e2d\u663e\u793a\u53ea\u6709 order_time \u662f\u4e0a\u6d77\u65f6\u533a\uff0c\u5373\u6bd4\u53e6\u5916\u4e24\u4e2a\u5b57\u6bb5\u5feb 8h\uff0c\u4e5f\u5c31\u662f MySQL \u7684 now() \u53ea\u662fUTC\u65f6\u95f4\uff08\u5982\u56fe\u6240\u793a\uff09\u3002</p> <p></p> <p>\u6240\u4ee5\u6211\u73b0\u5728\u901a\u8fc7 order_time \u6765\u7b5b\u9009\u65f6\uff0c\u901a\u8fc7\u52a0 8h\uff0c\u5373 <code>now() + interval 8 hour</code> \u6765\u5904\u7406\u3002</p> XML<pre><code>&lt;!-- \u66f4\u65b0\u8ba2\u5355\u652f\u4ed8\u72b6\u6001\u548c\u65f6\u95f4 --&gt;\n&lt;update id=\"changeOrderPaySuccess\" parameterType=\"site.dopplerxd.domain.po.PayOrder\"&gt;  \nupdate pay_order  \nset status = #{status}, pay_time = now(), update_time = now()  \nwhere order_id = #{orderId}  \n&lt;/update&gt;\n\n&lt;!-- \u67e5\u8be2\u8d85\u65f6\u672a\u652f\u4ed8\u8ba2\u5355 --&gt;\n&lt;select id=\"queryTimeoutCloseOrderList\" parameterType=\"java.lang.String\" resultType=\"java.lang.String\"&gt; select order_id as orderId from pay_order where status = 'PAY_WAIT' and now() + interval 8 hour &gt;= order_time + interval 30 minute order by order_id asc limit 50\n&lt;/select&gt;\n</code></pre>"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E5%90%8E%E7%AB%AF%E6%97%B6%E5%8C%BA%E4%B8%8D%E4%B8%80%E8%87%B4%E5%AF%BC%E8%87%B4%20SQL%20%E8%AF%AD%E5%8F%A5%E8%BF%94%E5%9B%9E%E6%9C%89%E8%AF%AF/#_2","title":"\u89e3\u51b3","text":"<p>\u8be5\u95ee\u9898\u662f MySQL\u65f6\u533a\u8bbe\u7f6e\u4e0eJDBC/Spring Boot\u9ed8\u8ba4\u884c\u4e3a\u4e0d\u4e00\u81f4 \u5bfc\u81f4\u7684\u5178\u578b\u65f6\u95f4\u9519\u4f4d\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 MySQL \u914d\u7f6e\u6587\u4ef6\uff0c\u8bbe\u7f6e\u65f6\u533a\u6765\u89e3\u51b3\u3002</p> <p>\u6211\u662f\u901a\u8fc7 Docker \u90e8\u7f72\u7684 MySQL\uff0c\u6240\u4ee5\u8981\u627e\u5230 MySQL \u7684\u914d\u7f6e\u6587\u4ef6\u5e76\u4fee\u6539\uff0c\u7136\u540e\u6620\u5c04\u5230 Docker \u73af\u5883\u4e2d\u3002</p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E5%90%8E%E7%AB%AF%E6%97%B6%E5%8C%BA%E4%B8%8D%E4%B8%80%E8%87%B4%E5%AF%BC%E8%87%B4%20SQL%20%E8%AF%AD%E5%8F%A5%E8%BF%94%E5%9B%9E%E6%9C%89%E8%AF%AF/#my-cnf","title":"\u4fee\u6539 my. cnf \u5e76\u6620\u5c04\u5230\u5bb9\u5668\u4e2d","text":"<p>\u5728 my. cnf \u4e2d\u6dfb\u52a0\uff1a</p> INI<pre><code>[mysqld]\ndefault-time-zone = '+08:00'\n</code></pre> <p>\u7136\u540e\u91cd\u542f MySQL \u5bb9\u5668\uff0c\u518d\u6b21\u67e5\u770b\u53d1\u73b0\u65f6\u533a\u5df2\u6b63\u786e\u4fee\u6539\u4e3a UTC+8\uff1a</p> SQL<pre><code>mysql&gt; SHOW VARIABLES LIKE '%time_zone%';\n+------------------+--------+\n| Variable_name    | Value  |\n+------------------+--------+\n| system_time_zone | UTC    |\n| time_zone        | +08:00 |\n+------------------+--------+\n2 rows in set (0.03 sec)\n</code></pre>"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E5%90%8E%E7%AB%AF%E6%97%B6%E5%8C%BA%E4%B8%8D%E4%B8%80%E8%87%B4%E5%AF%BC%E8%87%B4%20SQL%20%E8%AF%AD%E5%8F%A5%E8%BF%94%E5%9B%9E%E6%9C%89%E8%AF%AF/#docker-compose-mysql","title":"\u901a\u8fc7 docker-compose \u8bbe\u7f6e MySQL \u65f6\u533a","text":"<p>\u4e5f\u53ef\u4ee5\u901a\u8fc7 docker-compose \u8bbe\u7f6e MySQL \u65f6\u533a\uff0c\u4ee5\u4e0b\u662f ChatGPT \u7ed9\u51fa\u7684 docker-compose \u793a\u4f8b\uff1a</p> YAML<pre><code>version: '3.8'\n\nservices:\n  mysql:\n    image: mysql:5.7\n    container_name: my-mysql\n    ports:\n      - \"3306:3306\"\n    environment:\n      MYSQL_ROOT_PASSWORD: your_password\n      TZ: Asia/Shanghai\n    volumes:\n      - ./mysql-data:/var/lib/mysql\n      - ./mysql-conf/my.cnf:/etc/mysql/conf.d/my.cnf\n      - /etc/localtime:/etc/localtime:ro\n</code></pre>"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E5%90%8E%E7%AB%AF%E6%9F%A5%E8%AF%A2%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E7%9A%84%E5%80%BC%E4%B8%8D%E4%B8%80%E8%87%B4/","title":"\u6570\u636e\u5e93\u4e0e\u540e\u7aef\u67e5\u8be2\u8fd4\u56de\u7ed3\u679c\u7684\u503c\u4e0d\u4e00\u81f4","text":""},{"location":"develop/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E5%90%8E%E7%AB%AF%E6%9F%A5%E8%AF%A2%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E7%9A%84%E5%80%BC%E4%B8%8D%E4%B8%80%E8%87%B4/#_1","title":"\u95ee\u9898\u6392\u67e5","text":"<p>\u6570\u636e\u5e93\u4e2d\u770b\u5230</p> <p></p> <p>\u540e\u7aef\u8f93\u51fa\uff1a</p> <p></p> <p>\u540e\u7aef\u67e5\u8be2\u540e\u8fd4\u56de\u7ed9\u524d\u7aef\u5f97\u5230\uff1a</p> <p></p> <p></p> <p>\u53ef\u4ee5\u770b\u5230\u95ee\u9898\u51fa\u73b0\u5728\u524d\u7aef\uff0c\u7531\u4e8e\u662f\u5b57\u6bb5\u6570\u636e\u7c7b\u578b\u662f <code>bigint</code>\uff0c\u63a8\u6d4b\u4f1a\u4e0d\u4f1a\u51fa\u73b0\u4e86\u7cbe\u5ea6\u95ee\u9898\u3002</p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E5%90%8E%E7%AB%AF%E6%9F%A5%E8%AF%A2%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E7%9A%84%E5%80%BC%E4%B8%8D%E4%B8%80%E8%87%B4/#_2","title":"\u95ee\u9898\u539f\u56e0","text":"<p>js \u6216 ts \u80fd\u51c6\u786e\u8868\u793a\u7684\u6574\u6570\u8303\u56f4\u5728 <code>-2^53 - 2^53</code> \u4e4b\u95f4\uff0c\u6574\u6570\u8fc7\u5927\u65f6\uff0c\u65e0\u6cd5\u7cbe\u786e\u8868\u793a\u3002</p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E5%90%8E%E7%AB%AF%E6%9F%A5%E8%AF%A2%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E7%9A%84%E5%80%BC%E4%B8%8D%E4%B8%80%E8%87%B4/#_3","title":"\u89e3\u51b3\u65b9\u6cd5","text":""},{"location":"develop/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E5%90%8E%E7%AB%AF%E6%9F%A5%E8%AF%A2%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E7%9A%84%E5%80%BC%E4%B8%8D%E4%B8%80%E8%87%B4/#1-tostring","title":"1 \u540e\u7aef\u8fd4\u56de\u4e4b\u524d toString \u5904\u7406","text":"<p>\u5bf9\u4e8e\u4ec5\u9700\u8981\u505a\u5c55\u793a\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u5728\u540e\u7aef\u8fd4\u56de\u7ed3\u679c\u4e4b\u524d\uff0c\u5c06\u8fd9\u4e2a\u5c5e\u6027\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u8fd4\u56de\u3002</p>"},{"location":"develop/%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E5%90%8E%E7%AB%AF%E6%9F%A5%E8%AF%A2%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E7%9A%84%E5%80%BC%E4%B8%8D%E4%B8%80%E8%87%B4/#2-json-bigint","title":"2 \u524d\u7aef\u4f7f\u7528 json-bigint \u5305","text":"<p>\u5f85\u8865\u5145</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/CodeSpace/","title":"CodeSpace","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/CodeSpace/#_1","title":"\u9879\u76ee\u4ecb\u7ecd","text":"<p>\u57fa\u4e8e\u9c7c\u76aeOJ https://www.codefather.cn/course/1790980707917017089 \u548c\u5f00\u6e90\u793e\u533a\u7cfb\u7edf\u6280\u672f\u6d3e https://github.com/itwanger/paicoding \u7684\u7b97\u6cd5\u5b66\u4e60\u5e73\u53f0\u3002\u5728\u7ebf\u4ee3\u7801\u8bc4\u6d4b\u548c\u535a\u5ba2\u7cfb\u7edf\uff08\u7c7b\u4f3c Luogu\uff09\u3002</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/CodeSpace/#_2","title":"\u9879\u76ee\u67b6\u6784","text":"<p>https://paicoding.com/article/detail/208</p> <p>\u6574\u4e2a\u7cfb\u7edf\u7684\u540e\u7aef\u5206\u4e3a\uff1a</p> <ul> <li>\u7528\u6237\u670d\u52a1\uff1a\u63d0\u4f9b\u7528\u6237\u767b\u5f55\u3001\u7528\u6237\u7684\u589e\u5220\u6539\u67e5\u7b49\u7ba1\u7406\u529f\u80fd</li> <li>\u9898\u76ee\u670d\u52a1\uff1a\u63d0\u4f9b\u9898\u76ee\u7684\u589e\u5220\u6539\u67e5\u7ba1\u7406\u3001\u9898\u76ee\u63d0\u4ea4\u529f\u80fd</li> <li>\u5224\u9898\u670d\u52a1\uff1a\u63d0\u4f9b\u5224\u9898\u529f\u80fd\uff0c\u8c03\u7528\u4ee3\u7801\u6c99\u7bb1\u5e76\u6bd4\u5bf9\u5224\u9898\u7ed3\u679c</li> <li>\u4ee3\u7801\u6c99\u7bb1\uff1a\u63d0\u4f9b\u7f16\u8bd1\u6267\u884c\u4ee3\u7801\u3001\u8fd4\u56de\u7ed3\u679c\u7684\u529f\u80fd</li> <li>\u516c\u5171\u6a21\u5757\uff1a\u63d0\u4f9b\u516c\u5171\u4ee3\u7801\uff0c\u6bd4\u5982\u6570\u636e\u6a21\u578b\u3001\u5168\u5c40\u8bf7\u6c42\u54cd\u5e94\u5c01\u88c5\u3001\u5168\u5c40\u5f02\u5e38\u5904\u7406\u3001\u5de5\u5177\u7c7b\u7b49</li> <li>\u7f51\u5173\u670d\u52a1\uff1a\u63d0\u4f9b\u7edf\u4e00\u7684 API \u8f6c\u53d1\u3001\u805a\u5408\u6587\u6863\u3001\u5168\u5c40\u8de8\u57df\u89e3\u51b3\u7b49\u529f\u80fd</li> <li>\u9898\u89e3\u670d\u52a1\uff1a\u63d0\u4f9b\u9898\u89e3\u53d1\u5e03\u529f\u80fd\u3001\u652f\u6301\u7528\u6237\u8bc4\u8bba\u3001\u70b9\u8d5e\u3001\u6536\u85cf\u7b49\u529f\u80fd</li> </ul> <p>\u5404\u6a21\u5757\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c3 \u4e2a\u6838\u5fc3\uff1a</p> <ol> <li>\u7531\u7f51\u5173\u670d\u52a1\u96c6\u4e2d\u63a5\u53d7\u524d\u7aef\u7684\u8bf7\u6c42\uff0c\u5e76\u8f6c\u53d1\u5230\u5bf9\u5e94\u7684\u4e1a\u52a1\u670d\u52a1\u3002</li> <li>\u5224\u9898\u670d\u52a1\u9700\u8981\u8c03\u7528\u9898\u76ee\u670d\u52a1\u83b7\u53d6\u9898\u76ee\u4fe1\u606f\u548c\u6d4b\u8bd5\u7528\u4f8b\u3001\u8c03\u7528\u4ee3\u7801\u6c99\u7bb1\u5b8c\u6210\u4ee3\u7801\u7684\u7f16\u8bd1\u548c\u6267\u884c\u5e76\u6bd4\u5bf9\u7ed3\u679c\uff0c\u670d\u52a1\u95f4\u901a\u8fc7 Open Feign \u76f8\u4e92\u8c03\u7528\u3002</li> <li>\u6240\u6709\u670d\u52a1\u90fd\u9700\u8981\u5f15\u5165\u516c\u5171\u6a21\u5757\u3002</li> </ol>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/CodeSpace/%E7%AC%94%E8%AE%B0/","title":"\u7b14\u8bb0","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/CodeSpace/%E7%AC%94%E8%AE%B0/#lombok-builder","title":"Lombok @Builder \u6ce8\u89e3","text":"<p>\u53ef\u4ee5\u66f4\u65b9\u4fbf\u5730\u7ed9\u53d8\u91cf\u590d\u5236</p> Java<pre><code>// Example.java\n@Data\n@Builder\n@AllArgsConstructor\n@NoArgsConstructor\npublic class ExecuteCodeRequest {\n\n    private String code;\n\n    private String language;\n}\n\n// \u4f7f\u7528\nExample example = Example.builder()\n        .code()\n        .language()\n        .build();\n</code></pre>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/CodeSpace/%E7%AC%94%E8%AE%B0/#_1","title":"\u53c2\u6570\u914d\u7f6e\u5316","text":"<p>\u53ef\u4ee5\u901a\u8fc7 <code>@Value</code> \u6ce8\u89e3\u83b7\u53d6 <code>application.yml</code> \u4e2d\u7684\u914d\u7f6e\u4fe1\u606f</p> <p><code>application.yml</code> \u4e2d\u914d\u7f6e\uff1a</p> YAML<pre><code>codesandbox:\n  type:\n    example\n</code></pre> <p>\u901a\u8fc7 <code>@Value</code> \u6ce8\u89e3\u83b7\u53d6\u914d\u7f6e\uff1a</p> Java<pre><code>@Value(\"${codesandbox.type}\")\nprivate String type;\n</code></pre>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/CodeSpace/%E7%AC%94%E8%AE%B0/#_2","title":"\u5de5\u5382\u6a21\u5f0f\u4f18\u5316","text":"<p>\u4f7f\u7528\u5de5\u5382\u6a21\u5f0f\uff0c\u6839\u636e\u7528\u6237\u4f20\u5165\u7684\u5b57\u7b26\u4e32\u53c2\u6570\uff0c\u751f\u6210\u5bf9\u5e94\u4ee3\u7801\u6c99\u7bb1\u7684\u5b9e\u73b0\u7c7b\u3002</p> <p>\u9759\u6001\u5de5\u5382\u6a21\u5f0f\uff1a</p> Java<pre><code>/**\n * \u4ee3\u7801\u6c99\u7bb1\u5de5\u5382\uff08\u6839\u636e\u7c7b\u578b\u521b\u5efa\u4ee3\u7801\u6c99\u7bb1\uff09\n *\n * @author: &lt;a href=\"https://github.com/DopplerXD\"&gt;doppleryxc&lt;/a&gt;\n * @time: 2025/3/9 14:51\n */\npublic class CodeSandboxFactory {\n\n    /**\n     * \u521b\u5efa\u4ee3\u7801\u6c99\u7bb1\u793a\u4f8b\n     *\n     * @param type \u6c99\u7bb1\u7c7b\u578b\n     * @return\n     */\n    public static CodeSandbox newInstance(String type) {\n        return switch (type) {\n            case \"example\" -&gt; new ExampleCodeSandbox();\n            case \"remote\" -&gt; new RemoteCodeSandbox();\n            case \"thirdParty\" -&gt; new ThirdPartyCodeSandbox();\n            default -&gt; new ExampleCodeSandbox();\n        };\n    }\n}\n</code></pre> <p>\u8fdb\u800c\u53ef\u4ee5\u6839\u636e\u5b57\u7b26\u4e32\u52a8\u6001\u751f\u6210\u793a\u4f8b\uff0c\u63d0\u9ad8\u901a\u7528\u6027\uff1a</p> Java<pre><code>public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    while (scanner.hasNext()) {\n        String type = scanner.next();\n        CodeSandbox codeSandbox = CodeSandboxFactory.newInstance(type);\n        String code = \"int main() { }\";\n        String language = JudgeSubmitLanguage.JAVA.getValue();\n        List&lt;String&gt; inputList = Arrays.asList(\"1 2\", \"3 4\");\n        ExecuteCodeRequest executeCodeRequest = ExecuteCodeRequest.builder()\n                .code(code)\n                .language(language)\n                .inputList(inputList)\n                .build();\n        ExecuteCodeResponse executeCodeResponse = codeSandbox.executeCode(executeCodeRequest);\n    }\n}\n</code></pre>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/CodeSpace/%E7%AC%94%E8%AE%B0/#slf4j","title":"\u4ee3\u7406\u7c7b\u914d\u5408 @Slf4j \u6ce8\u89e3\u6765\u66f4\u65b9\u4fbf\u5730\u751f\u6210\u65e5\u5fd7","text":"<p>\u4f7f\u7528\u4ee3\u7406\u6a21\u5f0f\uff0c\u63d0\u4f9b\u4e00\u4e2a Proxy\uff0c\u6765\u589e\u5f3a\u4ee3\u7801\u6c99\u7bb1\u5730\u80fd\u529b\uff0c\u4e0d\u9700\u8981\u5728\u6bcf\u4e2a\u5b9e\u73b0\u7c7b\u90fd\u6267\u884c <code>log.info()</code> \u7b49\u64cd\u4f5c\u3002</p> <p>\u4ee3\u7406\u7c7b <code>CodeSandboxProxy</code>\uff1a</p> Java<pre><code>/**\n * \u4ee3\u7801\u6c99\u7bb1\u4ee3\u7406\u7c7b\n *\n * @author: &lt;a href=\"https://github.com/DopplerXD\"&gt;doppleryxc&lt;/a&gt;\n * @time: 2025/3/9 15:08\n */\n@Slf4j\npublic class CodeSandboxProxy implements CodeSandbox {\n\n    private final CodeSandbox codeSandbox;\n\n    public CodeSandboxProxy(CodeSandbox codeSandbox) {\n        this.codeSandbox = codeSandbox;\n    }\n\n    @Override\n    public ExecuteCodeResponse executeCode(ExecuteCodeRequest request) {\n        log.info(\"\u4ee3\u7801\u6c99\u7bb1\u8bf7\u6c42\u4fe1\u606f\uff1a\" + request.toString());\n        ExecuteCodeResponse response = codeSandbox.executeCode(request);\n        log.info(\"\u4ee3\u7801\u6c99\u7bb1\u54cd\u5e94\u4fe1\u606f\uff1a\" + response.toString());\n        return response;\n    }\n}\n</code></pre> <p>\u4f7f\u7528\uff1a</p> Java<pre><code>CodeSandbox codeSandbox = CodeSandboxFactory.newInstance(type);\ncodeSandbox = new CodeSandboxProxy(codeSandbox);\n</code></pre>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/CodeSpace/%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1/%E7%94%A8%E6%88%B7/%E7%94%A8%E6%88%B7%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/","title":"\u7528\u6237\u76f8\u5173\u64cd\u4f5c","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/CodeSpace/%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1/%E7%94%A8%E6%88%B7/%E7%94%A8%E6%88%B7%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/#1","title":"1. \u6574\u4f53\u67b6\u6784","text":"<p>\u6b64\u9879\u76ee\u8fd0\u7528\u4e86 Spring Boot \u6846\u67b6\u6784\u5efa Web \u5e94\u7528\uff0c\u91c7\u7528 MVC\uff08Model - View - Controller\uff09\u67b6\u6784\u6a21\u5f0f\u3002Controller \u5c42\u8d1f\u8d23\u5904\u7406 HTTP \u8bf7\u6c42\uff0cService \u5c42\u627f\u62c5\u4e1a\u52a1\u903b\u8f91\u5904\u7406\uff0cMapper \u5c42\uff08\u501f\u52a9 MyBatis - Plus \u5b9e\u73b0\uff09\u8d1f\u8d23\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\u3002</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/CodeSpace/%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1/%E7%94%A8%E6%88%B7/%E7%94%A8%E6%88%B7%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/#2","title":"2. \u6ce8\u518c\u529f\u80fd\u5b9e\u73b0\u6280\u672f","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/CodeSpace/%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1/%E7%94%A8%E6%88%B7/%E7%94%A8%E6%88%B7%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/#21","title":"2.1 \u63a5\u53e3\u5b9a\u4e49","text":"<p>\u5728 <code>UserController</code> \u91cc\u5b9a\u4e49\u4e86 <code>/user/register</code> \u63a5\u53e3\uff0c\u5176\u63a5\u6536 <code>UserRegisterRequest</code> \u5bf9\u8c61\uff0c\u8fd9\u662f\u4e00\u4e2a\u5c01\u88c5\u4e86\u7528\u6237\u6ce8\u518c\u6240\u9700\u4fe1\u606f\uff08\u5982\u7528\u6237\u8d26\u6237\u3001\u5bc6\u7801\u3001\u786e\u8ba4\u5bc6\u7801\uff09\u7684 DTO\uff08Data Transfer Object\uff09\u3002 Java<pre><code>@PostMapping(\"/register\")\npublic BaseResponse&lt;Long&gt; userRegister(@RequestBody UserRegisterRequest userRegisterRequest) {\n    // ...\n}\n</code></pre></p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/CodeSpace/%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1/%E7%94%A8%E6%88%B7/%E7%94%A8%E6%88%B7%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/#22","title":"2.2 \u4e1a\u52a1\u903b\u8f91\u5904\u7406","text":"<p><code>UserServiceImpl</code> \u7c7b\u4e2d\u7684 <code>userRegister</code> \u65b9\u6cd5\u5b9e\u73b0\u4e86\u6ce8\u518c\u7684\u5177\u4f53\u903b\u8f91\uff1a - \u53c2\u6570\u6821\u9a8c\uff1a\u68c0\u67e5\u7528\u6237\u8d26\u6237\u3001\u5bc6\u7801\u548c\u786e\u8ba4\u5bc6\u7801\u662f\u5426\u4e3a\u7a7a\uff0c\u4ee5\u53ca\u8d26\u6237\u957f\u5ea6\u662f\u5426\u5c0f\u4e8e 4 \u4f4d\u3001\u5bc6\u7801\u957f\u5ea6\u662f\u5426\u5c0f\u4e8e 8 \u4f4d\uff0c\u8fd8\u6709\u4e24\u6b21\u8f93\u5165\u7684\u5bc6\u7801\u662f\u5426\u4e00\u81f4\u3002 Java<pre><code>if (StringUtils.isAnyBlank(userAccount, userPassword, checkPassword)) {\n    throw new BusinessException(ErrorCode.PARAMS_ERROR, \"\u53c2\u6570\u4e3a\u7a7a\");\n}\nif (userAccount.length() &lt; 4) {\n    throw new BusinessException(ErrorCode.PARAMS_ERROR, \"\u7528\u6237\u8d26\u53f7\u8fc7\u77ed\");\n}\nif (userPassword.length() &lt; 8 || checkPassword.length() &lt; 8) {\n    throw new BusinessException(ErrorCode.PARAMS_ERROR, \"\u7528\u6237\u5bc6\u7801\u8fc7\u77ed\");\n}\nif (!userPassword.equals(checkPassword)) {\n    throw new BusinessException(ErrorCode.PARAMS_ERROR, \"\u4e24\u6b21\u8f93\u5165\u7684\u5bc6\u7801\u4e0d\u4e00\u81f4\");\n}\n</code></pre> - \u8d26\u6237\u552f\u4e00\u6027\u68c0\u67e5\uff1a\u4f7f\u7528 <code>QueryWrapper</code> \u67e5\u8be2\u6570\u636e\u5e93\uff0c\u5224\u65ad\u8be5\u8d26\u6237\u662f\u5426\u5df2\u5b58\u5728\u3002 Java<pre><code>QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();\nqueryWrapper.eq(\"userAccount\", userAccount);\nlong count = this.baseMapper.selectCount(queryWrapper);\nif (count &gt; 0) {\n    throw new BusinessException(ErrorCode.PARAMS_ERROR, \"\u8d26\u53f7\u91cd\u590d\");\n}\n</code></pre> - \u5bc6\u7801\u52a0\u5bc6\uff1a\u8fd0\u7528 <code>DigestUtils.md5DigestAsHex</code> \u65b9\u6cd5\u5bf9\u5bc6\u7801\u8fdb\u884c MD5 \u52a0\u5bc6\uff0c\u540c\u65f6\u6dfb\u52a0\u76d0\u503c\uff08<code>SALT</code>\uff09\u589e\u5f3a\u5b89\u5168\u6027\u3002 Java<pre><code>String encryptPassword = DigestUtils.md5DigestAsHex((SALT + userPassword).getBytes());\n</code></pre> - \u6570\u636e\u63d2\u5165\uff1a\u521b\u5efa <code>User</code> \u5bf9\u8c61\uff0c\u5c06\u52a0\u5bc6\u540e\u7684\u5bc6\u7801\u548c\u7528\u6237\u8d26\u6237\u4fe1\u606f\u5b58\u5165\u5176\u4e2d\uff0c\u518d\u8c03\u7528 <code>save</code> \u65b9\u6cd5\u5c06\u7528\u6237\u4fe1\u606f\u63d2\u5165\u6570\u636e\u5e93\u3002 Java<pre><code>User user = new User();\nuser.setUserAccount(userAccount);\nuser.setUserPassword(encryptPassword);\nboolean saveResult = this.save(user);\nif (!saveResult) {\n    throw new BusinessException(ErrorCode.SYSTEM_ERROR, \"\u6ce8\u518c\u5931\u8d25\uff0c\u6570\u636e\u5e93\u9519\u8bef\");\n}\n</code></pre></p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/CodeSpace/%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1/%E7%94%A8%E6%88%B7/%E7%94%A8%E6%88%B7%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/#3","title":"3. \u767b\u5f55\u529f\u80fd\u5b9e\u73b0\u6280\u672f","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/CodeSpace/%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1/%E7%94%A8%E6%88%B7/%E7%94%A8%E6%88%B7%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/#31","title":"3.1 \u63a5\u53e3\u5b9a\u4e49","text":"<p>\u5728 <code>UserController</code> \u4e2d\u5b9a\u4e49\u4e86 <code>/user/login</code> \u63a5\u53e3\uff0c\u63a5\u6536 <code>UserLoginRequest</code> \u5bf9\u8c61\u548c <code>HttpServletRequest</code> \u5bf9\u8c61\u3002 Java<pre><code>@PostMapping(\"/login\")\npublic BaseResponse&lt;LoginUserVO&gt; userLogin(@RequestBody UserLoginRequest userLoginRequest, HttpServletRequest request) {\n    // ...\n}\n</code></pre></p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/CodeSpace/%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1/%E7%94%A8%E6%88%B7/%E7%94%A8%E6%88%B7%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/#32","title":"3.2 \u4e1a\u52a1\u903b\u8f91\u5904\u7406","text":"<p><code>UserServiceImpl</code> \u7c7b\u4e2d\u7684 <code>userLogin</code> \u65b9\u6cd5\u5b9e\u73b0\u4e86\u767b\u5f55\u7684\u5177\u4f53\u903b\u8f91\uff1a - \u53c2\u6570\u6821\u9a8c\uff1a\u68c0\u67e5\u7528\u6237\u8d26\u6237\u548c\u5bc6\u7801\u662f\u5426\u4e3a\u7a7a\uff0c\u4ee5\u53ca\u8d26\u6237\u957f\u5ea6\u662f\u5426\u5c0f\u4e8e 4 \u4f4d\u3001\u5bc6\u7801\u957f\u5ea6\u662f\u5426\u5c0f\u4e8e 8 \u4f4d\u3002 Java<pre><code>if (StringUtils.isAnyBlank(userAccount, userPassword)) {\n    throw new BusinessException(ErrorCode.PARAMS_ERROR, \"\u53c2\u6570\u4e3a\u7a7a\");\n}\nif (userAccount.length() &lt; 4) {\n    throw new BusinessException(ErrorCode.PARAMS_ERROR, \"\u8d26\u53f7\u9519\u8bef\");\n}\nif (userPassword.length() &lt; 8) {\n    throw new BusinessException(ErrorCode.PARAMS_ERROR, \"\u5bc6\u7801\u9519\u8bef\");\n}\n</code></pre> - \u5bc6\u7801\u52a0\u5bc6\uff1a\u540c\u6837\u4f7f\u7528 <code>DigestUtils.md5DigestAsHex</code> \u65b9\u6cd5\u5bf9\u8f93\u5165\u7684\u5bc6\u7801\u8fdb\u884c MD5 \u52a0\u5bc6\uff0c\u5e76\u6dfb\u52a0\u76d0\u503c\u3002 Java<pre><code>String encryptPassword = DigestUtils.md5DigestAsHex((SALT + userPassword).getBytes());\n</code></pre> - \u7528\u6237\u67e5\u8be2\uff1a\u4f7f\u7528 <code>QueryWrapper</code> \u6839\u636e\u7528\u6237\u8d26\u6237\u548c\u52a0\u5bc6\u540e\u7684\u5bc6\u7801\u67e5\u8be2\u6570\u636e\u5e93\uff0c\u5224\u65ad\u7528\u6237\u662f\u5426\u5b58\u5728\u3002 Java<pre><code>QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();\nqueryWrapper.eq(\"userAccount\", userAccount);\nqueryWrapper.eq(\"userPassword\", encryptPassword);\nUser user = this.baseMapper.selectOne(queryWrapper);\nif (user == null) {\n    log.info(\"user login failed, userAccount cannot match userPassword\");\n    throw new BusinessException(ErrorCode.PARAMS_ERROR, \"\u7528\u6237\u4e0d\u5b58\u5728\u6216\u5bc6\u7801\u9519\u8bef\");\n}\n</code></pre> - \u8bb0\u5f55\u767b\u5f55\u72b6\u6001\uff1a\u5c06\u7528\u6237\u4fe1\u606f\u5b58\u5165 <code>HttpSession</code> \u4e2d\uff0c\u4ee5\u6b64\u8bb0\u5f55\u7528\u6237\u7684\u767b\u5f55\u72b6\u6001\u3002 Java<pre><code>request.getSession().setAttribute(USER_LOGIN_STATE, user);\n</code></pre></p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/CodeSpace/%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1/%E7%94%A8%E6%88%B7/%E7%94%A8%E6%88%B7%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/#4","title":"4. \u6ce8\u9500\u529f\u80fd\u5b9e\u73b0\u6280\u672f","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/CodeSpace/%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1/%E7%94%A8%E6%88%B7/%E7%94%A8%E6%88%B7%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/#41","title":"4.1 \u63a5\u53e3\u5b9a\u4e49","text":"<p>\u5728 <code>UserController</code> \u4e2d\u5b9a\u4e49\u4e86 <code>/user/logout</code> \u63a5\u53e3\uff0c\u63a5\u6536 <code>HttpServletRequest</code> \u5bf9\u8c61\u3002 Java<pre><code>@PostMapping(\"/logout\")\npublic BaseResponse&lt;Boolean&gt; userLogout(HttpServletRequest request) {\n    // ...\n}\n</code></pre></p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/CodeSpace/%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1/%E7%94%A8%E6%88%B7/%E7%94%A8%E6%88%B7%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/#42","title":"4.2 \u4e1a\u52a1\u903b\u8f91\u5904\u7406","text":"<p><code>UserServiceImpl</code> \u7c7b\u4e2d\u7684 <code>userLogout</code> \u65b9\u6cd5\u5b9e\u73b0\u4e86\u6ce8\u9500\u7684\u5177\u4f53\u903b\u8f91\uff1a - \u68c0\u67e5\u767b\u5f55\u72b6\u6001\uff1a\u5224\u65ad <code>HttpSession</code> \u4e2d\u662f\u5426\u5b58\u5728\u7528\u6237\u767b\u5f55\u72b6\u6001\u4fe1\u606f\u3002 Java<pre><code>if (request.getSession().getAttribute(USER_LOGIN_STATE) == null) {\n    throw new BusinessException(ErrorCode.OPERATION_ERROR, \"\u672a\u767b\u5f55\");\n}\n</code></pre> - \u79fb\u9664\u767b\u5f55\u72b6\u6001\uff1a\u4ece <code>HttpSession</code> \u4e2d\u79fb\u9664\u7528\u6237\u767b\u5f55\u72b6\u6001\u4fe1\u606f\u3002 Java<pre><code>request.getSession().removeAttribute(USER_LOGIN_STATE);\n</code></pre></p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/CodeSpace/%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1/%E7%94%A8%E6%88%B7/%E7%94%A8%E6%88%B7%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/#5","title":"5. \u5176\u4ed6\u6280\u672f\u8981\u70b9","text":"<ul> <li>\u5f02\u5e38\u5904\u7406\uff1a\u8fd0\u7528\u81ea\u5b9a\u4e49\u7684 <code>BusinessException</code> \u7c7b\u5904\u7406\u4e1a\u52a1\u5f02\u5e38\uff0c\u901a\u8fc7 <code>ErrorCode</code> \u679a\u4e3e\u7c7b\u7edf\u4e00\u7ba1\u7406\u9519\u8bef\u7801\u3002</li> <li>\u6570\u636e\u8131\u654f\uff1a\u5b9a\u4e49 <code>LoginUserVO</code> \u548c <code>UserVO</code> \u7c7b\u5bf9\u7528\u6237\u4fe1\u606f\u8fdb\u884c\u8131\u654f\u5904\u7406\uff0c\u907f\u514d\u654f\u611f\u4fe1\u606f\u6cc4\u9732\u3002</li> <li>\u7ebf\u7a0b\u5b89\u5168\uff1a\u5728\u7528\u6237\u6ce8\u518c\u548c\u5fae\u4fe1\u767b\u5f55\u65f6\uff0c\u4f7f\u7528 <code>synchronized</code> \u5173\u952e\u5b57\u4fdd\u8bc1\u540c\u4e00\u8d26\u6237\u6216 <code>unionId</code> \u7684\u64cd\u4f5c\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u3002</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-10%20%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%8A%BD%E8%B1%A1%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1/","title":"\u8d23\u4efb\u94fe\u62bd\u8c61\u6a21\u677f\u8bbe\u8ba1\u5206\u6790 (\u57fa\u4e8e Git Diff 2.9 - 2.10)","text":"<p>\u672c\u6587\u6863\u57fa\u4e8e\u63d0\u4f9b\u7684 git diff \u6587\u4ef6\uff0c\u5206\u6790\u5176\u4e2d\u5b9e\u73b0\u7684\u8d23\u4efb\u94fe\u6a21\u5f0f\u7684\u4e24\u79cd\u6a21\u578b\uff0c\u5e76\u9610\u8ff0\u5176\u76f8\u5173\u77e5\u8bc6\u3002</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-10%20%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%8A%BD%E8%B1%A1%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1/#chain-of-responsibility-pattern","title":"\u8d23\u4efb\u94fe\u6a21\u5f0f (Chain of Responsibility Pattern)","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-10%20%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%8A%BD%E8%B1%A1%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1/#_1","title":"\u4f5c\u7528\u4e0e\u610f\u56fe","text":"<p>\u8d23\u4efb\u94fe\u6a21\u5f0f\u662f\u4e00\u79cd\u884c\u4e3a\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u5b83\u5141\u8bb8\u4f60\u5c06\u8bf7\u6c42\u6cbf\u7740\u5904\u7406\u8005\u94fe\u8fdb\u884c\u53d1\u9001\u3002\u6536\u5230\u8bf7\u6c42\u540e\uff0c\u6bcf\u4e2a\u5904\u7406\u8005\u5747\u53ef\u5bf9\u8bf7\u6c42\u8fdb\u884c\u5904\u7406\uff0c\u6216\u5c06\u5176\u4f20\u9012\u7ed9\u94fe\u4e0a\u7684\u4e0b\u4e00\u4e2a\u5904\u7406\u8005\u3002</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-10%20%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%8A%BD%E8%B1%A1%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1/#_2","title":"\u6838\u5fc3\u601d\u60f3","text":"<ul> <li>\u89e3\u8026\u8bf7\u6c42\u53d1\u9001\u8005\u548c\u63a5\u6536\u8005\uff1a\u53d1\u9001\u8005\u4e0d\u9700\u8981\u77e5\u9053\u54ea\u4e2a\u5bf9\u8c61\u4f1a\u5904\u7406\u5176\u8bf7\u6c42\uff0c\u94fe\u4e2d\u7684\u5bf9\u8c61\u4e5f\u4e0d\u9700\u8981\u77e5\u9053\u53d1\u9001\u8005\u7684\u7ec6\u8282\u3002</li> <li>\u52a8\u6001\u7ec4\u5408\u8d23\u4efb\uff1a\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u5730\u7ec4\u5408\u94fe\u4e2d\u7684\u5904\u7406\u8005\uff0c\u6216\u8005\u4fee\u6539\u5b83\u4eec\u7684\u987a\u5e8f\u3002</li> <li>\u8bf7\u6c42\u9010\u7ea7\u5904\u7406\uff1a\u8bf7\u6c42\u5728\u94fe\u4e0a\u4f20\u9012\uff0c\u76f4\u5230\u6709\u4e00\u4e2a\u5904\u7406\u8005\u5904\u7406\u5b83\u4e3a\u6b62\u3002</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-10%20%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%8A%BD%E8%B1%A1%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1/#_3","title":"\u9002\u7528\u573a\u666f","text":"<ul> <li>\u5f53\u7a0b\u5e8f\u9700\u8981\u4f7f\u7528\u4e0d\u540c\u65b9\u5f0f\u5904\u7406\u4e0d\u540c\u79cd\u7c7b\u8bf7\u6c42\uff0c \u800c\u4e14\u8bf7\u6c42\u7c7b\u578b\u548c\u987a\u5e8f\u9884\u5148\u672a\u77e5\u65f6\u3002</li> <li>\u5f53\u5fc5\u987b\u6309\u987a\u5e8f\u6267\u884c\u591a\u4e2a\u5904\u7406\u5668\u65f6\u3002</li> <li>\u5f53\u6240\u9700\u5904\u7406\u5668\u96c6\u5408\u53ca\u5176\u987a\u5e8f\u4ec5\u5728\u8fd0\u884c\u65f6\u53ef\u7528\u65f6\u3002</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-10%20%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%8A%BD%E8%B1%A1%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1/#git-diff","title":"\u4ee3\u7801\u5b9e\u73b0\u5206\u6790 (\u57fa\u4e8e\u63d0\u4f9b\u7684 git diff)","text":"<p>Git diff \u4e2d\u5c55\u793a\u4e86\u4e24\u79cd\u8d23\u4efb\u94fe\uff08\u6216\u7c7b\u4f3c\u94fe\u8def\u5904\u7406\uff09\u7684\u5b9e\u73b0\u6a21\u578b\uff0c\u5206\u522b\u4f4d\u4e8e <code>model1</code> \u548c <code>model2</code> \u76f8\u5173\u7684\u4ee3\u7801\u4e2d\u3002</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-10%20%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%8A%BD%E8%B1%A1%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1/#model-1-singleton-chain-of-responsibility","title":"Model 1: \u5355\u4f8b\u8d23\u4efb\u94fe (Singleton Chain of Responsibility)","text":"<p>\u8fd9\u79cd\u6a21\u578b\u66f4\u63a5\u8fd1\u4f20\u7edf\u7684\u8d23\u4efb\u94fe\u5b9a\u4e49\uff0c\u901a\u8fc7\u663e\u5f0f\u94fe\u63a5\u6784\u5efa\u5904\u7406\u8005\u94fe\u6761\u3002</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-10%20%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%8A%BD%E8%B1%A1%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1/#_4","title":"\u6838\u5fc3\u63a5\u53e3\u4e0e\u62bd\u8c61\u7c7b","text":"<ul> <li><code>ILogicLink&lt;T, D, R&gt;</code>: \u5b9a\u4e49\u94fe\u4e2d\u5355\u4e2a\u8282\u70b9\u7684\u884c\u4e3a\u63a5\u53e3\u3002\u5b83\u7ee7\u627f\u81ea <code>ILogicChainArmory</code>\uff0c\u5e76\u589e\u52a0\u4e86 <code>apply</code> \u65b9\u6cd5\u7528\u4e8e\u5904\u7406\u8bf7\u6c42\u3002</li> <li>\u6587\u4ef6\u8def\u5f84: <code>doppler-group-buy-market-types/src/main/java/site/dopplerxd/types/designs/framework/link/model1/ILogicLink.java</code></li> <li><code>ILogicChainArmory&lt;T, D, R&gt;</code>: \u5b9a\u4e49\u94fe\u7684\u88c5\u914d\u80fd\u529b\uff0c\u4e3b\u8981\u5305\u542b <code>next()</code> \u548c <code>appendNext(ILogicLink&lt;T, D, R&gt; next)</code> \u65b9\u6cd5\u3002</li> <li>\u6587\u4ef6\u8def\u5f84: <code>doppler-group-buy-market-types/src/main/java/site/dopplerxd/types/designs/framework/link/model1/ILogicChainArmory.java</code></li> <li><code>AbstractLogicLink&lt;T, D, R&gt;</code>: <code>ILogicLink</code> \u7684\u62bd\u8c61\u5b9e\u73b0\u3002\u5b83\u7ba1\u7406\u5bf9\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u5f15\u7528 (<code>private ILogicLink&lt;T, D, R&gt; next;</code>)\uff0c\u5e76\u63d0\u4f9b\u4e86\u5c06\u8bf7\u6c42\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684 <code>protected R next(T requestParameter, D dynamicContext)</code> \u65b9\u6cd5\u3002</li> <li>\u6587\u4ef6\u8def\u5f84: <code>doppler-group-buy-market-types/src/main/java/site/dopplerxd/types/designs/framework/link/model1/AbstractLogicLink.java</code></li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-10%20%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%8A%BD%E8%B1%A1%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1/#_5","title":"\u6784\u5efa\u94fe","text":"<p>\u901a\u8fc7 <code>appendNext</code> \u65b9\u6cd5\u5c06\u5404\u4e2a\u903b\u8f91\u8282\u70b9\uff08\u5b9e\u73b0\u4e86 <code>ILogicLink</code> \u7684\u7c7b\uff0c\u5982 <code>RuleLogic101</code>, <code>RuleLogic102</code>\uff09\u624b\u52a8\u8fde\u63a5\u8d77\u6765\u5f62\u6210\u8d23\u4efb\u94fe\u3002</p> Java<pre><code>// \u793a\u4f8b\u6765\u81ea Rule01TradeRuleFactory.java\npublic ILogicLink&lt;String, Rule02TradeRuleFactory.DynamicContext, String&gt; openLogicLink() {\n    ruleLogic101.appendNext(ruleLogic102);\n    return ruleLogic101; // \u8fd4\u56de\u94fe\u7684\u5934\u8282\u70b9\n}\n</code></pre>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-10%20%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%8A%BD%E8%B1%A1%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1/#_6","title":"\u8bf7\u6c42\u5904\u7406\u6d41\u7a0b","text":"<ol> <li>\u8bf7\u6c42\u4ece\u94fe\u7684\u5934\u8282\u70b9\uff08\u5982 <code>ruleLogic101</code>\uff09\u5f00\u59cb\u3002</li> <li>\u5f53\u524d\u8282\u70b9\u7684 <code>apply</code> \u65b9\u6cd5\u88ab\u8c03\u7528\u3002\u8282\u70b9\u53ef\u4ee5\u5904\u7406\u8bf7\u6c42\uff0c\u6216\u8005\u901a\u8fc7\u8c03\u7528\u5176\u7236\u7c7b <code>AbstractLogicLink</code> \u7684 <code>next(requestParameter, dynamicContext)</code> \u65b9\u6cd5\u5c06\u8bf7\u6c42\u4f20\u9012\u7ed9\u94fe\u4e2d\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002</li> <li>\u5982\u679c <code>next()</code> \u65b9\u6cd5\u88ab\u8c03\u7528\uff0c\u5b83\u4f1a\u8c03\u7528\u4e0b\u4e00\u4e2a\u94fe\u63a5\u8282\u70b9\u7684 <code>apply</code> \u65b9\u6cd5\u3002</li> <li>\u8fd9\u4e2a\u8fc7\u7a0b\u6301\u7eed\u8fdb\u884c\uff0c\u76f4\u5230\u8bf7\u6c42\u88ab\u67d0\u4e2a\u8282\u70b9\u5b8c\u5168\u5904\u7406\uff08\u53ef\u80fd\u4e0d\u518d\u8c03\u7528 <code>next()</code> \u5e76\u8fd4\u56de\u7ed3\u679c\uff09\uff0c\u6216\u8005\u5230\u8fbe\u94fe\u7684\u672b\u5c3e\u3002</li> </ol> Java<pre><code>// \u793a\u4f8b: RuleLogic101.java\n@Override\npublic String apply(String requestParameter, Rule02TradeRuleFactory.DynamicContext dynamicContext) throws Exception {\n    log.info(\"link model01 RuleLogic101\");\n    return next(requestParameter, dynamicContext); // \u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u8282\u70b9\n}\n\n// \u793a\u4f8b: RuleLogic102.java (\u94fe\u7684\u672b\u7aef)\n@Override\npublic String apply(String requestParameter, Rule02TradeRuleFactory.DynamicContext dynamicContext) throws Exception {\n    log.info(\"link model01 RuleLogic102\");\n    return \"link model01 \u5355\u5b9e\u4f8b\u94fe\"; // \u5904\u7406\u5e76\u8fd4\u56de\u7ed3\u679c\n}\n</code></pre>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-10%20%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%8A%BD%E8%B1%A1%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1/#_7","title":"\u76f8\u5173\u6587\u4ef6","text":"<ul> <li><code>doppler-group-buy-market-types/src/main/java/site/dopplerxd/types/designs/framework/link/model1/ILogicLink.java</code></li> <li><code>doppler-group-buy-market-types/src/main/java/site/dopplerxd/types/designs/framework/link/model1/ILogicChainArmory.java</code></li> <li><code>doppler-group-buy-market-types/src/main/java/site/dopplerxd/types/designs/framework/link/model1/AbstractLogicLink.java</code></li> <li><code>doppler-group-buy-market-app/src/test/java/site/dopplerxd/test/types/rule01/factory/Rule01TradeRuleFactory.java</code></li> <li><code>doppler-group-buy-market-app/src/test/java/site/dopplerxd/test/types/rule01/logic/RuleLogic101.java</code></li> <li><code>doppler-group-buy-market-app/src/test/java/site/dopplerxd/test/types/rule01/logic/RuleLogic102.java</code></li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-10%20%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%8A%BD%E8%B1%A1%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1/#model-2-business-link-multi-instance-handler-chain","title":"Model 2: \u4e1a\u52a1\u94fe\u8def/\u591a\u5b9e\u4f8b\u5904\u7406\u5668\u94fe (Business Link / Multi-instance Handler Chain)","text":"<p>\u8fd9\u79cd\u6a21\u578b\u4f7f\u7528\u4e00\u4e2a\u96c6\u5408\uff08\u81ea\u5b9a\u4e49\u94fe\u8868\uff09\u6765\u7ba1\u7406\u4e00\u7cfb\u5217\u72ec\u7acb\u7684\u5904\u7406\u5668\u3002\u94fe\u7684\u6267\u884c\u7531\u8be5\u96c6\u5408\u63a7\u5236\uff0c\u4f9d\u6b21\u8c03\u7528\u6bcf\u4e2a\u5904\u7406\u5668\u7684\u5904\u7406\u65b9\u6cd5\u3002</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-10%20%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%8A%BD%E8%B1%A1%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1/#_8","title":"\u6838\u5fc3\u63a5\u53e3\u4e0e\u7c7b","text":"<ul> <li><code>ILogicHandler&lt;T, D, R&gt;</code>: \u5b9a\u4e49\u94fe\u4e2d\u5904\u7406\u5355\u5143\u7684\u63a5\u53e3\u3002\u6838\u5fc3\u65b9\u6cd5\u662f <code>apply(T requestParameter, D dynamicContext)</code>\u3002</li> <li>(\u6b64\u63a5\u53e3\u5b9a\u4e49\u672a\u5728 diff \u4e2d\u76f4\u63a5\u663e\u793a\uff0c\u4f46\u5176\u4f7f\u7528\u8d2f\u7a7f Model 2 \u7684\u5b9e\u73b0)</li> <li><code>LinkedList&lt;E&gt;</code> \u548c <code>ILink&lt;E&gt;</code>: \u901a\u7528\u7684\u53cc\u5411\u94fe\u8868\u6570\u636e\u7ed3\u6784\u53ca\u5176\u63a5\u53e3\uff0c\u7528\u4e8e\u5b58\u50a8 <code>ILogicHandler</code> \u5b9e\u4f8b\u3002</li> <li>\u6587\u4ef6\u8def\u5f84: <code>doppler-group-buy-market-types/src/main/java/site/dopplerxd/types/designs/framework/link/model2/chain/LinkedList.java</code></li> <li>\u6587\u4ef6\u8def\u5f84: <code>doppler-group-buy-market-types/src/main/java/site/dopplerxd/types/designs/framework/link/model2/chain/ILink.java</code></li> <li><code>BusinessLinkedList&lt;T, D, R&gt;</code>: \u7ee7\u627f\u81ea <code>LinkedList&lt;ILogicHandler&lt;T, D, R&gt;&gt;</code>\uff0c\u5e76\u4e14\u81ea\u8eab\u4e5f\u5b9e\u73b0\u4e86 <code>ILogicHandler&lt;T, D, R&gt;</code> \u63a5\u53e3\u3002\u5b83\u4ee3\u8868\u4e00\u4e2a\u53ef\u6267\u884c\u7684\u4e1a\u52a1\u94fe\u8def\uff0c\u5185\u90e8\u6309\u987a\u5e8f\u5b58\u50a8\u548c\u6267\u884c\u4e00\u7cfb\u5217 <code>ILogicHandler</code>\u3002</li> <li>\u6587\u4ef6\u8def\u5f84: <code>doppler-group-buy-market-types/src/main/java/site/dopplerxd/types/designs/framework/link/model2/chain/BusinessLinkedList.java</code></li> <li><code>LinkArmory&lt;T, D, R&gt;</code>: \u4e00\u4e2a\u5de5\u5382\u6216\u88c5\u914d\u7c7b\uff0c\u7528\u4e8e\u65b9\u4fbf\u5730\u521b\u5efa\u548c\u521d\u59cb\u5316 <code>BusinessLinkedList</code>\uff0c\u5c06\u591a\u4e2a <code>ILogicHandler</code> \u5b9e\u4f8b\u6dfb\u52a0\u5230\u94fe\u4e2d\u3002</li> <li>\u6587\u4ef6\u8def\u5f84: <code>doppler-group-buy-market-types/src/main/java/site/dopplerxd/types/designs/framework/link/model2/LinkArmory.java</code></li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-10%20%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%8A%BD%E8%B1%A1%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1/#_9","title":"\u6784\u5efa\u94fe","text":"<p><code>LinkArmory</code> \u5728\u5176\u6784\u9020\u51fd\u6570\u4e2d\u63a5\u6536\u4e00\u4e2a\u6216\u591a\u4e2a <code>ILogicHandler</code> \u5b9e\u4f8b\uff0c\u5e76\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230\u5185\u90e8\u521b\u5efa\u7684 <code>BusinessLinkedList</code> \u4e2d\u3002</p> Java<pre><code>// \u793a\u4f8b\u6765\u81ea Rule02TradeRuleFactory.java\n@Bean(\"demo01\")\npublic BusinessLinkedList&lt;String, DynamicContext, XxxResponse&gt; demo01(RuleLogic201 ruleLogic201, RuleLogic202 ruleLogic202) {\n    LinkArmory&lt;String, DynamicContext, XxxResponse&gt; linkArmory = new LinkArmory&lt;&gt;(\"demo01\", ruleLogic201, ruleLogic202);\n    return linkArmory.getLogicLink();\n}\n</code></pre>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-10%20%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%8A%BD%E8%B1%A1%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1/#_10","title":"\u8bf7\u6c42\u5904\u7406\u6d41\u7a0b","text":"<ol> <li>\u5f53 <code>BusinessLinkedList</code> \u7684 <code>apply</code> \u65b9\u6cd5\u88ab\u8c03\u7528\u65f6\uff0c\u5b83\u4f1a\u904d\u5386\u5176\u5185\u90e8\u5b58\u50a8\u7684 <code>ILogicHandler</code> \u8282\u70b9\uff08\u4ece <code>first</code> \u8282\u70b9\u5f00\u59cb\uff09\u3002</li> <li>\u5bf9\u4e8e\u94fe\u8868\u4e2d\u7684\u6bcf\u4e2a <code>ILogicHandler</code> (item)\uff0c\u8c03\u7528\u5176 <code>apply</code> \u65b9\u6cd5\u3002</li> <li>\u5982\u679c\u67d0\u4e2a <code>item.apply(...)</code> \u8fd4\u56de\u4e86\u4e00\u4e2a\u975e <code>null</code> \u7684\u7ed3\u679c\uff0c<code>BusinessLinkedList</code> \u4f1a\u7acb\u5373\u8fd4\u56de\u8fd9\u4e2a\u7ed3\u679c\uff0c\u540e\u7eed\u7684\u5904\u7406\u5668\u5c06\u4e0d\u518d\u6267\u884c\u3002</li> <li>\u5982\u679c\u904d\u5386\u5b8c\u6240\u6709\u5904\u7406\u5668\uff0c\u90fd\u6ca1\u6709\u8fd4\u56de\u975e <code>null</code> \u7684\u7ed3\u679c\uff0c\u5219 <code>BusinessLinkedList</code> \u7684 <code>apply</code> \u65b9\u6cd5\u8fd4\u56de <code>null</code>\u3002</li> </ol> Java<pre><code>// BusinessLinkedList.java \u7684 apply \u65b9\u6cd5\u7247\u6bb5\npublic R apply(T requestParameter, D dynamicContext) throws Exception {\n    Node&lt;ILogicHandler&lt;T, D, R&gt;&gt; current = this.first;\n    do {\n        ILogicHandler&lt;T, D, R&gt; item = current.item;\n        R apply = item.apply(requestParameter, dynamicContext);\n        if (apply != null) {\n            return apply; // \u4e00\u65e6\u6709\u5904\u7406\u5668\u8fd4\u56de\u7ed3\u679c\uff0c\u5219\u4e2d\u65ad\u5e76\u8fd4\u56de\n        }\n        current = current.next;\n    } while (current != null);\n    return null; // \u6240\u6709\u5904\u7406\u5668\u5747\u672a\u8fd4\u56de\u6709\u6548\u7ed3\u679c\n}\n</code></pre> <ul> <li>\u5173\u4e8e <code>ILogicHandler</code> \u5185\u90e8\u7684 <code>next()</code> \u8c03\u7528:   \u5728 <code>RuleLogic201.java</code> \u4e2d\uff0c\u5176 <code>apply</code> \u65b9\u6cd5\u8c03\u7528\u4e86 <code>next(requestParameter, dynamicContext)</code>\u3002\u5982\u679c <code>ILogicHandler</code> \u63a5\u53e3\u672c\u8eab\u6ca1\u6709\u5b9a\u4e49 <code>next</code> \u65b9\u6cd5\uff08\u6216\u9ed8\u8ba4\u5b9e\u73b0\uff09\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u672a\u5b8c\u6210\u7684\u7279\u6027\u6216\u7279\u5b9a\u4e8e <code>RuleLogic201</code> \u7684\u5185\u90e8\u903b\u8f91\u3002<code>BusinessLinkedList</code> \u7684\u4e3b\u8981\u8fed\u4ee3\u673a\u5236\u662f\u901a\u8fc7\u904d\u5386\u5176\u8282\u70b9\u5217\u8868\uff0c\u800c\u4e0d\u662f\u4f9d\u8d56\u5904\u7406\u5668\u5185\u90e8\u7684 <code>next()</code> \u8c03\u7528\u6765\u9a71\u52a8\u5230 \u5217\u8868\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5904\u7406\u5668\u3002</li> </ul> Java<pre><code>// \u793a\u4f8b: RuleLogic201.java\npublic XxxResponse apply(String requestParameter, Rule02TradeRuleFactory.DynamicContext dynamicContext) throws Exception{\n    log.info(\"link model02 RuleLogic201\");\n    return next(requestParameter, dynamicContext); // \u6b64 next \u7684\u884c\u4e3a\u53d6\u51b3\u4e8e ILogicHandler \u6216\u5176\u7236\u7c7b/\u63a5\u53e3\u7684\u5b9a\u4e49\n}\n\n// \u793a\u4f8b: RuleLogic202.java\npublic XxxResponse apply(String requestParameter, Rule02TradeRuleFactory.DynamicContext dynamicContext) throws Exception{\n    log.info(\"link model02 RuleLogic202\");\n    return new XxxResponse(\"hi \u5c0f\u5085\u54e5\uff01\"); // \u5904\u7406\u5e76\u8fd4\u56de\u7ed3\u679c\n}\n</code></pre>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-10%20%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%8A%BD%E8%B1%A1%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1/#_11","title":"\u76f8\u5173\u6587\u4ef6","text":"<ul> <li><code>doppler-group-buy-market-types/src/main/java/site/dopplerxd/types/designs/framework/link/model2/handler/ILogicHandler.java</code> (\u63a8\u65ad)</li> <li><code>doppler-group-buy-market-types/src/main/java/site/dopplerxd/types/designs/framework/link/model2/LinkArmory.java</code></li> <li><code>doppler-group-buy-market-types/src/main/java/site/dopplerxd/types/designs/framework/link/model2/chain/BusinessLinkedList.java</code></li> <li><code>doppler-group-buy-market-types/src/main/java/site/dopplerxd/types/designs/framework/link/model2/chain/ILink.java</code></li> <li><code>doppler-group-buy-market-types/src/main/java/site/dopplerxd/types/designs/framework/link/model2/chain/LinkedList.java</code></li> <li><code>doppler-group-buy-market-app/src/test/java/site/dopplerxd/test/types/rule02/factory/Rule02TradeRuleFactory.java</code></li> <li><code>doppler-group-buy-market-app/src/test/java/site/dopplerxd/test/types/rule02/logic/RuleLogic201.java</code></li> <li><code>doppler-group-buy-market-app/src/test/java/site/dopplerxd/test/types/rule02/logic/RuleLogic202.java</code></li> <li><code>doppler-group-buy-market-app/src/test/java/site/dopplerxd/test/types/rule02/logic/XxxResponse.java</code></li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-10%20%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%8A%BD%E8%B1%A1%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1/#_12","title":"\u603b\u7ed3\u4e0e\u5bf9\u6bd4","text":"<ul> <li>Model 1 (\u5355\u4f8b\u8d23\u4efb\u94fe):</li> <li>\u7ed3\u6784\uff1a\u5904\u7406\u8005\u4e4b\u95f4\u901a\u8fc7 <code>next</code> \u6307\u9488\u663e\u5f0f\u94fe\u63a5\uff0c\u5f62\u6210\u5355\u5411\u94fe\u3002</li> <li>\u63a7\u5236\u6d41\uff1a\u7531\u5f53\u524d\u5904\u7406\u8005\u51b3\u5b9a\u662f\u5426\u5904\u7406\u4ee5\u53ca\u662f\u5426\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u5904\u7406\u8005\u3002</li> <li> <p>\u7075\u6d3b\u6027\uff1a\u94fe\u7684\u6784\u5efa\u76f8\u5bf9\u56fa\u5b9a\uff0c\u4f46\u53ef\u4ee5\u5728\u62bd\u8c61\u7c7b\u4e2d\u52a0\u5165\u66f4\u591a\u901a\u7528\u903b\u8f91\u3002</p> </li> <li> <p>Model 2 (\u4e1a\u52a1\u94fe\u8def/\u591a\u5b9e\u4f8b\u5904\u7406\u5668\u94fe):</p> </li> <li>\u7ed3\u6784\uff1a\u5904\u7406\u8005\u4f5c\u4e3a\u72ec\u7acb\u5bf9\u8c61\u5b58\u5728\uff0c\u7531\u4e00\u4e2a\u5916\u90e8\u5bb9\u5668\uff08<code>BusinessLinkedList</code>\uff09\u6309\u987a\u5e8f\u7ba1\u7406\u3002</li> <li>\u63a7\u5236\u6d41\uff1a\u7531\u5bb9\u5668\uff08<code>BusinessLinkedList</code>\uff09\u8fed\u4ee3\u8c03\u7528\u6bcf\u4e2a\u5904\u7406\u8005\u7684 <code>apply</code> \u65b9\u6cd5\u3002\u4e00\u65e6\u67d0\u4e2a\u5904\u7406\u5668\u8fd4\u56de\u6709\u6548\u7ed3\u679c\uff0c\u94fe\u5f0f\u8c03\u7528\u901a\u5e38\u4f1a\u4e2d\u6b62\u3002</li> <li>\u7075\u6d3b\u6027\uff1a\u66f4\u5bb9\u6613\u52a8\u6001\u589e\u5220\u5904\u7406\u5668\uff08\u901a\u8fc7\u4fee\u6539 <code>BusinessLinkedList</code> \u7684\u5185\u5bb9\uff09\u3002\u5904\u7406\u5668\u4e4b\u95f4\u8026\u5408\u5ea6\u66f4\u4f4e\uff0c\u5b83\u4eec\u4e0d\u9700\u8981\u77e5\u9053\u5f7c\u6b64\u7684\u5b58\u5728\uff0c\u53ea\u9700\u5b9e\u73b0 <code>ILogicHandler</code> \u63a5\u53e3\u3002</li> </ul> <p>\u4e24\u79cd\u6a21\u578b\u90fd\u65e8\u5728\u5c06\u4e00\u7cfb\u5217\u5904\u7406\u6b65\u9aa4\u89e3\u8026\u5e76\u6709\u5e8f\u5730\u7ec4\u7ec7\u8d77\u6765\u3002Model 1 \u662f\u7ecf\u5178\u7684\u8d23\u4efb\u94fe\u5b9e\u73b0\uff0c\u800c Model 2 \u66f4\u50cf\u662f\u4e00\u4e2a\u57fa\u4e8e\u5217\u8868\u7684\u5904\u7406\u5668\u8c03\u5ea6\u6216\u7ec4\u5408\u6a21\u5f0f\uff0c\u63d0\u4f9b\u4e86\u53e6\u4e00\u79cd\u6784\u5efa\u6709\u5e8f\u5904\u7406\u6d41\u7a0b\u7684\u601d\u8def\uff0c\u5c24\u5176\u9002\u7528\u4e8e\u5904\u7406\u5668\u8fd4\u56de\u7ed3\u679c\u5373\u8868\u793a\u5904\u7406\u5b8c\u6210\u7684\u573a\u666f\u3002</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-11%20%E4%BA%A4%E6%98%93%E8%A7%84%E5%88%99%E8%B4%A3%E4%BB%BB%E9%93%BE%E8%BF%87%E6%BB%A4/","title":"2-11 \u4ea4\u6613\u89c4\u5219\u8d23\u4efb\u94fe\u8fc7\u6ee4","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-11%20%E4%BA%A4%E6%98%93%E8%A7%84%E5%88%99%E8%B4%A3%E4%BB%BB%E9%93%BE%E8%BF%87%E6%BB%A4/#_1","title":"\u4e00\u3001\u4e1a\u52a1\u80cc\u666f\u4e0e\u76ee\u6807","text":"<p>\u4ea4\u6613\u89c4\u5219\u8d23\u4efb\u94fe\u8fc7\u6ee4\u7528\u4e8e\u5728\u56e2\u8d2d\u4ea4\u6613\u6d41\u7a0b\u4e2d\uff0c\u5bf9\u7528\u6237\u4e0b\u5355\u3001\u6d3b\u52a8\u53c2\u4e0e\u7b49\u5173\u952e\u73af\u8282\u8fdb\u884c\u89c4\u5219\u6821\u9a8c\u548c\u8fc7\u6ee4\uff0c\u786e\u4fdd\u4e1a\u52a1\u5408\u89c4\u3001\u98ce\u63a7\u6709\u6548\uff0c\u5e76\u652f\u6301\u7075\u6d3b\u6269\u5c55\u548c\u52a8\u6001\u8c03\u6574\u3002</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-11%20%E4%BA%A4%E6%98%93%E8%A7%84%E5%88%99%E8%B4%A3%E4%BB%BB%E9%93%BE%E8%BF%87%E6%BB%A4/#_2","title":"\u4e8c\u3001\u6838\u5fc3\u6d41\u7a0b\u68b3\u7406","text":"<ol> <li>\u8bf7\u6c42\u53d1\u8d77\uff1a\u7528\u6237\u5728\u56e2\u8d2d\u6d3b\u52a8\u4e2d\u53d1\u8d77\u4e0b\u5355\u8bf7\u6c42\u3002</li> <li>\u7ec4\u88c5\u547d\u4ee4\u5bf9\u8c61\uff1a\u7cfb\u7edf\u5c06\u7528\u6237ID\u3001\u6d3b\u52a8ID\u7b49\u5173\u952e\u4fe1\u606f\u5c01\u88c5\u4e3a <code>TradeRuleCommandEntity</code>\u3002</li> <li>\u8d23\u4efb\u94fe\u8fc7\u6ee4\u6267\u884c\uff1a</li> <li>\u901a\u8fc7 <code>BusinessLinkedList&lt;TradeRuleCommandEntity, DynamicContext, TradeRuleFilterBackEntity&gt;</code> \u8d23\u4efb\u94fe\u7ed3\u6784\uff0c\u4f9d\u6b21\u6267\u884c\u5404\u4e2a\u89c4\u5219\u8282\u70b9\u3002</li> <li>\u5178\u578b\u8282\u70b9\u5305\u62ec\uff1a<ul> <li>\u6d3b\u52a8\u53ef\u7528\u6027\u6821\u9a8c\uff08<code>ActivityUsabilityRuleFilter</code>\uff09</li> <li>\u7528\u6237\u53c2\u56e2\u6b21\u6570\u9650\u5236\uff08<code>UserTakeLimitRuleFilter</code>\uff09</li> </ul> </li> <li>\u6bcf\u4e2a\u8282\u70b9\u6839\u636e\u4e1a\u52a1\u903b\u8f91\u5224\u65ad\u662f\u5426\u653e\u884c\u6216\u62e6\u622a\uff0c\u5fc5\u8981\u65f6\u53ef\u7ec8\u6b62\u540e\u7eed\u6d41\u7a0b\u3002</li> <li>\u7ed3\u679c\u56de\u4f20\uff1a\u8d23\u4efb\u94fe\u6267\u884c\u7ed3\u679c\u5c01\u88c5\u4e3a <code>TradeRuleFilterBackEntity</code>\uff0c\u5982\u7528\u6237\u53ef\u4e0b\u5355\u6b21\u6570\u7b49\uff0c\u4f9b\u540e\u7eed\u4e1a\u52a1\u5904\u7406\u3002</li> </ol>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-11%20%E4%BA%A4%E6%98%93%E8%A7%84%E5%88%99%E8%B4%A3%E4%BB%BB%E9%93%BE%E8%BF%87%E6%BB%A4/#_3","title":"\u4e09\u3001\u5173\u952e\u7c7b\u4e0e\u63a5\u53e3","text":"<ul> <li>TradeRuleCommandEntity\uff1a\u547d\u4ee4\u53c2\u6570\u5bf9\u8c61\uff0c\u5305\u542b userId\u3001activityId \u7b49\u3002</li> <li>TradeRuleFilterBackEntity\uff1a\u8d23\u4efb\u94fe\u6267\u884c\u7ed3\u679c\u5bf9\u8c61\uff0c\u5305\u542b userTakeOrderCount \u7b49\u3002</li> <li>TradeRuleFilterFactory\uff1a\u8d23\u4efb\u94fe\u5de5\u5382\uff0c\u8d1f\u8d23\u7ec4\u88c5\u94fe\u8def\u3002</li> <li>BusinessLinkedList\uff1a\u8d23\u4efb\u94fe\u6838\u5fc3\u5b9e\u73b0\uff0c\u652f\u6301\u8282\u70b9\u52a8\u6001\u7ec4\u5408\u3002</li> <li>ActivityUsabilityRuleFilter / UserTakeLimitRuleFilter\uff1a\u5177\u4f53\u89c4\u5219\u8282\u70b9\uff0c\u5b9e\u73b0\u94fe\u5f0f\u8fc7\u6ee4\u3002</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-11%20%E4%BA%A4%E6%98%93%E8%A7%84%E5%88%99%E8%B4%A3%E4%BB%BB%E9%93%BE%E8%BF%87%E6%BB%A4/#_4","title":"\u56db\u3001\u5b9e\u73b0\u8981\u70b9","text":"<ul> <li>\u91c7\u7528\u94fe\u5f0f\u8c03\u7528\u6a21\u5f0f\uff0c\u8282\u70b9\u95f4\u89e3\u8026\uff0c\u4fbf\u4e8e\u6269\u5c55\u548c\u7ef4\u62a4\u3002</li> <li>\u6bcf\u4e2a\u89c4\u5219\u8282\u70b9\u5b9e\u73b0\u7edf\u4e00\u63a5\u53e3\uff0c\u4fbf\u4e8e\u8d23\u4efb\u94fe\u5de5\u5382\u81ea\u52a8\u88c5\u914d\u3002</li> <li>\u652f\u6301\u52a8\u6001\u4e0a\u4e0b\u6587\uff08DynamicContext\uff09\u4f20\u9012\uff0c\u6ee1\u8db3\u590d\u6742\u4e1a\u52a1\u573a\u666f\u3002</li> <li>\u8d23\u4efb\u94fe\u6267\u884c\u7ed3\u679c\u53ef\u7075\u6d3b\u6269\u5c55\uff0c\u4fbf\u4e8e\u540e\u7eed\u4e1a\u52a1\u5904\u7406\u3002</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-11%20%E4%BA%A4%E6%98%93%E8%A7%84%E5%88%99%E8%B4%A3%E4%BB%BB%E9%93%BE%E8%BF%87%E6%BB%A4/#_5","title":"\u4e94\u3001\u4e1a\u52a1\u610f\u4e49","text":"<ul> <li>\u7075\u6d3b\u6269\u5c55\uff1a\u65b0\u589e\u6216\u8c03\u6574\u89c4\u5219\u8282\u70b9\u65e0\u9700\u5f71\u54cd\u6574\u4f53\u6d41\u7a0b\u3002</li> <li>\u9ad8\u5185\u805a\u4f4e\u8026\u5408\uff1a\u5404\u8282\u70b9\u804c\u8d23\u5355\u4e00\uff0c\u4fbf\u4e8e\u5355\u5143\u6d4b\u8bd5\u548c\u7ef4\u62a4\u3002</li> <li>\u52a8\u6001\u914d\u7f6e\uff1a\u53ef\u6839\u636e\u4e1a\u52a1\u9700\u6c42\u52a8\u6001\u8c03\u6574\u8d23\u4efb\u94fe\u7ed3\u6784\u3002</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-11%20%E4%BA%A4%E6%98%93%E8%A7%84%E5%88%99%E8%B4%A3%E4%BB%BB%E9%93%BE%E8%BF%87%E6%BB%A4/#_6","title":"\u516d\u3001\u5178\u578b\u8c03\u7528\u5173\u7cfb\u793a\u610f","text":"Text Only<pre><code>graph TD\nA[\u7528\u6237\u4e0b\u5355\u8bf7\u6c42] --&gt; B[\u7ec4\u88c5TradeRuleCommandEntity]\nB --&gt; C[\u8d23\u4efb\u94fe\u8fc7\u6ee4]\nC --&gt; C1[\u6d3b\u52a8\u53ef\u7528\u6027\u6821\u9a8c]\nC1 --&gt; C2[\u7528\u6237\u53c2\u56e2\u6b21\u6570\u9650\u5236]\nC2 --&gt; D[\u8fd4\u56deTradeRuleFilterBackEntity]\n</code></pre>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-11%20%E4%BA%A4%E6%98%93%E8%A7%84%E5%88%99%E8%B4%A3%E4%BB%BB%E9%93%BE%E8%BF%87%E6%BB%A4/#_7","title":"\u4e03\u3001\u53c2\u8003\u4ee3\u7801\u7247\u6bb5","text":"Java<pre><code>// \u8d23\u4efb\u94fe\u5de5\u5382\u7ec4\u88c5\n@Bean(\"tradeRuleFilter\")\npublic BusinessLinkedList&lt;TradeRuleCommandEntity, DynamicContext, TradeRuleFilterBackEntity&gt; tradeRuleFilter(\n    ActivityUsabilityRuleFilter activityUsabilityRuleFilter,\n    UserTakeLimitRuleFilter userTakeLimitRuleFilter) {\n    LinkArmory&lt;TradeRuleCommandEntity, DynamicContext, TradeRuleFilterBackEntity&gt; linkArmory = new LinkArmory&lt;&gt;(\n        \"\u4ea4\u6613\u89c4\u5219\u8d23\u4efb\u94fe\",\n        activityUsabilityRuleFilter,\n        userTakeLimitRuleFilter);\n    return linkArmory.getLogicLink();\n}\n\n// \u8d23\u4efb\u94fe\u8c03\u7528\nTradeRuleFilterBackEntity result = tradeRuleFilter.apply(\n    TradeRuleCommandEntity.builder().userId(userId).activityId(activityId).build(),\n    new TradeRuleFilterFactory.DynamicContext()\n);\n</code></pre> <p>\u672c\u8282\u5185\u5bb9\u57fa\u4e8e git diff 2-10 \u81f3 2-11 \u7248\u672c\u53d8\u66f4\u68b3\u7406\uff0c\u805a\u7126\u4e8e\u4ea4\u6613\u89c4\u5219\u8d23\u4efb\u94fe\u8fc7\u6ee4\u7684\u4e1a\u52a1\u6d41\u7a0b\u4e0e\u5b9e\u73b0\u8981\u70b9\u3002</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-12%20%E6%8B%BC%E5%9B%A2%E7%BB%84%E9%98%9F%E7%BB%93%E7%AE%97%E7%BB%9F%E8%AE%A1/","title":"\u62fc\u56e2\u7ec4\u961f\u7ed3\u7b97\u7edf\u8ba1\u4e1a\u52a1\u6d41\u7a0b\u4e0e\u4ee3\u7801\u5b9e\u73b0\u68b3\u7406","text":"<p>\u661f\u5c18\u7684\u5b66\u4e60\u7b14\u8bb0 https://articles.zsxq.com/id_5tfh1ko2r2h6.html</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-12%20%E6%8B%BC%E5%9B%A2%E7%BB%84%E9%98%9F%E7%BB%93%E7%AE%97%E7%BB%9F%E8%AE%A1/#_2","title":"\u4e00\u3001\u4e1a\u52a1\u6d41\u7a0b\u6982\u8ff0","text":"<p>\u62fc\u56e2\u7ec4\u961f\u7ed3\u7b97\u7edf\u8ba1\u4e3b\u8981\u56f4\u7ed5\u7528\u6237\u53c2\u4e0e\u62fc\u56e2\u6d3b\u52a8\u3001\u8ba2\u5355\u652f\u4ed8\u3001\u7ec4\u961f\u8fbe\u6210\u3001\u7ed3\u7b97\u5206\u8d26\u7b49\u73af\u8282\u5c55\u5f00\u3002\u6838\u5fc3\u6d41\u7a0b\u5982\u4e0b\uff1a</p> <ol> <li>\u7528\u6237\u53c2\u4e0e\u62fc\u56e2\u6d3b\u52a8\uff0c\u751f\u6210\u9884\u8d2d\u8ba2\u5355\u5e76\u9501\u5b9a\u3002</li> <li>\u7528\u6237\u652f\u4ed8\u8ba2\u5355\uff0c\u89e6\u53d1\u7ed3\u7b97\u6d41\u7a0b\u3002</li> <li>\u7cfb\u7edf\u6839\u636e\u8ba2\u5355\u548c\u7ec4\u961f\u4fe1\u606f\uff0c\u66f4\u65b0\u62fc\u56e2\u8fdb\u5ea6\u4e0e\u72b6\u6001\u3002</li> <li>\u62fc\u56e2\u8fbe\u6210\u540e\uff0c\u6279\u91cf\u66f4\u65b0\u8ba2\u5355\u72b6\u6001\uff0c\u5b8c\u6210\u7ed3\u7b97\u3002</li> <li>\u7ed3\u7b97\u7ed3\u679c\u5199\u5165\u7ed3\u7b97\u8868\uff0c\u540e\u7eed\u53ef\u7528\u4e8e\u5206\u8d26\u3001\u7edf\u8ba1\u7b49\u3002</li> </ol> <p></p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-12%20%E6%8B%BC%E5%9B%A2%E7%BB%84%E9%98%9F%E7%BB%93%E7%AE%97%E7%BB%9F%E8%AE%A1/#_3","title":"\u4e8c\u3001\u6838\u5fc3\u5b9e\u4f53\u4e0e\u8868\u7ed3\u6784","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-12%20%E6%8B%BC%E5%9B%A2%E7%BB%84%E9%98%9F%E7%BB%93%E7%AE%97%E7%BB%9F%E8%AE%A1/#1","title":"1. \u4e3b\u8981\u8868\u7ed3\u6784","text":"<ul> <li>group_buy_order\uff1a\u62fc\u56e2\u7ec4\u961f\u8ba2\u5355\u8868\uff0c\u8bb0\u5f55\u7ec4\u961fID\u3001\u6d3b\u52a8ID\u3001\u62fc\u56e2\u76ee\u6807\u3001\u5b8c\u6210\u6570\u91cf\u3001\u72b6\u6001\u7b49\u3002</li> <li>group_buy_order_list\uff1a\u62fc\u56e2\u8ba2\u5355\u660e\u7ec6\u8868\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u7528\u6237\u7684\u8ba2\u5355\u3001\u72b6\u6001\u3001\u652f\u4ed8\u4fe1\u606f\u7b49\u3002</li> <li>group_buy_activity\u3001group_buy_discount\uff1a\u6d3b\u52a8\u4e0e\u4f18\u60e0\u914d\u7f6e\u3002</li> <li>notify_task\uff1a\u7ed3\u7b97\u56de\u8c03\u4efb\u52a1\u8868\u3002</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-12%20%E6%8B%BC%E5%9B%A2%E7%BB%84%E9%98%9F%E7%BB%93%E7%AE%97%E7%BB%9F%E8%AE%A1/#2","title":"2. \u5173\u952e\u5b9e\u4f53\u7c7b","text":"<ul> <li>GroupBuyTeamEntity\uff1a\u62fc\u56e2\u7ec4\u961f\u5b9e\u4f53\uff0c\u5305\u542bteamId\u3001activityId\u3001targetCount\u7b49\u5c5e\u6027\u3002</li> <li>GroupBuyTeamSettlementAggregate\uff1a\u62fc\u56e2\u7ec4\u961f\u7ed3\u7b97\u805a\u5408\uff0c\u805a\u5408\u7528\u6237\u3001\u7ec4\u961f\u3001\u652f\u4ed8\u8ba2\u5355\u7b49\u4fe1\u606f\u3002</li> <li>TradePaySuccessEntity\u3001TradePaySettlementEntity\uff1a\u4ea4\u6613\u652f\u4ed8\u4e0e\u7ed3\u7b97\u5b9e\u4f53\u3002</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-12%20%E6%8B%BC%E5%9B%A2%E7%BB%84%E9%98%9F%E7%BB%93%E7%AE%97%E7%BB%9F%E8%AE%A1/#_4","title":"\u4e09\u3001\u670d\u52a1\u63a5\u53e3\u4e0e\u5b9e\u73b0","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-12%20%E6%8B%BC%E5%9B%A2%E7%BB%84%E9%98%9F%E7%BB%93%E7%AE%97%E7%BB%9F%E8%AE%A1/#1_1","title":"1. \u7ed3\u7b97\u670d\u52a1\u63a5\u53e3","text":"Java<pre><code>public interface ITradeSettlementOrderService {\n    /**\n     * \u8425\u9500\u7ed3\u7b97\n     * @param tradePaySuccessEntity \u4ea4\u6613\u652f\u4ed8\u8ba2\u5355\u5b9e\u4f53\u5bf9\u8c61\n     * @return \u4ea4\u6613\u7ed3\u7b97\u8ba2\u5355\u5b9e\u4f53\n     */\n    TradePaySettlementEntity settlementMarketPayOrder(TradePaySuccessEntity tradePaySuccessEntity);\n}\n</code></pre>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-12%20%E6%8B%BC%E5%9B%A2%E7%BB%84%E9%98%9F%E7%BB%93%E7%AE%97%E7%BB%9F%E8%AE%A1/#2_1","title":"2. \u7ed3\u7b97\u670d\u52a1\u5b9e\u73b0","text":"<ul> <li>TradeSettlementOrderService \u5b9e\u73b0\u4e86\u4e0a\u8ff0\u63a5\u53e3\uff0c\u6838\u5fc3\u903b\u8f91\u5982\u4e0b\uff1a</li> <li>\u67e5\u8be2\u62fc\u56e2\u8ba2\u5355\u4fe1\u606f\uff08MarketPayOrderEntity\uff09\u3002</li> <li>\u67e5\u8be2\u7ec4\u56e2\u4fe1\u606f\uff08GroupBuyTeamEntity\uff09\u3002</li> <li>\u66f4\u65b0\u62fc\u56e2\u8ba2\u5355\u660e\u7ec6\u72b6\u6001\u4e3a\u5b8c\u6210\u3002</li> <li>\u66f4\u65b0\u7ec4\u56e2\u5b8c\u6210\u6570\u91cf\u3002</li> <li>\u82e5\u62fc\u56e2\u8fbe\u6210\u76ee\u6807\uff0c\u6279\u91cf\u66f4\u65b0\u7ec4\u56e2\u8ba2\u5355\u72b6\u6001\u4e3a\u5b8c\u6210\uff0c\u5e76\u67e5\u8be2\u6240\u6709\u5b8c\u6210\u8ba2\u5355\u53f7\u3002</li> <li>\u751f\u6210\u7ed3\u7b97\u5b9e\u4f53\uff0c\u5199\u5165\u7ed3\u7b97\u8868\u3002</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-12%20%E6%8B%BC%E5%9B%A2%E7%BB%84%E9%98%9F%E7%BB%93%E7%AE%97%E7%BB%9F%E8%AE%A1/#_5","title":"\u5173\u952e\u4ee3\u7801\u7247\u6bb5","text":"Java<pre><code>// 1. \u66f4\u65b0\u62fc\u56e2\u8ba2\u5355\u72b6\u6001\u660e\u7ec6\nint updateOrderListStatusCount = groupBuyOrderListDao.updateOrderStatus2COMPLETE(groupBuyOrderListReq);\nif (updateOrderListStatusCount != 1) {\n    throw new AppException(ResponseCode.UPDATE_ZERO);\n}\n// 2. \u66f4\u65b0\u62fc\u56e2\u8fbe\u6210\u6570\u91cf\nint updateAddCompleteCount = groupBuyOrderDao.updateAddCompleteCount(groupBuyTeamEntity.getTeamId());\nif (updateAddCompleteCount != 1) {\n    throw new AppException(ResponseCode.UPDATE_ZERO);\n}\n// 3. \u62fc\u56e2\u8fbe\u6210\u65f6\uff0c\u6279\u91cf\u66f4\u65b0\u8ba2\u5355\u72b6\u6001\nif (groupBuyTeamEntity.getTargetCount() - groupBuyTeamEntity.getCompleteCount() == 1) {\n    int updateOrderStatusCount = groupBuyOrderDao.updateOrderStatus2COMPLETE(groupBuyTeamEntity.getTeamId());\n    if (updateOrderStatusCount != 1) {\n        throw new AppException(ResponseCode.UPDATE_ZERO);\n    }\n    // \u67e5\u8be2\u62fc\u56e2\u4ea4\u6613\u5b8c\u6210\u5916\u90e8\u5355\u53f7\u5217\u8868\n    List&lt;String&gt; outTradeNoList = groupBuyOrderListDao.queryGroupBuyCompleteOrderOutTradeNoListByTeamId(groupBuyTeamEntity.getTeamId());\n    // ...\u540e\u7eed\u7ed3\u7b97\u5904\u7406\n}\n</code></pre>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-12%20%E6%8B%BC%E5%9B%A2%E7%BB%84%E9%98%9F%E7%BB%93%E7%AE%97%E7%BB%9F%E8%AE%A1/#_6","title":"\u56db\u3001\u6d41\u7a0b\u603b\u7ed3","text":"<ul> <li>\u7ed3\u7b97\u6d41\u7a0b\u4ee5\u8ba2\u5355\u652f\u4ed8\u4e3a\u89e6\u53d1\u70b9\uff0c\u4e32\u8054\u8ba2\u5355\u3001\u7ec4\u961f\u3001\u6d3b\u52a8\u7b49\u591a\u8868\u591a\u5b9e\u4f53\u3002</li> <li>\u901a\u8fc7\u805a\u5408\u6839\uff08GroupBuyTeamSettlementAggregate\uff09\u7edf\u4e00\u7ba1\u7406\u7ed3\u7b97\u6240\u9700\u4e0a\u4e0b\u6587\u3002</li> <li>\u7ed3\u7b97\u670d\u52a1\u5b9e\u73b0\u4e86\u62fc\u56e2\u8fdb\u5ea6\u3001\u72b6\u6001\u3001\u660e\u7ec6\u7684\u539f\u5b50\u6027\u66f4\u65b0\uff0c\u786e\u4fdd\u6570\u636e\u4e00\u81f4\u6027\u3002</li> <li>\u8fbe\u6210\u62fc\u56e2\u76ee\u6807\u540e\uff0c\u6279\u91cf\u5904\u7406\u8ba2\u5355\u72b6\u6001\uff0c\u4fbf\u4e8e\u540e\u7eed\u5206\u8d26\u4e0e\u7edf\u8ba1\u3002</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-12%20%E6%8B%BC%E5%9B%A2%E7%BB%84%E9%98%9F%E7%BB%93%E7%AE%97%E7%BB%9F%E8%AE%A1/#_7","title":"\u4e94\u3001\u76f8\u5173\u6280\u672f","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-12%20%E6%8B%BC%E5%9B%A2%E7%BB%84%E9%98%9F%E7%BB%93%E7%AE%97%E7%BB%9F%E8%AE%A1/#single-responsibility-principle","title":"\u5355\u4e00\u804c\u8d23\u539f\u5219 single responsibility principle","text":"<p><code>\u804c\u8d23</code> \u5b9a\u4e49\u4e3a\u6539\u53d8\u7684\u539f\u56e0\uff0cSRP \u6307\u7684\u662f\u4e00\u4e2a\u6a21\u5757\u5e94\u8be5\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u6539\u53d8\u7684\u539f\u56e0\u3002</p> <p>\u53cd\u4f8b\uff1a\u4e00\u4e2a\u7528\u4e8e\u7f16\u8f91\u548c\u6253\u5370\u62a5\u8868\u7684\u6a21\u5757\u3002</p> <ol> <li> <p>\u62a5\u8868\u7684\u5185\u5bb9\u53ef\u4ee5\u88ab\u6539\u53d8\uff08\u7f16\u8f91\uff09</p> </li> <li> <p>\u62a5\u8868\u7684\u683c\u5f0f\u53ef\u4ee5\u88ab\u6539\u53d8\uff08\u6253\u5370\uff09</p> </li> </ol> <p>SRP \u8ba4\u4e3a\u5e94\u8be5\u62c6\u89e3\u5c06\u4e24\u4e2a\u804c\u8d23\u3002</p> <p>\u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u505a\uff1f</p> <p>\u7ee7\u7eed\u4e0a\u9762\u7684\u6848\u4f8b\uff0c\u4fee\u6539\u7f16\u8f91\u529f\u80fd\uff0c\u5f88\u53ef\u80fd\u5f71\u54cd\u6253\u5370\u529f\u80fd\uff0c\u5177\u6709\u5371\u9669\u6027\u3002</p> <p>\u518d\u6bd4\u5982\uff0c\u8425\u9500\u4ea4\u6613\u9501\u5355\u548c\u7ed3\u7b97\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u4e1a\u52a1\uff0c\u62c6\u5206\u540e\u5177\u6709\u4e0b\u9762\u7684\u597d\u5904\uff0c</p> <ol> <li>\u964d\u4f4e\u590d\u6742\u6027\u3002</li> <li>\u63d0\u9ad8\u53ef\u8bfb\u6027\u3002</li> <li>\u63d0\u9ad8\u53ef\u7ef4\u62a4\u6027\u3002</li> <li>\u964d\u4f4e\u4f9d\u8d56\u98ce\u9669\u3002</li> </ol>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-13%20%E4%BA%A4%E6%98%93%E7%BB%93%E7%AE%97%E8%B4%A3%E4%BB%BB%E9%93%BE%E8%BF%87%E6%BB%A4/","title":"2 13 \u4ea4\u6613\u7ed3\u7b97\u8d23\u4efb\u94fe\u8fc7\u6ee4","text":"<p>\u661f\u5c18\u7684\u5b66\u4e60\u7b14\u8bb0 https://articles.zsxq.com/id_75jtgc875l1l.html</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-13%20%E4%BA%A4%E6%98%93%E7%BB%93%E7%AE%97%E8%B4%A3%E4%BB%BB%E9%93%BE%E8%BF%87%E6%BB%A4/#_1","title":"\u4e1a\u52a1\u6d41\u7a0b\u68b3\u7406","text":"<p>\u62fc\u56e2\u4ea4\u6613\u7ed3\u7b97\u7684\u8fc7\u7a0b\uff0c\u9700\u8981\u4e00\u4e9b\u5217\u7684\u89c4\u5219\u8fc7\u6ee4\u3002\u5305\u62ec\uff1b\u6211\u4eec\u4e0a\u4e00\u8282\u63d0\u5230\u7684\u6821\u9a8c\u5916\u90e8\u4ea4\u6613\u5355\u7684\u65f6\u95f4\u662f\u5426\u5728\u62fc\u56e2\u6709\u6548\u65f6\u95f4\u5185\uff0c\u540c\u65f6\u8fd8\u6709\u5173\u4e8e\u8fd9\u7b14\u5916\u90e8\u4ea4\u6613\u5355\u662f\u5426\u4e3a\u6709\u6548\u7684\u62fc\u56e2\u9501\u5355\u8ba2\u5355\u3002\u53e6\u5916\u50cf\u662f SC \u6e20\u9053\u7684\u6709\u6548\u6027\u4e5f\u9700\u8981\u5728\u7ed3\u7b97\u65f6\u8fdb\u884c\u6821\u9a8c\u3002</p> <p>\u6240\u4ee5\uff0c\u672c\u8282\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u4e00\u5957\u89c4\u5219\u94fe\uff0c\u6765\u5904\u7406\u8fd9\u4e9b\u4e1a\u52a1\u89c4\u5219\u3002\u56e0\u4e3a\u89c4\u5219\u94fe\u5df2\u7ecf\u88ab\u62bd\u53d6\u4e3a\u901a\u7528\u7684\u6a21\u677f\u4e86\uff0c\u90a3\u4e48\u672c\u8282\u4f7f\u7528\u8d77\u6765\u4f1a\u975e\u5e38\u5bb9\u6613\u3002</p> <p></p> <ul> <li> <p>\u9996\u5148\uff0c\u672c\u8282\u7684\u91cd\u70b9\u5728\u4e8e\u65b0\u589e\u52a0\u7ed3\u7b97\u89c4\u5219\u8fc7\u6ee4\u7684\u8d23\u4efb\u94fe\uff0c\u5904\u7406\uff1bSC\u6e20\u9053\u7ba1\u63a7\u3001\u6709\u6548\u7684\u5916\u90e8\u4ea4\u6613\u5355\u53f7\u3001\u7ed3\u7b97\u5b9e\u73b0\u662f\u5426\u4e3a\u62fc\u56e2\u65f6\u6548\u5185\u3002</p> </li> <li>\u90a3\u4e48\u8fd9\u91cc\u4f1a\u6709\u4e00\u4e9b\u529f\u80fd\u6539\u9020\u70b9\uff1b<ul> <li>\u62fc\u56e2\u8868\uff0cgroup_buy_order \u589e\u52a0 valid_start_time\uff08\u6709\u6548\u5f00\u59cb\u65f6\u95f4\uff09\u3001valid_end_time\uff08\u6709\u6548\u7ed3\u675f\u65f6\u95f4\uff09 \u5b57\u6bb5\u3002\u7528\u4e8e\u6bcf\u7b14\u4ea4\u6613\u7ed3\u7b97\u65f6\u5019\uff0c\u7528\u7ed3\u7b97\u65f6\u95f4\u5224\u65ad\u662f\u5426\u5339\u914d\u5230\u62fc\u56e2\u6709\u6548\u65f6\u95f4\u8303\u56f4\u5185\u3002</li> <li>\u62fc\u56e2\u660e\u7ec6\uff0cgroup_buy_order_list \u589e\u52a0 out_trade_time\uff08\u4ea4\u6613\u65f6\u95f4\uff09 \u5b57\u6bb5\uff0c\u8bb0\u5f55\u6bcf\u7b14\u7ed3\u7b97\u7684\u8ba2\u5355\u7ed3\u7b97\u7684\u65f6\u95f4\u3002\u968f\u7740\u72b6\u6001\u66f4\u65b0\u7684\u65f6\u5019\u66f4\u65b0\u3002</li> <li>trade \u9886\u57df\u4e0b\uff0clock \u9501\u5355\u3002\u5b9e\u4f53\u5bf9\u8c61\uff0c\u4fee\u6539\u540d\u79f0\u3002TradeRuleCommandEntity -&gt; TradeLockRuleCommandEntity,TradeRuleFilterBackEntity -&gt; TradeLockRuleFilterBackEntity \u589e\u52a0\u4e86 Lock \u6807\u8bc6\u3002\u4fbf\u4e8e\u5728\u6dfb\u52a0 TradeSettlementRuleCommandEntity\u3001TradeSettlementRuleFilterBackEntity \u65f6\u66f4\u597d\u7406\u89e3\u3002</li> <li>PayActivityEntity \u6dfb\u52a0 validTime\uff0cGroupBuyTeamEntity \u6dfb\u52a0 validStartTime\u3001validEndTime</li> <li>trade \u9886\u57df\u4e0b\uff0csettlement \u7ed3\u7b97\u670d\u52a1\u4e2d\uff0c\u4f7f\u7528\u8d23\u4efb\u94fe\u6a21\u677f\uff0c\u5b9e\u73b0\u8425\u9500\u4ea4\u6613\u89c4\u5219\u7684\u8fc7\u6ee4\u3002SCRuleFilter\uff08SC\u9ed1\u540d\u5355\u7ba1\u63a7\u8fc7\u6ee4 DCCService \u914d\u7f6e\u65b0\u7684\u5c5e\u6027 scBlacklist\uff09\u3001OutTradeNoRuleFilter\uff08\u5916\u90e8\u4ea4\u6613\u5355\u53f7\u6709\u6548\u6027\u8fc7\u6ee4\uff09\u3001SettableRuleFilter\uff08\u4ea4\u6613\u65f6\u95f4\u662f\u5426\u5728\u62fc\u56e2\u6709\u6548\u65f6\u95f4\u5185\u8fc7\u6ee4\uff09\u3001EndRuleFilter\uff08\u7ed3\u675f\u8282\u70b9\u5c01\u88c5\u8fd4\u56de\u6570\u636e\uff09</li> <li>\u4ea4\u6613\u670d\u52a1\uff0cTradePaySettlementEntity \u8c03\u7528 tradeSettlementRuleFilter \u8d23\u4efb\u94fe\u65b9\u6cd5\uff0c\u5e76\u8fd4\u56de\u76f8\u5173\u7684\u6570\u636e\u4fe1\u606f\u3002</li> <li>settlementMarketPayOrder \u7ed3\u7b97\u4e00\u4e2a\u4e8b\u52a1\u4e0b\u64cd\u4f5c\uff0c\u589e\u52a0 updateOrderStatus2COMPLETE \u66f4\u65b0\u65f6\u5019\u6dfb\u52a0 outTradeTime \u65f6\u95f4\u3002</li> </ul> </li> </ul> <p>\u5728\u8425\u9500\u4ea4\u6613\u7ed3\u7b97\u4e1a\u52a1\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u89c4\u5219\u8fc7\u6ee4\uff0c\u5305\u62ec\uff1a</p> <ul> <li>\u5224\u65adSC\u503c\u662f\u5426\u5728\u9ed1\u540d\u5355\uff1b</li> <li>\u5916\u90e8\u4ea4\u6613\u5355\u53f7\u662f\u5426\u7ed1\u5b9a\u4e00\u6761\u9501\u5355\u8bb0\uff1b</li> <li>\u5916\u90e8\u4ea4\u6613\u65f6\u95f4\u662f\u5426\u5728\u62fc\u56e2\u6d3b\u52a8\u65f6\u95f4\u8303\u56f4\u5185\uff1b</li> <li>\u5728\u8fd9\u4e9b\u89c4\u5219\u90fd\u6821\u9a8c\u901a\u8fc7\u540e\uff0c\u624d\u4f1a\u8fdb\u5165\u8425\u9500\u4ea4\u6613\u7ed3\u7b97\u7684\u6b63\u5f0f\u4e1a\u52a1\u6d41\u7a0b\u3002</li> </ul> <p></p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-14%20%E6%8B%BC%E5%9B%A2%E5%9B%9E%E8%B0%83%E9%80%9A%E7%9F%A5%E4%BB%BB%E5%8A%A1/","title":"2 14 \u62fc\u56e2\u56de\u8c03\u901a\u77e5\u4efb\u52a1","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-14%20%E6%8B%BC%E5%9B%A2%E5%9B%9E%E8%B0%83%E9%80%9A%E7%9F%A5%E4%BB%BB%E5%8A%A1/#_1","title":"\u8bc9\u6c42","text":"<p>\u5728\u5fae\u670d\u52a1\u8bbe\u8ba1\u4e2d\uff0c\u5f53\u4e00\u4e2a\u5fae\u670d\u52a1\u7cfb\u7edf\u7684\u6d41\u7a0b\u7ed3\u675f\u540e\uff0c\u8981\u901a\u77e5\u4e0b\u4e00\u4e2a\u5fae\u670d\u52a1\u7cfb\u7edf\u3002\u8fd9\u4e2a\u901a\u77e5\u7684\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u662f RPC\u3001MQ\uff0c\u4e5f\u53ef\u4ee5\u662f HTTP \u65b9\u5f0f\u3002  RPC\u3001MQ\uff0c\u8fd9\u4e00\u7c7b\u7684\u90fd\u662f\u9700\u8981\u6709\u4e00\u4e2a\u516c\u7528\u7684\u6ce8\u518c\u4e2d\u5fc3\uff0c\u5b83\u7684\u6280\u672f\u67b6\u6784\u6bd4\u8f83\u9002\u5408\u4e8e\u516c\u53f8\u5185\u90e8\u7684\u7edf\u4e00\u7cfb\u7edf\u4f7f\u7528\u3002\u5982\u679c\u662f\u6709\u548c\u5916\u90e8\u5176\u4ed6\u7cfb\u7edf\u7684\u5bf9\u63a5\uff0c\u901a\u5e38\u6211\u4eec\u4f1a\u4f7f\u7528 HTTP \u8fd9\u6837\u7edf\u4e00\u6807\u51c6\u534f\u8bae\u7684\u63a5\u53e3\u8fdb\u884c\u4f7f\u7528\u3002  \u90a3\u4e48\uff0c\u672c\u7ae0\u8282\u8981\u4e3a\u62fc\u56e2\u7ec4\u961f\u4ea4\u6613\u7ed3\u7b97\u5b8c\u7ed3\u540e\uff0c\u5b9e\u73b0\u4e00\u4e2a\u56de\u8c03\u901a\u77e5\u7684\u4efb\u52a1\u5904\u7406\u3002\u544a\u77e5\u53e6\u5916\u7684\u5fae\u670d\u52a1\u7cfb\u7edf\u53ef\u4ee5\u8fdb\u884c\u540e\u7eed\u7684\u6d41\u7a0b\u4e86\u3002  \u6ce8\u610f\uff1a\u5fae\u4fe1\u652f\u4ed8\uff0c\u652f\u4ed8\u5b9d\u652f\u4ed8\uff0c\u4e5f\u662f\u5728\u5b8c\u6210\u652f\u4ed8\u540e\uff0c\u505a\u7684\u8fd9\u6837\u7684\u56de\u8c03\u5904\u7406\u3002</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-14%20%E6%8B%BC%E5%9B%A2%E5%9B%9E%E8%B0%83%E9%80%9A%E7%9F%A5%E4%BB%BB%E5%8A%A1/#_2","title":"\u4e1a\u52a1\u6d41\u7a0b","text":"<ul> <li> <p>\u9996\u5148\uff0c\u672c\u8282\u7684\u91cd\u70b9\u5728\u62fc\u56e2\u6210\u56e2\u540e\uff0c\u5b9e\u73b0\u56de\u8c03\u901a\u77e5\u6d41\u7a0b\u3002\u56de\u8c03\u7684\u8fc7\u7a0b\uff0c\u9700\u8981\u5728\u7528\u6237\u9501\u5355\u65f6\u9700\u8981\u589e\u52a0\u4e00\u4e2a\u56de\u8c03\u7684\u5730\u5740\uff0c\u5e76\u5728\u62fc\u56e2\u5b8c\u7ed3\u540e\u53d1\u8d77\u56de\u8c03\u3002</p> </li> <li> <p>\u90a3\u4e48\uff0c\u8fd9\u91cc\u7684\u4e00\u4e9b\u529f\u80fd\u6539\u9020\u70b9\uff1b</p> <ul> <li><code>group_buy_order</code> \u5728\u8bbe\u8ba1\u7684\u65f6\u5019\u6709\u4e00\u4e2a <code>notify_url</code> \u56de\u8c03\u5730\u5740\uff0c\u672c\u8282\u6211\u4eec\u4fee\u6539\u5e93\u8868\u6dfb\u52a0\u4e0a\u8fd9\u4e2a\u5b57\u6bb5\u3002\u5e76\u5bf9\u5de5\u7a0b\u4e2d\u7684 <code>dao&amp;po&amp;mapper</code> \u64cd\u4f5c\uff0c\u589e\u52a0 <code>notify_url</code> \u5b57\u6bb5\u3002</li> <li>MarketTradeController \u8425\u9500\u4ea4\u6613\u670d\u52a1\uff0clockMarketPayOrder \u9501\u5355\u63a5\u53e3\u5165\u53c2\u5bf9\u8c61\uff0c\u589e\u52a0 notifyUrl \u56de\u8c03\u5730\u5740\u3002\u5e76\u6709 PayDiscountEntity \u5bf9\u8c61\u900f\u4f20\u5230 <code>TradeRepository#lockMarketPayOrder</code> \u4ed3\u50a8\u64cd\u4f5c\u3002\u8fd9\u6837\u5199\u5230 <code>group_buy_order</code> \u8868\u5c31\u6709\u56de\u8c03\u5730\u5740\u4e86\uff0c\u7b49\u505a\u56de\u8c03\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e2a\u5730\u5740\u5199\u5165\u5230\u56de\u8c03\u4efb\u52a1\u8868\u4e2d\u3002</li> <li><code>TradeSettlementOrderService#settlementMarketPayOrder</code> \u7ed3\u7b97\u670d\u52a1\uff0c\u9700\u8981\u628a\u9501\u5355\u8bb0\u5f55\u4e2d\u7684 notify_url \u62ff\u5230\uff0c\u653e\u5230 GroupBuyTeamEntity \u4e2d\uff0c\u8fd9\u6837\u5728\u5199\u5165 notify_task \u8868\u8bb0\u5f55\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u628a notify_url \u4e00\u8d77\u5199\u5165\u8fdb\u53bb\u4e86\u3002</li> <li>\u57fa\u4e8e okhttp \u6846\u67b6\uff0c\u5c01\u88c5\u5bf9 http \u63a5\u53e3\u7684\u8c03\u7528\u3002\u7528\u4e8e\u5904\u7406\u8c03\u7528\u5916\u90e8\u5176\u4ed6\u5fae\u670d\u52a1\uff0c\u5b9e\u73b0\u56de\u8c03\u901a\u77e5\u7684\u5904\u7406\u3002\u56e0\u4e3a\u5916\u90e8\u7684\u63a5\u53e3\u662f\u968f\u7740\u6bcf\u4e2a\u670d\u52a1\u8c03\u7528\u62fc\u56e2\u5199\u5165\u8fdb\u6765\u7684 http \u8bf7\u6c42\u5730\u5740\uff0c\u6240\u4ee5\u5728\u5c01\u88c5\u8fd9\u90e8\u5206\u8c03\u7528\u7684\u65f6\u5019\uff0c\u8981\u5141\u8bb8\u52a8\u6001\u900f\u4f20\u8bf7\u6c42\u5730\u5740\u3002\u5b9e\u73b0\u7c7b\u5199\u5230 infrastructure \u57fa\u7840\u8bbe\u7f6e\u5c42\u7684 gateway \u8c03\u7528\u5916\u90e8\u7f51\u5173\u5c42\u3002\u5b9e\u73b0\u7c7b\uff1b<code>GroupBuyNotifyService</code> \u63d0\u4f9b\u65b9\u6cd5\uff1b<code>groupBuyNotify</code></li> <li>\u5728\u4ea4\u6613\u7ed3\u7b97\u670d\u52a1\u7c7b ITradeSettlementOrderService\uff0c\u5b9a\u4e49\u6267\u884c\u7ed3\u7b97\u56de\u8c03\u901a\u77e5\u63a5\u53e3\uff0c\u5305\u62ec\uff1b<code>execSettlementNotifyJob()\u3001execSettlementNotifyJob(String teamId)</code> \u4e00\u4e2a\u662f\u6709\u5165\u53c2\u7684\uff0c\u4e00\u4e2a\u65e0\u5165\u53c2\u3002\u8fd9\u6837\u53ef\u4ee5\u6307\u5b9a\u7ed9\u67d0\u4e2a\u62fc\u56e2\u961f\u4f0d\u505a\u7ed3\u7b97\u3002\u7ed3\u7b97\u7684\u8fc7\u7a0b\u5c31\u662f\u8c03\u7528 <code>GroupBuyNotifyService#groupBuyNotify</code> \u5b8c\u6210\u56de\u8c03\u901a\u77e5\uff0c\u5e76\u6839\u636e\u8fd4\u56de\u7684\u7ed3\u679c\u66f4\u65b0 notify_task \u8868\u72b6\u6001\u8bb0\u5f55\uff08\u6210\u529f\u3001\u5931\u8d25\u3001\u91cd\u8bd5\uff09\uff0c\u5e76\u8bb0\u5f55\u56de\u8c03\u6b21\u6570\uff0c\u5c0f\u4e8e5\u6b21\u7684\u65f6\u5019\u90fd\u53ef\u4ee5\u7ee7\u7eed\u56de\u8c03\u3002</li> <li>\u56de\u8c03\u901a\u77e5\uff0c\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\u5904\u7406\u3002\u4e00\u4e2a\u662f\u62fc\u56e2\u5b8c\u6210\u540e\u7acb\u5373\u6267\u884c\uff0c\u53e6\u5916\u4e00\u4e2a\u4efb\u52a1\u8865\u507f\u3002\u7acb\u5373\u6267\u884c\u662f\u4e3a\u4e86\u63d0\u4f9b\u65f6\u6548\u6027\uff0c\u4f46\u56e0\u4e3a\u8fdc\u7a0b\u7684 http \u8c03\u7528\u53d7\u7f51\u7edc\u548c\u670d\u52a1\u7684\u5f71\u54cd\u53ef\u80fd\u4f1a\u5931\u8d25\uff0c\u6240\u4ee5\u8981\u589e\u52a0\u4e00\u4e2a\u4efb\u52a1\u8865\u507f\u6765\u505a\u5b9a\u65f6\u68c0\u67e5\u3002\u5176\u4e2d\u7acb\u5373\u6267\u884c\u5728 <code>TradeSettlementOrderService#settlementMarketPayOrder -&gt; settlementMarketPayOrder</code> \u5904\u7406\u3002\u53e6\u5916\u5b9a\u65f6\u4efb\u52a1\u5728 <code>GroupBuyNotifyJob</code> \u5904\u7406\u3002</li> <li>\u6d4b\u8bd5\u63a5\u53e3\uff0c<code>trigger/http</code> \u4e0b\uff0c\u589e\u52a0 <code>TestApiClientController</code> \u63a5\u53e3\u5b9e\u73b0\u7c7b\uff0c\u63d0\u4f9b\u56de\u8c03\u63a5\u53e3\u670d\u52a1\u3002\u8fd9\u4e2a\u662f\u6a21\u62df\u7684\u5176\u4ed6\u7684\u5fae\u670d\u52a1\uff0c\u5c06\u6765\u8981\u63d0\u4f9b\u7684\u63a5\u53e3\u3002</li> </ul> </li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-14%20%E6%8B%BC%E5%9B%A2%E5%9B%9E%E8%B0%83%E9%80%9A%E7%9F%A5%E4%BB%BB%E5%8A%A1/#_3","title":"\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-14%20%E6%8B%BC%E5%9B%A2%E5%9B%9E%E8%B0%83%E9%80%9A%E7%9F%A5%E4%BB%BB%E5%8A%A1/#_4","title":"\u6570\u636e\u5e93\u8868\u7ed3\u6784","text":"<p>\u5728 <code>group_buy_order</code> \u8868\u4e2d\u589e\u52a0 <code>notify_url</code> \u5b57\u6bb5\u3002</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-14%20%E6%8B%BC%E5%9B%A2%E5%9B%9E%E8%B0%83%E9%80%9A%E7%9F%A5%E4%BB%BB%E5%8A%A1/#_5","title":"\u9501\u5355\u5199\u5165","text":"<p>\u9501\u5355\u65f6\u5c06  <code>notifyUrl</code> \u5199\u5165\u5bf9\u5e94\u7684\u5b9e\u4f53\u7c7b\uff0c\u4ee3\u7801\u7565\u3002</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-14%20%E6%8B%BC%E5%9B%A2%E5%9B%9E%E8%B0%83%E9%80%9A%E7%9F%A5%E4%BB%BB%E5%8A%A1/#_6","title":"\u7ed3\u7b97\u5904\u7406","text":"Java<pre><code>package site.dopplerxd.infrastructure.adapter.repository;  \n\n/**   \n* @description \u4ea4\u6613\u4ed3\u50a8\u670d\u52a1  \n*/  \n@Slf4j  \n@Repository  \npublic class TradeRepository implements ITradeRepository {  \n\n    @Resource  \n    private INotifyTaskDao notifyTaskDao;\n\n    @Override  \n    public List&lt;NotifyTaskEntity&gt; queryUnExecutedNotifyTaskList() {  \n        List&lt;NotifyTask&gt; notifyTaskList = notifyTaskDao.queryUnExecutedNotifyTaskList();  \n        List&lt;NotifyTaskEntity&gt; notifyTaskEntityList = new ArrayList&lt;&gt;();  \n\n        if (notifyTaskList.isEmpty()) {  \n            return new ArrayList&lt;&gt;();  \n        }  \n\n        for (NotifyTask notifyTask : notifyTaskList) {  \n            NotifyTaskEntity notifyTaskEntity = NotifyTaskEntity.builder()  \n            .teamId(notifyTask.getTeamId())  \n            .notifyUrl(notifyTask.getNotifyUrl())  \n            .notifyCount(notifyTask.getNotifyCount())  \n            .parameterJson(notifyTask.getParameterJson())  \n            .build();  \n            notifyTaskEntityList.add(notifyTaskEntity);  \n        }  \n        return notifyTaskEntityList;  \n    }  \n\n    @Override  \n    public List&lt;NotifyTaskEntity&gt; queryUnExecutedNotifyTaskList(String teamId) {  \n        NotifyTask notifyTask = notifyTaskDao.queryUnExecutedNotifyTaskByTeamId(teamId);  \n\n        if (notifyTask == null) {  \n            return new ArrayList&lt;&gt;();  \n        }  \n\n        return Collections.singletonList(NotifyTaskEntity.builder()  \n                    .teamId(notifyTask.getTeamId())  \n                    .notifyUrl(notifyTask.getNotifyUrl())  \n                    .notifyCount(notifyTask.getNotifyCount())  \n                    .parameterJson(notifyTask.getParameterJson())  \n                    .build());  \n    }  \n\n    @Override  \n    public int updateNotifyTaskStatusSuccess(String teamId) {  \n        return notifyTaskDao.updateNotifyTaskStatusSuccess(teamId);  \n    }  \n\n    @Override  \n    public int updateNotifyTaskStatusRetry(String teamId) {  \n        return notifyTaskDao.updateNotifyTaskStatusRetry(teamId);  \n    }  \n\n    @Override  \n    public int updateNotifyTaskStatusError(String teamId) {  \n        return notifyTaskDao.updateNotifyTaskStatusError(teamId);  \n    }  \n\n    @Transactional(timeout = 500)  \n    @Override  \n    public boolean settlementMarketPayOrder(GroupBuyTeamSettlementAggregate groupBuyTeamSettlementAggregate) {  \n        UserEntity userEntity = groupBuyTeamSettlementAggregate.getUserEntity();  \n        GroupBuyTeamEntity groupBuyTeamEntity = groupBuyTeamSettlementAggregate.getGroupBuyTeamEntity();  \n        TradePaySuccessEntity tradePaySuccessEntity = groupBuyTeamSettlementAggregate.getTradePaySuccessEntity();  \n\n        // 1. \u66f4\u65b0\u62fc\u56e2\u8ba2\u5355\u72b6\u6001\u660e\u7ec6  \n        GroupBuyOrderList groupBuyOrderListReq = new GroupBuyOrderList();  \n        groupBuyOrderListReq.setUserId(userEntity.getUserId());  \n        groupBuyOrderListReq.setOutTradeNo(tradePaySuccessEntity.getOutTradeNo());  \n        groupBuyOrderListReq.setOutTradeTime(tradePaySuccessEntity.getOutTradeTime());  \n\n        int updateOrderListStatusCount = groupBuyOrderListDao.updateOrderStatus2COMPLETE(groupBuyOrderListReq);  \n        if (updateOrderListStatusCount != 1) {  \n            throw new AppException(ResponseCode.UPDATE_ZERO);  \n        }  \n\n        // 2. \u66f4\u65b0\u62fc\u56e2\u8fbe\u6210\u6570\u91cf  \n        int updateAddCompleteCount = groupBuyOrderDao.updateAddCompleteCount(groupBuyTeamEntity.getTeamId());  \n        if (updateAddCompleteCount != 1) {  \n            throw new AppException(ResponseCode.UPDATE_ZERO);  \n        }  \n\n        // 3. \u66f4\u65b0\u62fc\u56e2\u5b8c\u6210\u72b6\u6001  \n        if (groupBuyTeamEntity.getTargetCount() - groupBuyTeamEntity.getCompleteCount() == 1) {  \n            int updateOrderStatusCount = groupBuyOrderDao.updateOrderStatus2COMPLETE(groupBuyTeamEntity.getTeamId());  \n            if (updateOrderStatusCount != 1) {  \n            throw new AppException(ResponseCode.UPDATE_ZERO);  \n            }  \n\n            // \u67e5\u8be2\u62fc\u56e2\u4ea4\u6613\u5b8c\u6210\u5916\u90e8\u5355\u53f7\u5217\u8868  \n            List&lt;String&gt; outTradeNoList = groupBuyOrderListDao.queryGroupBuyCompleteOrderOutTradeNoListByTeamId(groupBuyTeamEntity.getTeamId());  \n\n            // \u62fc\u56e2\u5b8c\u6210\u5199\u5165\u56de\u8c03\u8bb0\u5f55  \n            NotifyTask notifyTask = new NotifyTask();  \n            notifyTask.setActivityId(groupBuyTeamEntity.getActivityId());  \n            notifyTask.setTeamId(groupBuyTeamEntity.getTeamId());  \n            notifyTask.setNotifyUrl(groupBuyTeamEntity.getNotifyUrl());  \n            notifyTask.setNotifyCount(0);  \n            notifyTask.setNotifyStatus(0);  \n            notifyTask.setParameterJson(JSON.toJSONString(new HashMap&lt;String, Object&gt;() {{  \n                put(\"teamId\", groupBuyTeamEntity.getTeamId());  \n                put(\"outTradeNoList\", outTradeNoList);  \n            }}));  \n\n            notifyTaskDao.insert(notifyTask);  \n            return true;  \n        }  \n        return false;  \n    }  \n}\n</code></pre> <ul> <li>settlementMarketPayOrder \u65b9\u6cd5\uff0c\u4ece GroupBuyTeamEntity \u62fc\u56e2\u8bb0\u5f55\u83b7\u53d6\u5230 notify_url \u5199\u5165\u5230 NotifyTask \u8868\u8bb0\u5f55\u4e2d\u3002</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-14%20%E6%8B%BC%E5%9B%A2%E5%9B%9E%E8%B0%83%E9%80%9A%E7%9F%A5%E4%BB%BB%E5%8A%A1/#okhttp","title":"\u56de\u8c03\u7f51\u5173 okhttp","text":"Java<pre><code>public class GroupBuyNotifyService {  \n\n    @Resource  \n    private OkHttpClient okHttpClient;  \n\n    public String groupBuyNotify(String apiUrl, String notifyRequestDTOJson) throws Exception {  \n        try {  \n            MediaType mediaType = MediaType.parse(\"application/json\");  \n            RequestBody body = RequestBody.create(mediaType, notifyRequestDTOJson);  \n            Request request = new Request.Builder()  \n                    .url(apiUrl)  \n                    .method(\"POST\", body)  \n                    .addHeader(\"Content-Type\", \"application/json\")  \n                    .build();  \n            Response response = okHttpClient.newCall(request).execute();  \n            assert response.body() != null;  \n            return response.body().string();  \n        } catch (Exception e) {  \n            throw new AppException(ResponseCode.HTTP_EXCEPTION);  \n        }  \n    }  \n\n}\n</code></pre> <ul> <li>\u56de\u8c03\u670d\u52a1\uff0c\u5728\u57fa\u7840\u8bbe\u7f6e\u5c42\u7684 gateway \u4e2d\u5b9e\u73b0\u3002\u7528\u4e8e\u52a8\u6001\u8c03\u7528\u5916\u90e8\u7684\u63a5\u53e3\uff0c\u8fdb\u884c\u56de\u8c03\u901a\u77e5\u3002</li> <li>\u8fd9\u90e8\u5206\u4e1a\u52a1\u4ee3\u7801\u53ef\u4ee5\u901a\u8fc7 Apipost\u3001Apifox \u7b49\u5de5\u5177\u751f\u6210\uff0c\u7ed3\u5408 IDEA \u4e0a\u5bf9\u5e94\u7684\u63d2\u4ef6\uff0c\u53ef\u4ee5\u628a\u63a5\u53e3\u4e0a\u4f20\u5230 api \u6d4b\u8bd5\u8f6f\u4ef6\u4e0a\u3002</li> </ul> <p>\u5982\u6211\u4f7f\u7528 <code>Apifox</code> \u751f\u6210\u7684\u63a5\u53e3\u8bf7\u6c42\u4ee3\u7801</p> Java<pre><code>OkHttpClient client = new OkHttpClient().newBuilder()\n\u00a0  .build();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\n\nRequestBody body = RequestBody.create(mediaType, \"\");\n\nRequest request = new Request.Builder()\n\u00a0 \u00a0.url(\"/api/test/group_buy_notify\")\n\u00a0 \u00a0.method(\"POST\", body)\n\u00a0 \u00a0.addHeader(\"Content-Type\", \"application/json\")\n\u00a0 \u00a0.build();\n\nResponse response = client.newCall(request).execute();\n</code></pre>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-14%20%E6%8B%BC%E5%9B%A2%E5%9B%9E%E8%B0%83%E9%80%9A%E7%9F%A5%E4%BB%BB%E5%8A%A1/#_7","title":"\u56de\u8c03\u5c01\u88c5\u548c\u76f4\u63a5\u8c03\u7528","text":"Java<pre><code>package site.dopplerxd.domain.trade.service.settlement;  \n\n/**  \n* @description \u62fc\u56e2\u4ea4\u6613\u7ed3\u7b97\u670d\u52a1  \n*/   \npublic class TradeSettlementOrderService implements ITradeSettlementOrderService {  \n\n    @Resource  \n    private ITradeRepository repository;  \n    @Resource  \n    private ITradePort port;  \n    @Resource  \n    private BusinessLinkedList&lt;TradeSettlementRuleCommandEntity, TradeSettlementRuleFilterFactory.DynamicContext, TradeSettlementRuleFilterBackEntity&gt;  \n    tradeSettlementRuleFilter;  \n\n    @Override  \n    public TradePaySettlementEntity settlementMarketPayOrder(TradePaySuccessEntity tradePaySuccessEntity) throws Exception {  \n    log.info(\"\u62fc\u56e2\u4ea4\u6613-\u652f\u4ed8\u8ba2\u5355\u7ed3\u7b97:{} outTradeNo:{}\", tradePaySuccessEntity.getUserId(), tradePaySuccessEntity.getOutTradeNo());  \n\n    ......\n\n    // 4. \u62fc\u56e2\u4ea4\u6613\u7ed3\u7b97  \n    boolean needNotify = repository.settlementMarketPayOrder(groupBuyTeamSettlementAggregate);  \n\n    // 5. \u7ec4\u961f\u56de\u8c03\u5904\u7406 - \u5904\u7406\u5931\u8d25\u4e5f\u4f1a\u6709\u5b9a\u65f6\u4efb\u52a1\u8865\u507f\uff0c\u901a\u8fc7\u8fd9\u6837\u7684\u65b9\u5f0f\u5417\uff0c\u51cf\u8f7b\u4efb\u52a1\u8c03\u5ea6\uff0c\u63d0\u9ad8\u65f6\u6548\u6027  \n    if (needNotify) {  \n        Map&lt;String, Integer&gt; notifyResultMap = execSettlementNotifyJob(teamId);  \n        log.info(\"\u56de\u8c03\u901a\u77e5\u62fc\u56e2\u5b8c\u7ed3 result:{}\", JSON.toJSONString(notifyResultMap));  \n    }  \n\n    // 6. \u8fd4\u56de\u7ed3\u7b97\u4fe1\u606f  \n    return ...;\n    }  \n\n    @Override  \n    public Map&lt;String, Integer&gt; execSettlementNotifyJob() throws Exception {  \n        log.info(\"\u62fc\u56e2\u4ea4\u6613-\u6267\u884c\u7ed3\u7b97\u901a\u77e5\u4efb\u52a1\");  \n\n        // \u67e5\u8be2\u672a\u6267\u884c\u4efb\u52a1\n        List&lt;NotifyTaskEntity&gt; notifyTaskEntityList = repository.queryUnExecutedNotifyTaskList();  \n\n        return execSettlementNotifyJob(notifyTaskEntityList);  \n    }  \n\n    @Override  \n    public Map&lt;String, Integer&gt; execSettlementNotifyJob(String teamId) throws Exception {  \n        log.info(\"\u62fc\u56e2\u4ea4\u6613-\u6267\u884c\u7ed3\u7b97\u901a\u77e5\u4efb\u52a1\uff0c\u6307\u5b9ateamId:{}\", teamId);  \n\n        List&lt;NotifyTaskEntity&gt; notifyTaskEntityList = repository.queryUnExecutedNotifyTaskList(teamId);  \n\n        return execSettlementNotifyJob(notifyTaskEntityList);  \n    }  \n\n    private Map&lt;String, Integer&gt; execSettlementNotifyJob(List&lt;NotifyTaskEntity&gt; notifyTaskEntityList) throws Exception {  \n        int successCount = 0, retryCount = 0, errorCount = 0;  \n\n        for (NotifyTaskEntity notifyTaskEntity : notifyTaskEntityList) {  \n            String response = port.groupBuyNotify(notifyTaskEntity);  \n\n            if (NotifyTaskHTTPEnumVO.SUCCESS.getCode().equals(response)) {  \n                int updateSuccessCount = repository.updateNotifyTaskStatusSuccess(notifyTaskEntity.getTeamId());  \n                if (updateSuccessCount == 1) {  \n                successCount += 1;  \n                }  \n            } else if (NotifyTaskHTTPEnumVO.ERROR.getCode().equals(response)) {  \n                // \u56de\u8c03\u5c1d\u8bd5\u6b21\u6570\u5c0f\u4e8e5\u6b21\uff0c\u91cd\u8bd5  \n                if (notifyTaskEntity.getNotifyCount() &lt; 5) {  \n                    int updateRetryCount = repository.updateNotifyTaskStatusRetry(notifyTaskEntity.getTeamId());  \n                    if (updateRetryCount == 1) {  \n                        retryCount += 1;  \n                    }  \n                } else {  \n                    int updateErrorCount = repository.updateNotifyTaskStatusError(notifyTaskEntity.getTeamId());  \n                    if (updateErrorCount == 1) {  \n                        errorCount += 1;  \n                    }  \n                }  \n            }  \n        }  \n\n        Map&lt;String, Integer&gt; resultMap = new HashMap&lt;&gt;();  \n        resultMap.put(\"waitCount\", notifyTaskEntityList.size());  \n        resultMap.put(\"successCount\", successCount);  \n        resultMap.put(\"retryCount\", retryCount);  \n        resultMap.put(\"errorCount\", errorCount);  \n\n        return resultMap;  \n    }  \n}\n</code></pre> <ul> <li><code>Map&lt;String, Integer&gt; notifyResultMap = execSettlementNotifyJob(teamId);</code> \u56de\u8c03\u901a\u77e5\u5904\u7406\u3002\u8fd9\u6b65\u5931\u8d25\u4e5f\u6ca1\u5173\u7cfb\uff0c\u540e\u7eed\u4f1a\u6709\u5b9a\u65f6\u4efb\u52a1\u5904\u7406\u3002</li> <li><code>execSettlementNotifyJob(List&lt;NotifyTaskEntity&gt; notifyTaskEntityList)</code> \u56de\u8c03\u4efb\u52a1\uff0c\u8c03\u7528 <code>port.groupBuyNotify(notifyTask);</code> \u56de\u8c03\u670d\u52a1\u3002</li> <li>\u6839\u636e\u56de\u8c03\u670d\u52a1\u8fd4\u56de\u7684\u7ed3\u679c\uff0c\u66f4\u65b0\u56de\u8c03\u4efb\u52a1\u8868\u8bb0\u5f55\u3002\u5305\u62ec\uff1b\u8c03\u7528\u4e86\u51e0\u6b21\u3001\u6210\u529f\u7684\u72b6\u6001\u3002</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-14%20%E6%8B%BC%E5%9B%A2%E5%9B%9E%E8%B0%83%E9%80%9A%E7%9F%A5%E4%BB%BB%E5%8A%A1/#_8","title":"\u4efb\u52a1\u8865\u507f","text":"Java<pre><code>package site.dopplerxd.trigger.job;  \n\n/**  \n* @description \u62fc\u56e2\u5b8c\u7ed3\u56de\u8c03\u901a\u77e5\u4efb\u52a1\uff1b\u62fc\u56e2\u56de\u8c03\u4efb\u52a1\u8868\uff0c\u5b9e\u9645\u516c\u53f8\u573a\u666f\u4f1a\u5b9a\u65f6\u6e05\u7406\u6570\u636e\u7ed3\u8f6c\uff0c\u4e0d\u4f1a\u6709\u592a\u591a\u6570\u636e\u6324\u538b  \n*/    \npublic class GroupBuyNotifyJob {  \n\n    @Resource  \n    private ITradeSettlementOrderService tradeSettlementOrderService;  \n\n    @Scheduled(cron = \"0/15 * * * * ?\")  \n    public void exec() {  \n        try {  \n            Map&lt;String, Integer&gt; result = tradeSettlementOrderService.execSettlementNotifyJob();  \n            log.info(\"\u5b9a\u65f6\u4efb\u52a1\uff0c\u56de\u8c03\u901a\u77e5\u62fc\u56e2\u5b8c\u7ed3\u4efb\u52a1 result:{}\", JSON.toJSONString(result));  \n        } catch (Exception e) {  \n            log.error(\"\u5b9a\u65f6\u4efb\u52a1\uff0c\u56de\u8c03\u901a\u77e5\u62fc\u56e2\u5b8c\u7ed3\u4efb\u52a1\u5931\u8d25\", e);  \n        }  \n    }  \n}\n</code></pre> <ul> <li>\u9996\u5148\uff0capp \u4e0b\u7684 Application \u7c7b\uff0c\u8981\u6dfb\u52a0\u4e00\u4e2a <code>@EnableScheduling</code> \u6ce8\u89e3\uff0c\u8fd9\u6837\u624d\u80fd\u4f7f\u7528\u4efb\u52a1\u3002</li> <li>\u4e4b\u540e\uff0ctrigger \u4e0b\u7684 job \u5305\u4e0b\uff0c\u521b\u5efa GroupBuyNotifyJob \u56de\u8c03\u4efb\u52a1\uff0c\u8c03\u7528\u56de\u8c03\u901a\u77e5\u3002</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/","title":"2 2~2 3 \u89c4\u5219\u6811\u8bbe\u8ba1\u6a21\u5f0f\u6a21\u677f","text":"<p>\u5728\u4e00\u4e2a\u5de5\u7a0b\u4e2d\uff0c\u968f\u7740\u4e0d\u65ad\u5730\u627f\u63a5\u4e1a\u52a1\u9700\u6c42\u903b\u8f91\u7684\u5b9e\u73b0\uff0c\u4f1a\u6709\u5f88\u591a\u590d\u6742\u573a\u666f\u9700\u8981\u89e3\u51b3\u3002\u8fd9\u4e2a\u65f6\u5019\u5c31\u4f1a\u5f15\u5165\u8bbe\u8ba1\u6a21\u5f0f\u8fdb\u884c\u89e3\u8026\u548c\u5b9e\u73b0\uff0c\u63d0\u9ad8\u5de5\u7a0b\u4ee3\u7801\u7684\u6269\u5c55\u6027\u3002  \u968f\u7740\u5f00\u53d1\u7684\u573a\u666f\u8d8a\u6765\u8d8a\u591a\uff0c\u5728\u5404\u4e2a service \u5b9e\u73b0\u4e2d\u4f1a\u5b58\u5728\u76f8\u540c\u7684\u8bbe\u8ba1\u6a21\u5f0f\u3002\u5982\u679c\u662f\u4e0d\u540c\u7684\u4eba\u5f00\u53d1\uff0c\u90a3\u4e48\u4e00\u4e2a\u8d23\u4efb\u94fe\uff0c\u4e00\u4e2a\u89c4\u5219\u6811\uff0c\u4e5f\u4f1a\u6709\u975e\u5e38\u591a\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002\u90a3\u4e48\u8fd9\u6837\u5c31\u4f1a\u5bfc\u81f4\u540e\u9762\u5728\u8fdb\u5165\u5f00\u53d1\u7684\u4eba\uff0c\u5bf9\u5df2\u5b58\u5728\u7684\u4ee3\u7801\uff0c\u7ef4\u62a4\u7684\u6210\u672c\u5c31\u8d8a\u6765\u8d8a\u9ad8\u4e86\u3002 \u00a0 \u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u8bbe\u8ba1\u6a21\u5f0f\u62bd\u8c61\u6a21\u677f\u7684\u901a\u7528\u7ed3\u6784\u5b9a\u4e49\uff0c\u6dfb\u52a0\u4e00\u4e2a\u89c4\u5219\u6811\u62bd\u8c61\u6a21\u578b\uff0c\u5f15\u5165\u5230\u5de5\u7a0b\u4e2d\u8fdb\u884c\u4f7f\u7528\u3002\u8fd9\u6837\u540e\u7eed\u5de5\u7a0b\u4e2d\u5c31\u53ef\u4ee5\u4e0d\u65ad\u7684\u5b9a\u4e49\u901a\u7528\u7684\u8bbe\u8ba1\u6a21\u5f0f\u88ab\u4e0d\u540c\u7684\u573a\u666f\u7edf\u4e00\u4f7f\u7528\u4e86\u3002</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#_1","title":"\u6a21\u578b\u8bbe\u8ba1","text":"<p>\u8fd9\u662f\u4e00\u79cd\u94fe\u5f0f\u7684\u591a\u5206\u652f\u89c4\u5219\u6811\u6a21\u578b\u7ed3\u6784\uff0c\u7531\u529f\u80fd\u8282\u70b9\u81ea\u884c\u51b3\u5b9a\u540e\u7eed\u6d41\u7a0b\u7684\u6267\u884c\u94fe\u8def\u3002\u8fd9\u79cd\u8bbe\u8ba1\u6bd4\u8d23\u4efb\u94fe\u7684\u6269\u5c55\u6027\u66f4\u597d\uff0c\u81ea\u7531\u5ea6\u66f4\u9ad8\u3002</p> <p></p> <ul> <li>\u9996\u5148\uff0c\u5b9a\u4e49\u62bd\u8c61\u7684\u901a\u7528\u7684\u89c4\u5219\u6811\u6a21\u578b\u7ed3\u6784\uff1a<ul> <li><code>StrategyMapper</code> - \u7b56\u7565\u6620\u5c04\u5668</li> <li><code>StrategyHandler</code> - \u7b56\u7565\u5904\u7406\u5668</li> <li><code>AbstractStrategyRouter&lt;T, D, R&gt;</code> - \u7b56\u7565\u8def\u7531\u62bd\u8c61\u7c7b</li> <li>\u901a\u8fc7\u6cdb\u578b\u8bbe\u8ba1\u5141\u8bb8\u4f7f\u7528\u65b9\u53ef\u4ee5\u81ea\u5b9a\u4e49\u51fa\u5165\u53c2\u548c\u52a8\u6001\u4e0a\u4e0b\u6587\uff0c\u8ba9\u62bd\u8c61\u6a21\u677f\u6a21\u578b\u5177\u6709\u901a\u7528\u6027</li> </ul> </li> <li>\u7136\u540e\u7531\u8c03\u7528\u65b9\u81ea\u5b9a\u4e49\u51fa\u5de5\u5382\u3001\u529f\u80fd\u62bd\u8c61\u7c7b\u548c\u4e00\u4e9b\u6d41\u7a0b\u6d41\u8f6c\u7684\u8282\u70b9\u3002\u8fd9\u4e9b\u8282\u70b9\u53ef\u4ee5\u81ea\u7531\u7ec4\u88c5\u8fdb\u884c\u6d41\u8f6c\uff0c\u76f8\u6bd4\u4e8e\u8d23\u4efb\u94fe\uff0c\u5b83\u7684\u5b9e\u73b0\u65b9\u5f0f\u66f4\u5177\u6709\u7075\u6d3b\u6027</li> </ul> <p></p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#_2","title":"\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#typesdesignsframeworktree","title":"types/designs/framework/tree","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#strategymapper","title":"StrategyMapper \u7b56\u7565\u6620\u5c04\u5668","text":"<p>\u8d1f\u8d23\u6839\u636e\u53c2\u6570\u9009\u62e9\u7b56\u7565\u3002</p> Java<pre><code>public interface StrategyMapper&lt;T, D, R&gt; {  \n\n    /**  \n    * \u83b7\u53d6\u5f85\u6267\u884c\u7b56\u7565  \n    *  \n    * @param requestParameter \u5165\u53c2  \n    * @param dynamicContext \u4e0a\u4e0b\u6587  \n    * @return \u8fd4\u53c2  \n    */  \n    StrategyHandler&lt;T, D, R&gt; get(T requestParameter, D dynamicContext);  \n\n}\n</code></pre> <ul> <li><code>StrategyMapper.get</code> \u7528\u4e8e\u83b7\u53d6\u6bcf\u4e00\u4e2a\u8981\u6267\u884c\u7684\u8282\u70b9\uff0c\u76f8\u5f53\u4e8e\u4ece\u5f53\u524d\u6d41\u7a0b\u8fdb\u5165\u4e0b\u4e00\u4e2a\u6d41\u7a0b\u7684\u8fc7\u7a0b\u3002</li> <li>\u6cdb\u578b T \u5165\u53c2\uff0cD \u52a8\u6001\u4e0a\u4e0b\u6587\uff0cR \u8fd4\u53c2</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#strategyhandler","title":"StrategyHandler \u7b56\u7565\u5904\u7406\u5668","text":"<p>\u8d1f\u8d23\u5177\u4f53\u6267\u884c\u7b56\u7565\u903b\u8f91</p> Java<pre><code>public interface StrategyHandler&lt;T, D, R&gt; {  \n\n    StrategyHandler DEFAULT = (T, D) -&gt; null;  \n\n    R apply(T requestParameter, D dynamicContext) throws Exception;  \n\n}\n</code></pre> <ul> <li><code>StrategyHandler.apply</code> \u53d7\u7406\u6267\u884c\u7684\u4e1a\u52a1\u6d41\u7a0b\uff0c\u6bcf\u4e2a\u4e1a\u52a1\u6d41\u7a0b\u6267\u884c\u65f6\uff0c\u5982\u679c\u6709\u6570\u636e\u662f\u4ece\u524d\u9762\u8282\u70b9\u5230\u540e\u9762\u8282\u70b9\u8981\u4f7f\u7528\u7684\uff0c\u53ef\u4ee5\u5c06\u5176\u586b\u5145\u5230 <code>dynamicContext</code> \u52a8\u6001\u4e0a\u4e0b\u6587\u4e2d\u3002</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#abstractstrategyrouter","title":"AbstractStrategyRouter \u7b56\u7565\u8def\u7531\u5668","text":"Java<pre><code>public abstract class AbstractStrategyRouter&lt;T, D, R&gt; implements StrategyMapper&lt;T, D, R&gt;, StrategyHandler&lt;T, D, R&gt; {  \n\n    @Getter  \n    @Setter  \n    protected StrategyHandler&lt;T, D, R&gt; defaultStrategyHandler = StrategyHandler.DEFAULT;  \n\n    public R router(T requestParameter, D dynamicContext) throws Exception {  \n        StrategyHandler&lt;T, D, R&gt; strategyHandler = get(requestParameter, dynamicContext);  \n        if (null != strategyHandler) {  \n            return strategyHandler.apply(requestParameter, dynamicContext);  \n        }  \n        return defaultStrategyHandler.apply(requestParameter, dynamicContext);  \n    }  \n\n}\n</code></pre> <ul> <li>\u901a\u8fc7\u8c03\u7528\u7b56\u7565\u6620\u5c04\u5668\u7684 get \u65b9\u6cd5\uff0c\u63a7\u5236\u8282\u70b9\u6d41\u7a0b\u7684\u8d70\u5411\u3002</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#abstractmultithreadstrategyrouter","title":"AbstractMultiThreadStrategyRouter \u5f02\u6b65\u8d44\u6e90\u52a0\u8f7d\u7b56\u7565","text":"Java<pre><code>public abstract class AbstractMultiThreadStrategyRouter&lt;T, D, R&gt; implements StrategyMapper&lt;T, D, R&gt;, StrategyHandler&lt;T, D, R&gt; {  \n\n    @Getter  \n    @Setter  \n    protected StrategyHandler&lt;T, D, R&gt; defaultStrategyHandler = StrategyHandler.DEFAULT;  \n\n    public R router(T requestParameter, D dynamicContext) throws Exception {  \n        StrategyHandler&lt;T, D, R&gt; strategyHandler = get(requestParameter, dynamicContext);  \n        if (null != strategyHandler) {  \n            return strategyHandler.apply(requestParameter, dynamicContext);  \n        }  \n        return defaultStrategyHandler.apply(requestParameter, dynamicContext);  \n    }  \n\n    @Override  \n    public R apply(T requestParameter, D dynamicContext) throws Exception {  \n        // \u5f02\u6b65\u52a0\u8f7d\u6570\u636e  \n        multiThread(requestParameter, dynamicContext);  \n        // \u4e1a\u52a1\u6d41\u7a0b\u53d7\u7406  \n        return doApply(requestParameter, dynamicContext);  \n    }  \n\n    /**  \n    * \u591a\u7ebf\u7a0b\u5904\u7406\uff0c\u5f02\u6b65\u52a0\u8f7d\u6570\u636e  \n    *  \n    * @param requestParameter  \n    * @param dynamicContext  \n    */  \n    protected abstract void multiThread(T requestParameter, D dynamicContext) throws Exception;  \n\n    /**  \n    *  \n    * @param requestParameter  \n    * @param dynamicContext  \n    * @return  \n    */  \n    protected abstract R doApply(T requestParameter, D dynamicContext) throws Exception;  \n}\n</code></pre>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#domainactivityservice","title":"domain/activity/service","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#iindexgroupbuymarketservice","title":"IIndexGroupBuyMarketService \u8bd5\u7b97\u670d\u52a1\u7c7b\u63a5\u53e3","text":"Java<pre><code>public interface IIndexGroupBuyMarketService {  \n    TrialBalanceEntity indexMarketTrial(MarketProductEntity marketProductEntity) throws Exception;  \n}\n</code></pre>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#indexgroupbuymarketservice","title":"IndexGroupBuyMarketService \u8bd5\u7b97\u670d\u52a1\u7c7b","text":"<p>\u901a\u8fc7\u7b56\u7565\u6a21\u5f0f\u5b9e\u73b0\u7075\u6d3b\u7684\u4e1a\u52a1\u903b\u8f91\u3002</p> Java<pre><code>@Slf4j  \n@Service  \npublic class IndexGroupBuyMarketService implements IIndexGroupBuyMarketService {  \n\n    @Resource  \n    private DefaultActivityStrategyFactory defaultActivityStrategyFactory;  \n\n    @Override  \n    public TrialBalanceEntity indexMarketTrial(MarketProductEntity marketProductEntity) throws Exception {  \n        StrategyHandler&lt;MarketProductEntity, DefaultActivityStrategyFactory.DynamicContext, TrialBalanceEntity&gt; strategyHandler = defaultActivityStrategyFactory.strategyHandler();  \n\n        TrialBalanceEntity trialBalanceEntity = strategyHandler.apply(marketProductEntity, new DefaultActivityStrategyFactory.DynamicContext());  \n\n        return trialBalanceEntity;  \n    }  \n}\n</code></pre>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#defaultactivitystrategyfactory","title":"DefaultActivityStrategyFactory \u62fc\u56e2\u6d3b\u52a8\u7b56\u7565\u5de5\u5382","text":"<p>\u7b56\u7565\u5de5\u5382\u7c7b\uff0c\u901a\u8fc7\u8fd4\u56de RootNode \u793a\u4f8b\u6765\u63d0\u4f9b\u5177\u4f53\u7684\u6267\u884c\u903b\u8f91\u3002</p> Java<pre><code>@Service  \npublic class DefaultActivityStrategyFactory {  \n\n    private final RootNode rootNode;  \n\n    public DefaultActivityStrategyFactory(RootNode rootNode) {  \n        this.rootNode = rootNode;  \n    }  \n\n    public StrategyHandler&lt;MarketProductEntity, DynamicContext, TrialBalanceEntity&gt; strategyHandler() {  \n        return rootNode;  \n    }  \n\n    @Data  \n    @Builder  \n    @NoArgsConstructor  \n    @AllArgsConstructor  \n    public static class DynamicContext {  \n\n        // \u62fc\u56e2\u6d3b\u52a8\u8425\u9500\u914d\u7f6e\u503c\u5bf9\u8c61  \n        private GroupBuyActivityDiscountVO groupBuyActivityDiscountVO;  \n        // \u5546\u54c1sku\u503c\u5bf9\u8c61  \n        private SkuVO skuVO;  \n\n    }  \n\n}\n</code></pre>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#abstractgroupbuymarketsupport","title":"AbstractGroupBuyMarketSupport \u62fc\u56e2\u6d3b\u52a8\u670d\u52a1\u652f\u6491\u7c7b","text":"Java<pre><code>public abstract class AbstractGroupBuyMarketSupport&lt;MarketProductEntity, DynamicContext, TrialBalanceEntity&gt;  \nextends AbstractMultiThreadStrategyRouter&lt;MarketProductEntity, DynamicContext, TrialBalanceEntity&gt; {  \n\n    protected long timeout = 500;  \n\n    @Resource  \n    protected IActivityRepository repository;  \n\n    @Override  \n    protected void multiThread(MarketProductEntity requestParameter, DynamicContext dynamicContext) throws ExecutionException, InterruptedException, TimeoutException {  \n        // \u7f3a\u7701\u7684\u65b9\u6cd5  \n    }  \n}\n</code></pre>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#rootnode","title":"RootNode \u6839\u8282\u70b9","text":"Java<pre><code>@Slf4j  \n@Service  \npublic class RootNode extends AbstractGroupBuyMarketSupport&lt;MarketProductEntity, DefaultActivityStrategyFactory.DynamicContext, TrialBalanceEntity&gt; {  \n\n    @Resource  \n    private SwitchNode switchNode;  \n\n    @Override  \n    public TrialBalanceEntity doApply(MarketProductEntity requestParameter, DefaultActivityStrategyFactory.DynamicContext dynamicContext) throws Exception {  \n        log.info(\"\u62fc\u56e2\u5546\u54c1\u67e5\u8be2\u8bd5\u7b97\u670d\u52a1-RootNode userId:{} requestParameter:{}\", requestParameter.getUserId(), JSON.toJSONString(requestParameter));  \n        if (StringUtils.isAnyBlank(requestParameter.getUserId(), requestParameter.getGoodsId(), requestParameter.getSource(), requestParameter.getChannel())) {  \n            throw new AppException(ResponseCode.ILLEGAL_PARAMETER.getCode(), ResponseCode.ILLEGAL_PARAMETER.getInfo());  \n        }  \n        return router(requestParameter, dynamicContext);  \n    }  \n\n    @Override  \n    public StrategyHandler&lt;MarketProductEntity, DefaultActivityStrategyFactory.DynamicContext, TrialBalanceEntity&gt; get(MarketProductEntity requestParameter, DefaultActivityStrategyFactory.DynamicContext dynamicContext) {  \n        return switchNode;  \n    }  \n}\n</code></pre>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#switchnode","title":"SwitchNode \u5f00\u5173\u8282\u70b9","text":"Java<pre><code>@Slf4j  \n@Service  \npublic class SwitchNode extends AbstractGroupBuyMarketSupport&lt;MarketProductEntity, DefaultActivityStrategyFactory.DynamicContext, TrialBalanceEntity&gt; {  \n\n    @Resource  \n    private MarketNode marketNode;  \n\n    @Override  \n    public TrialBalanceEntity doApply(MarketProductEntity requestParameter, DefaultActivityStrategyFactory.DynamicContext dynamicContext) throws Exception {  \n        return router(requestParameter, dynamicContext);  \n    }  \n\n    @Override  \n    public StrategyHandler&lt;MarketProductEntity, DefaultActivityStrategyFactory.DynamicContext, TrialBalanceEntity&gt; get(MarketProductEntity requestParameter, DefaultActivityStrategyFactory.DynamicContext dynamicContext) {  \n        return marketNode;  \n    }  \n}\n</code></pre>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#marketnode","title":"MarketNode \u62fc\u56e2\u8bd5\u7b97\u8282\u70b9","text":"Java<pre><code>@Slf4j  \n@Service  \npublic class MarketNode extends AbstractGroupBuyMarketSupport&lt;MarketProductEntity, DefaultActivityStrategyFactory.DynamicContext, TrialBalanceEntity&gt; {  \n\n    @Resource  \n    private ThreadPoolExecutor threadPoolExecutor;  \n\n    @Resource  \n    private EndNode endNode;  \n\n    @Override  \n    protected void multiThread(MarketProductEntity requestParameter, DefaultActivityStrategyFactory.DynamicContext dynamicContext) throws ExecutionException, InterruptedException, TimeoutException {  \n        QueryGroupBuyActivityDiscountVOThreadTask queryGroupBuyActivityDiscountVOThreadTask = new QueryGroupBuyActivityDiscountVOThreadTask(repository, requestParameter.getSource(), requestParameter.getChannel());  \n        FutureTask&lt;GroupBuyActivityDiscountVO&gt; groupBuyActivityDiscountVOFutureTask = new FutureTask&lt;&gt;(queryGroupBuyActivityDiscountVOThreadTask);  \n        threadPoolExecutor.execute(groupBuyActivityDiscountVOFutureTask);  \n\n        // \u5f02\u6b65\u67e5\u8be2\u5546\u54c1\u4fe1\u606f - \u5728\u5b9e\u9645\u751f\u4ea7\u4e2d\uff0c\u5546\u54c1\u6709\u540c\u6b65\u5e93\u6216\u8005\u8c03\u7528\u63a5\u53e3\u67e5\u8be2\u3002\u8fd9\u91cc\u6682\u65f6\u4f7f\u7528DB\u65b9\u5f0f\u67e5\u8be2\u3002  \n        QuerySkuVOFromDBThreadTask querySkuVOFromDBThreadTask = new QuerySkuVOFromDBThreadTask(repository, requestParameter.getGoodsId());  \n        FutureTask&lt;SkuVO&gt; skuVOFutureTask = new FutureTask&lt;&gt;(querySkuVOFromDBThreadTask);  \n        threadPoolExecutor.execute(skuVOFutureTask);  \n\n        // \u5199\u5165\u4e0a\u4e0b\u6587 - \u5bf9\u4e8e\u4e00\u4e9b\u590d\u6742\u573a\u666f\uff0c\u83b7\u53d6\u6570\u636e\u7684\u64cd\u4f5c\uff0c\u6709\u65f6\u5019\u4f1a\u5728\u4e0bN\u4e2a\u8282\u70b9\u83b7\u53d6\uff0c\u8fd9\u6837\u524d\u7f6e\u67e5\u8be2\u6570\u636e\uff0c\u53ef\u4ee5\u63d0\u9ad8\u63a5\u53e3\u54cd\u5e94\u6548\u7387  \n        dynamicContext.setGroupBuyActivityDiscountVO(groupBuyActivityDiscountVOFutureTask.get(timeout, TimeUnit.SECONDS));  \n        dynamicContext.setSkuVO(skuVOFutureTask.get(timeout, TimeUnit.SECONDS));  \n        log.info(\"\u62fc\u56e2\u5546\u54c1\u67e5\u8be2\u8bd5\u7b97\u670d\u52a1-MarketNode userId:{} \u5f02\u6b65\u7ebf\u7a0b\u52a0\u8f7d\u6570\u636e\u300cGroupBuyActivityDiscountVO\u3001SkuVO\u300d\u5b8c\u6210\", requestParameter.getUserId());  \n    }  \n\n    @Override  \n    protected TrialBalanceEntity doApply(MarketProductEntity requestParameter, DefaultActivityStrategyFactory.DynamicContext dynamicContext) throws Exception {  \n        log.info(\"\u62fc\u56e2\u5546\u54c1\u67e5\u8be2\u8bd5\u7b97\u670d\u52a1-MarketNode userId:{} requestParameter:{}\", requestParameter.getUserId(), JSON.toJSONString(requestParameter));  \n        return router(requestParameter, dynamicContext);  \n    }  \n\n    @Override  \n    public StrategyHandler&lt;MarketProductEntity, DefaultActivityStrategyFactory.DynamicContext, TrialBalanceEntity&gt; get(MarketProductEntity requestParameter, DefaultActivityStrategyFactory.DynamicContext dynamicContext) {  \n        return endNode;  \n    }  \n}\n</code></pre>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#endnode","title":"EndNode \u7ed3\u5c3e\u8282\u70b9","text":"Java<pre><code>@Slf4j  \n@Service  \npublic class EndNode extends AbstractGroupBuyMarketSupport&lt;MarketProductEntity, DefaultActivityStrategyFactory.DynamicContext, TrialBalanceEntity&gt; {  \n\n    @Override  \n    public TrialBalanceEntity doApply(MarketProductEntity requestParameter, DefaultActivityStrategyFactory.DynamicContext dynamicContext) throws Exception {  \n        log.info(\"\u62fc\u56e2\u5546\u54c1\u67e5\u8be2\u8bd5\u7b97\u670d\u52a1-EndNode userId:{} requestParameter:{}\", requestParameter.getUserId(), JSON.toJSONString(requestParameter));  \n\n        GroupBuyActivityDiscountVO groupBuyActivityDiscountVO = dynamicContext.getGroupBuyActivityDiscountVO();  \n        SkuVO skuVO = dynamicContext.getSkuVO();  \n\n        // \u8fd4\u56de\u7a7a\u7ed3\u679c  \n        return TrialBalanceEntity.builder()  \n                .goodsId(skuVO.getGoodsId())  \n                .goodsName(skuVO.getGoodsName())  \n                .originalPrice(skuVO.getOriginalPrice())  \n                .deductionPrice(new BigDecimal(\"0.00\"))  \n                .targetCount(groupBuyActivityDiscountVO.getTarget())  \n                .startTime(groupBuyActivityDiscountVO.getStartTime())  \n                .endTime(groupBuyActivityDiscountVO.getEndTime())  \n                .isVisible(false)  \n                .isEnable(false).build();  \n    }  \n\n    @Override  \n    public StrategyHandler&lt;MarketProductEntity, DefaultActivityStrategyFactory.DynamicContext, TrialBalanceEntity&gt; get(MarketProductEntity requestParameter, DefaultActivityStrategyFactory.DynamicContext dynamicContext) {  \n        return defaultStrategyHandler;  \n    }  \n}\n</code></pre>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#_3","title":"\u4e1a\u52a1\u6d41\u8f6c\u6d41\u7a0b\u68b3\u7406","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#1","title":"1. \u5165\u53e3\u8c03\u7528","text":"<ul> <li>\u4e1a\u52a1\u5165\u53e3\u4e3a <code>IndexGroupBuyMarketService.indexMarketTrial(MarketProductEntity)</code> \u65b9\u6cd5\u3002</li> <li>\u8be5\u65b9\u6cd5\u901a\u8fc7 <code>DefaultActivityStrategyFactory.strategyHandler()</code> \u83b7\u53d6\u7b56\u7565\u5904\u7406\u5668\uff08\u5b9e\u9645\u4e3a RootNode\uff09\uff0c\u5e76\u8c03\u7528\u5176 <code>apply</code> \u65b9\u6cd5\u3002</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#2","title":"2. \u89c4\u5219\u6811\u4e3b\u6d41\u7a0b","text":"<ul> <li><code>RootNode</code> \u4f5c\u4e3a\u89c4\u5219\u6811\u7684\u6839\u8282\u70b9\uff0c\u9996\u5148\u6821\u9a8c\u5165\u53c2\u5408\u6cd5\u6027\uff0c\u7136\u540e\u8c03\u7528 <code>router</code> \u65b9\u6cd5\u3002</li> <li><code>router</code> \u65b9\u6cd5\u901a\u8fc7 <code>get</code> \u65b9\u6cd5\u83b7\u53d6\u4e0b\u4e00\u4e2a\u8282\u70b9\uff08\u6b64\u5904\u4e3a <code>SwitchNode</code>\uff09\uff0c\u5e76\u7ee7\u7eed\u8c03\u7528\u5176 <code>apply</code> \u65b9\u6cd5\u3002</li> <li><code>SwitchNode</code> \u4f5c\u4e3a\u6d41\u7a0b\u5206\u652f\u8282\u70b9\uff0c\u76f4\u63a5\u8def\u7531\u5230 <code>MarketNode</code>\u3002</li> <li><code>MarketNode</code> \u8d1f\u8d23\u5f02\u6b65\u52a0\u8f7d\u62fc\u56e2\u6d3b\u52a8\u548c\u5546\u54c1\u4fe1\u606f\uff08\u901a\u8fc7\u591a\u7ebf\u7a0b\u5206\u522b\u67e5\u8be2 GroupBuyActivityDiscountVO \u548c SkuVO\uff09\uff0c\u5e76\u5c06\u7ed3\u679c\u5199\u5165\u4e0a\u4e0b\u6587 <code>DynamicContext</code>\u3002</li> <li>\u6570\u636e\u52a0\u8f7d\u5b8c\u6210\u540e\uff0c<code>MarketNode</code> \u7ee7\u7eed\u8def\u7531\u5230 <code>EndNode</code>\u3002</li> <li><code>EndNode</code> \u4f5c\u4e3a\u6d41\u7a0b\u7ec8\u70b9\u8282\u70b9\uff0c\u4ece\u4e0a\u4e0b\u6587\u4e2d\u83b7\u53d6\u524d\u7f6e\u67e5\u8be2\u7ed3\u679c\uff0c\u7ec4\u88c5\u5e76\u8fd4\u56de\u6700\u7ec8\u7684 <code>TrialBalanceEntity</code> \u7ed3\u679c\u3002</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#3","title":"3. \u6570\u636e\u6d41\u52a8\u8bf4\u660e","text":"<ul> <li>\u5165\u53c2 <code>MarketProductEntity</code> \u8d2f\u7a7f\u5168\u6d41\u7a0b\u3002</li> <li>\u5f02\u6b65\u67e5\u8be2\u5f97\u5230\u7684 <code>GroupBuyActivityDiscountVO</code> \u548c <code>SkuVO</code> \u88ab\u5199\u5165 <code>DynamicContext</code>\uff0c\u4f9b\u540e\u7eed\u8282\u70b9\u4f7f\u7528\u3002</li> <li>\u6700\u7ec8\u8fd4\u56de\u7684 <code>TrialBalanceEntity</code> \u7531 <code>EndNode</code> \u7ec4\u88c5\uff0c\u5305\u542b\u5546\u54c1\u548c\u6d3b\u52a8\u76f8\u5173\u7684\u6838\u5fc3\u4fe1\u606f\u3002</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#4","title":"4. \u8282\u70b9\u5173\u7cfb\u56fe","text":"Text Only<pre><code>IndexGroupBuyMarketService\n    \u2193\nRootNode\uff08\u53c2\u6570\u6821\u9a8c\uff09\n    \u2193\nSwitchNode\uff08\u6d41\u7a0b\u5206\u652f\uff09\n    \u2193\nMarketNode\uff08\u5f02\u6b65\u52a0\u8f7d\u6570\u636e\uff09\n    \u2193\nEndNode\uff08\u7ec4\u88c5\u8fd4\u56de\u7ed3\u679c\uff09\n</code></pre>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#_4","title":"\u89c4\u5219\u6811\u8bbe\u8ba1\u6a21\u5f0f\u76f8\u5173\u9762\u8bd5\u9898","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#_5","title":"\u9762\u8bd5\u9898\u8be6\u7ec6\u89e3\u7b54","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#1_1","title":"1. \u89c4\u5219\u6811\u8bbe\u8ba1\u6a21\u5f0f\u4e0e\u8d23\u4efb\u94fe\u6a21\u5f0f\u6709\u4f55\u5f02\u540c\uff1f\u5404\u81ea\u9002\u7528\u54ea\u4e9b\u573a\u666f\uff1f","text":"<p>\u5f02\u540c\u70b9\uff1a - \u76f8\u540c\u70b9\uff1a\u4e24\u8005\u90fd\u5c5e\u4e8e\u884c\u4e3a\u578b\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u6838\u5fc3\u601d\u60f3\u90fd\u662f\u5c06\u590d\u6742\u7684\u4e1a\u52a1\u6d41\u7a0b\u62c6\u5206\u4e3a\u591a\u4e2a\u8282\u70b9\uff0c\u6bcf\u4e2a\u8282\u70b9\u8d1f\u8d23\u5904\u7406\u81ea\u8eab\u7684\u903b\u8f91\uff0c\u5e76\u51b3\u5b9a\u662f\u5426\u7ee7\u7eed\u4f20\u9012\u3002 - \u4e0d\u540c\u70b9\uff1a   - \u8d23\u4efb\u94fe\u6a21\u5f0f\u8282\u70b9\u4e4b\u95f4\u662f\u4e00\u6761\u7ebf\u6027\u94fe\u8def\uff0c\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u6709\u4e00\u4e2a\u540e\u7ee7\u8282\u70b9\uff0c\u6d41\u7a0b\u56fa\u5b9a\uff0c\u6269\u5c55\u6027\u6709\u9650\u3002   - \u89c4\u5219\u6811\u6a21\u5f0f\u5219\u662f\u591a\u5206\u652f\u94fe\u8def\uff0c\u6bcf\u4e2a\u8282\u70b9\u53ef\u4ee5\u6839\u636e\u4e1a\u52a1\u52a8\u6001\u51b3\u5b9a\u540e\u7eed\u8282\u70b9\uff0c\u652f\u6301\u6811\u72b6\u7ed3\u6784\uff0c\u6269\u5c55\u6027\u548c\u7075\u6d3b\u6027\u66f4\u5f3a\u3002 \u9002\u7528\u573a\u666f\uff1a - \u8d23\u4efb\u94fe\u9002\u5408\u6d41\u7a0b\u56fa\u5b9a\u3001\u8282\u70b9\u987a\u5e8f\u660e\u786e\u7684\u573a\u666f\uff0c\u5982\u5ba1\u6279\u6d41\u3001\u65e5\u5fd7\u5904\u7406\u7b49\u3002 - \u89c4\u5219\u6811\u9002\u5408\u6d41\u7a0b\u590d\u6742\u3001\u5206\u652f\u591a\u53d8\u3001\u9700\u8981\u52a8\u6001\u7ec4\u88c5\u7684\u4e1a\u52a1\u573a\u666f\uff0c\u5982\u8425\u9500\u6d3b\u52a8\u3001\u98ce\u63a7\u51b3\u7b56\u3001\u590d\u6742\u89c4\u5219\u5f15\u64ce\u7b49\u3002</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#2_1","title":"2. \u5982\u4f55\u901a\u8fc7\u6cdb\u578b\u8bbe\u8ba1\u63d0\u5347\u89c4\u5219\u6811\u6a21\u677f\u7684\u901a\u7528\u6027\uff1f","text":"<p>\u901a\u8fc7\u5728\u62bd\u8c61\u6a21\u677f\u4e2d\u5f15\u5165\u6cdb\u578b\u53c2\u6570\uff08\u5982 T \u5165\u53c2\u3001D \u52a8\u6001\u4e0a\u4e0b\u6587\u3001R \u8fd4\u53c2\uff09\uff0c\u53ef\u4ee5\u8ba9\u89c4\u5219\u6811\u6a21\u578b\u9002\u914d\u4e0d\u540c\u7684\u4e1a\u52a1\u7c7b\u578b\u3002\u8fd9\u6837\uff0c\u8c03\u7528\u65b9\u53ea\u9700\u6307\u5b9a\u5177\u4f53\u7684\u7c7b\u578b\u5373\u53ef\u590d\u7528\u540c\u4e00\u5957\u89c4\u5219\u6811\u6846\u67b6\uff0c\u65e0\u9700\u91cd\u590d\u9020\u8f6e\u5b50\uff0c\u6781\u5927\u63d0\u5347\u4e86\u6a21\u677f\u7684\u901a\u7528\u6027\u548c\u53ef\u6269\u5c55\u6027\u3002</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#3_1","title":"3. \u5728\u89c4\u5219\u6811\u6a21\u5f0f\u4e0b\uff0c\u5982\u4f55\u5b9e\u73b0\u8282\u70b9\u7684\u7075\u6d3b\u6269\u5c55\u548c\u52a8\u6001\u7ec4\u88c5\uff1f","text":"<ul> <li>\u6bcf\u4e2a\u8282\u70b9\u5b9e\u73b0 <code>StrategyHandler</code> \u6216\u7ee7\u627f\u62bd\u8c61\u8282\u70b9\u57fa\u7c7b\uff0c\u901a\u8fc7\u5de5\u5382\u6216\u914d\u7f6e\u7075\u6d3b\u6ce8\u518c\u3002</li> <li>\u8282\u70b9\u4e4b\u95f4\u901a\u8fc7 <code>get</code> \u65b9\u6cd5\u52a8\u6001\u51b3\u5b9a\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u53ef\u4ee5\u6839\u636e\u4e1a\u52a1\u53c2\u6570\u3001\u4e0a\u4e0b\u6587\u7b49\u7075\u6d3b\u8def\u7531\u3002</li> <li>\u65b0\u589e\u8282\u70b9\u53ea\u9700\u5b9e\u73b0\u5bf9\u5e94\u63a5\u53e3\u5e76\u5728\u5de5\u5382\u6216\u914d\u7f6e\u4e2d\u6ce8\u518c\uff0c\u65e0\u9700\u4fee\u6539\u539f\u6709\u8282\u70b9\u4ee3\u7801\uff0c\u7b26\u5408\u5f00\u95ed\u539f\u5219\u3002</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#4-dynamiccontext","title":"4. \u89c4\u5219\u6811\u8282\u70b9\u95f4\u5982\u4f55\u8fdb\u884c\u6570\u636e\u4f20\u9012\uff1f\u8bf7\u7ed3\u5408 DynamicContext \u8bf4\u660e\u3002","text":"<ul> <li>\u901a\u8fc7 <code>DynamicContext</code> \u52a8\u6001\u4e0a\u4e0b\u6587\u5bf9\u8c61\u8d2f\u7a7f\u6574\u4e2a\u89c4\u5219\u6811\u6d41\u7a0b\u3002</li> <li>\u6bcf\u4e2a\u8282\u70b9\u53ef\u5c06\u81ea\u8eab\u5904\u7406\u7ed3\u679c\u3001\u67e5\u8be2\u5230\u7684\u6570\u636e\u7b49\u5199\u5165 <code>DynamicContext</code>\uff0c\u540e\u7eed\u8282\u70b9\u53ef\u76f4\u63a5\u8bfb\u53d6\u4f7f\u7528\uff0c\u5b9e\u73b0\u6570\u636e\u5171\u4eab\u4e0e\u4f20\u9012\u3002</li> <li>\u8fd9\u6837\u907f\u514d\u4e86\u53c2\u6570\u8fc7\u591a\u3001\u65b9\u6cd5\u7b7e\u540d\u81c3\u80bf\u7684\u95ee\u9898\uff0c\u4e5f\u4fbf\u4e8e\u6269\u5c55\u548c\u7ef4\u62a4\u3002</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#5","title":"5. \u5f02\u6b65\u8d44\u6e90\u52a0\u8f7d\u5728\u89c4\u5219\u6811\u4e2d\u7684\u5e94\u7528\u573a\u666f\u53ca\u5b9e\u73b0\u65b9\u5f0f\uff1f","text":"<ul> <li>\u5e94\u7528\u573a\u666f\uff1a\u5982\u8282\u70b9\u9700\u8981\u5e76\u53d1\u67e5\u8be2\u591a\u4e2a\u5916\u90e8\u8d44\u6e90\uff08\u6570\u636e\u5e93\u3001\u63a5\u53e3\u7b49\uff09\uff0c\u4e14\u8fd9\u4e9b\u8d44\u6e90\u4e4b\u95f4\u65e0\u5f3a\u4f9d\u8d56\u5173\u7cfb\u65f6\uff0c\u53ef\u91c7\u7528\u5f02\u6b65\u52a0\u8f7d\u63d0\u5347\u6574\u4f53\u6027\u80fd\u3002</li> <li>\u5b9e\u73b0\u65b9\u5f0f\uff1a\u5728\u8282\u70b9\u7684 <code>multiThread</code> \u65b9\u6cd5\u4e2d\uff0c\u5229\u7528\u7ebf\u7a0b\u6c60\u5e76\u53d1\u6267\u884c\u591a\u4e2a\u67e5\u8be2\u4efb\u52a1\uff0c\u7ed3\u679c\u901a\u8fc7 FutureTask \u7b49\u65b9\u5f0f\u6536\u96c6\uff0c\u6700\u540e\u7edf\u4e00\u5199\u5165 <code>DynamicContext</code>\u3002</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#6","title":"6. \u5982\u679c\u67d0\u4e2a\u8282\u70b9\u9700\u8981\u6839\u636e\u4e1a\u52a1\u52a8\u6001\u51b3\u5b9a\u540e\u7eed\u8282\u70b9\uff0c\u5982\u4f55\u5b9e\u73b0\uff1f","text":"<ul> <li>\u8282\u70b9\u5b9e\u73b0 <code>get</code> \u65b9\u6cd5\u65f6\uff0c\u6839\u636e\u5165\u53c2\u548c\u4e0a\u4e0b\u6587\u7684\u5b9e\u9645\u4e1a\u52a1\u6570\u636e\uff0c\u52a8\u6001\u9009\u62e9\u5e76\u8fd4\u56de\u4e0b\u4e00\u4e2a\u8282\u70b9\u5b9e\u4f8b\u3002</li> <li>\u4f8b\u5982\uff1a\u53ef\u6839\u636e\u7528\u6237\u7c7b\u578b\u3001\u5546\u54c1\u7c7b\u578b\u3001\u6d3b\u52a8\u72b6\u6001\u7b49\u6761\u4ef6\uff0c\u51b3\u5b9a\u6d41\u7a0b\u5206\u652f\u8d70\u5411\uff0c\u5b9e\u73b0\u7075\u6d3b\u7684\u4e1a\u52a1\u7f16\u6392\u3002</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#7","title":"7. \u89c4\u5219\u6811\u6a21\u5f0f\u4e0b\u5982\u4f55\u5904\u7406\u5f02\u5e38\u548c\u515c\u5e95\u903b\u8f91\uff1f","text":"<ul> <li>\u6bcf\u4e2a\u8282\u70b9\u53ef\u5728\u81ea\u8eab\u903b\u8f91\u4e2d\u6355\u83b7\u5e76\u5904\u7406\u5f02\u5e38\uff0c\u5fc5\u8981\u65f6\u629b\u51fa\u81ea\u5b9a\u4e49\u5f02\u5e38\u7531\u4e0a\u5c42\u7edf\u4e00\u5904\u7406\u3002</li> <li>\u62bd\u8c61\u57fa\u7c7b\u4e2d\u53ef\u8bbe\u7f6e <code>defaultStrategyHandler</code> \u515c\u5e95\u5904\u7406\u5668\uff0c\u5f53\u672a\u5339\u914d\u5230\u5408\u9002\u8282\u70b9\u6216\u53d1\u751f\u5f02\u5e38\u65f6\uff0c\u81ea\u52a8\u8d70\u515c\u5e95\u903b\u8f91\uff0c\u4fdd\u8bc1\u6d41\u7a0b\u5065\u58ee\u6027\u3002</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#8-strategymapperstrategyhandler","title":"8. \u8bf7\u7b80\u8ff0\u7b56\u7565\u6620\u5c04\u5668\uff08StrategyMapper\uff09\u548c\u7b56\u7565\u5904\u7406\u5668\uff08StrategyHandler\uff09\u7684\u804c\u8d23\u5206\u5de5\u3002","text":"<ul> <li><code>StrategyMapper</code> \u8d1f\u8d23\u6839\u636e\u53c2\u6570\u548c\u4e0a\u4e0b\u6587\u9009\u62e9\u5408\u9002\u7684\u7b56\u7565\u8282\u70b9\uff08\u5373\u6d41\u7a0b\u8def\u7531\uff09\u3002</li> <li><code>StrategyHandler</code> \u8d1f\u8d23\u5177\u4f53\u7684\u4e1a\u52a1\u5904\u7406\u903b\u8f91\uff08\u5373\u8282\u70b9\u53d7\u7406\uff09\u3002</li> <li>\u4e24\u8005\u89e3\u8026\uff0c\u4fbf\u4e8e\u6269\u5c55\u548c\u7ef4\u62a4\u3002</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#9","title":"9. \u7ed3\u5408\u5b9e\u9645\u4e1a\u52a1\uff0c\u5982\u4f55\u5c06\u89c4\u5219\u6811\u6a21\u5f0f\u4e0e\u5de5\u5382\u6a21\u5f0f\u7ed3\u5408\u4f7f\u7528\uff1f","text":"<ul> <li>\u901a\u8fc7\u5de5\u5382\u6a21\u5f0f\u7edf\u4e00\u7ba1\u7406\u548c\u751f\u4ea7\u89c4\u5219\u6811\u7684\u5404\u4e2a\u8282\u70b9\u5b9e\u4f8b\uff08\u5982 RootNode\u3001SwitchNode\u3001MarketNode \u7b49\uff09\u3002</li> <li>\u5de5\u5382\u8d1f\u8d23\u8282\u70b9\u7684\u6ce8\u518c\u3001\u4f9d\u8d56\u6ce8\u5165\u548c\u751f\u547d\u5468\u671f\u7ba1\u7406\uff0c\u4e1a\u52a1\u5165\u53e3\u53ea\u9700\u901a\u8fc7\u5de5\u5382\u83b7\u53d6\u6839\u8282\u70b9\u5373\u53ef\u3002</li> <li>\u8fd9\u6837\u53ef\u4ee5\u5b9e\u73b0\u8282\u70b9\u7684\u7075\u6d3b\u7ec4\u88c5\u3001\u66ff\u6362\u548c\u6269\u5c55\uff0c\u63d0\u5347\u7cfb\u7edf\u7684\u53ef\u7ef4\u62a4\u6027\u3002</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-2~2-3%20%E8%A7%84%E5%88%99%E6%A0%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A8%A1%E6%9D%BF/#10","title":"10. \u89c4\u5219\u6811\u8bbe\u8ba1\u6a21\u5f0f\u5728\u9ad8\u5e76\u53d1\u573a\u666f\u4e0b\u7684\u4f18\u52bf\u548c\u6ce8\u610f\u4e8b\u9879\u6709\u54ea\u4e9b\uff1f","text":"<p>\u4f18\u52bf\uff1a - \u8282\u70b9\u53ef\u5e76\u53d1\u5904\u7406\u65e0\u4f9d\u8d56\u7684\u6570\u636e\u52a0\u8f7d\u4efb\u52a1\uff0c\u5145\u5206\u5229\u7528\u591a\u6838\u8d44\u6e90\uff0c\u63d0\u5347\u541e\u5410\u91cf\u3002 - \u7ed3\u6784\u6e05\u6670\uff0c\u4fbf\u4e8e\u62c6\u5206\u548c\u6269\u5c55\uff0c\u9002\u5408\u590d\u6742\u9ad8\u5e76\u53d1\u4e1a\u52a1\u573a\u666f\u3002 \u6ce8\u610f\u4e8b\u9879\uff1a - \u5f02\u6b65\u4efb\u52a1\u9700\u5408\u7406\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\uff0c\u9632\u6b62\u7ebf\u7a0b\u6c60\u8d44\u6e90\u8017\u5c3d\u3002 - \u52a8\u6001\u4e0a\u4e0b\u6587\u5bf9\u8c61\u9700\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\uff0c\u907f\u514d\u5e76\u53d1\u8bfb\u5199\u51b2\u7a81\u3002 - \u8282\u70b9\u95f4\u6570\u636e\u4f20\u9012\u8981\u6e05\u6670\uff0c\u907f\u514d\u6570\u636e\u9057\u6f0f\u6216\u91cd\u590d\u5904\u7406\u3002</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-5%20%E4%BA%BA%E7%BE%A4%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/","title":"2 5 \u4eba\u7fa4\u6807\u7b7e\u6570\u636e\u91c7\u96c6","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-5%20%E4%BA%BA%E7%BE%A4%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/#_1","title":"\u4eba\u7fa4\u6807\u7b7e\u91c7\u96c6\u7684\u76ee\u7684\u4e0e\u4f5c\u7528","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-5%20%E4%BA%BA%E7%BE%A4%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/#_2","title":"\ud83c\udfaf \u76ee\u7684\uff1a","text":"<p>\u6784\u5efa\u4e00\u4e2a\u8f7b\u91cf\u5316\u3001\u9ad8\u6027\u80fd\u3001\u9ad8\u5e76\u53d1\u53ef\u8bfb\u7684\u4eba\u7fa4\u6807\u7b7e\u7cfb\u7edf\uff0c\u5b9e\u73b0\u5bf9\u6307\u5b9a\u4e1a\u52a1\u884c\u4e3a\u7528\u6237\u7684\u7cbe\u51c6\u8bc6\u522b\u3001\u5f52\u7c7b\u548c\u6301\u4e45\u5316\uff0c\u4e3a\u7cbe\u51c6\u8425\u9500\u63d0\u4f9b\u6570\u636e\u652f\u6301\u3002</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-5%20%E4%BA%BA%E7%BE%A4%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/#_3","title":"\ud83d\udca1 \u4f5c\u7528\uff1a","text":"\u529f\u80fd\u6a21\u5757 \u4f5c\u7528 \ud83c\udfaf \u7528\u6237\u5206\u7fa4 \u6309\u7167\u6807\u7b7e\u89c4\u5219\uff08\u5982\u53c2\u4e0e\u6b21\u6570\u3001\u6d88\u8d39\u91d1\u989d\u7b49\uff09\u5212\u5206\u7528\u6237\u7fa4\u4f53 \ud83d\udce6 \u6570\u636e\u4ed3\u652f\u6491 \u501f\u52a9\u516c\u53f8\u5df2\u6709\u6570\u636e\u4ed3\u5e93\u7684\u6570\u636e\u8fdb\u884c\u7528\u6237\u884c\u4e3a\u5206\u6790 \ud83d\ude80 Redis BitMap \u9ad8\u6548\u5b58\u50a8\u548c\u5feb\u901f\u67e5\u8be2\u6570\u767e\u4e07\u7ea7\u7528\u6237\u662f\u5426\u5c5e\u4e8e\u67d0\u4e00\u6807\u7b7e \ud83d\udce3 \u7cbe\u51c6\u8425\u9500 \u652f\u6491\u4f18\u60e0\u5238\u3001\u5b9a\u5411\u6d88\u606f\u3001\u901a\u77e5\u7b49\u7cbe\u51c6\u6d3b\u52a8\u89e6\u8fbe \ud83e\udde0 \u6a21\u578b\u9a71\u52a8 \u53ef\u914d\u5408R\u8bed\u8a00\u5efa\u6a21\u7ed3\u679c\u5b9e\u73b0\u81ea\u52a8\u5316\u89c4\u5219\u751f\u6210"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-5%20%E4%BA%BA%E7%BE%A4%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/#_4","title":"\u4e1a\u52a1\u6d41\u7a0b","text":"<ol> <li>\u7528\u6237\u884c\u4e3a\u89e6\u53d1 \u2192 \u88ab\u91c7\u96c6\u4e3a\u4e1a\u52a1\u6570\u636e</li> <li>\u4e1a\u52a1\u6570\u636e\u5f52\u5165\u6570\u4ed3\uff0c\u5f62\u6210\u57fa\u7840\u6570\u636e\u96c6\u5e02</li> <li>\u4eba\u7fa4\u6807\u7b7e\u4efb\u52a1 \u8bfb\u53d6\u89c4\u5219 \u2192 \u6267\u884c\u5339\u914d\u5206\u6790</li> <li>\u7b26\u5408\u6761\u4ef6\u7528\u6237 \u5199\u5165\u4eba\u7fa4\u6807\u7b7e\u660e\u7ec6\u8868</li> <li>\u540c\u6b65\u5199\u5165 Redis BitMap \u5b9e\u73b0\u9ad8\u6548\u6807\u8bb0</li> <li>\u7edf\u8ba1\u6570\u91cf \u7528\u4e8e\u540e\u7eed\u5206\u6790\u548c\u7ba1\u7406</li> <li>\u8fd0\u8425\u4eba\u5458 \u4f7f\u7528\u6807\u7b7e\u6295\u653e\u8425\u9500\u6d3b\u52a8</li> </ol>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-5%20%E4%BA%BA%E7%BE%A4%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/#_5","title":"\u76f8\u5173\u4ee3\u7801\u5b9e\u73b0","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-5%20%E4%BA%BA%E7%BE%A4%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/#tagservice","title":"TagService \u4eba\u7fa4\u6807\u7b7e\u670d\u52a1","text":"<ul> <li>\u901a\u8fc7\u91c7\u96c6\u4eba\u7fa4\u6807\u7b7e\u4efb\u52a1\u83b7\u53d6\u4eba\u7fa4\u6570\u636e\uff0c\u6682\u65f6\u6ca1\u6709\u8fd9\u7c7b\u4e1a\u52a1\u6570\u636e\uff0c\u6240\u4ee5\u5148\u6a21\u62df\u4e00\u4e2a\u7528\u6237\u6570\u636e\uff0c\u4f60\u4e5f\u53ef\u4ee5\u8c03\u6574\u8fd9\u91cc\u7684\u6570\u636e\u4e3a\u4f60\u9700\u8981\u7684\u3002</li> <li>\u91c7\u96c6\u6570\u636e\u540e\uff0c<code>repository.addCrowdTagsUserId(tagId, userId);</code> \u5199\u5165\u5230\u6570\u636e\u5e93\u8868\u3002\u6ce8\u610f addCrowdTagsUserId \u65b9\u6cd5\uff0c\u5199\u5165\u540e\u8fd8\u4f1a\u505a BitMap \u5b58\u50a8\u3002</li> <li>\u8fd9\u4e9b\u64cd\u4f5c\u5b8c\u6210\u540e\uff0c\u4f1a\u66f4\u65b0\u7edf\u8ba1\u91cf\u3002\u6ce8\u610f\uff0c\u76ee\u524d\u7684\u7edf\u8ba1\u91cf\u66f4\u65b0\u662f\u4e0d\u51c6\u7684\uff0c\u56e0\u4e3a\u6267\u884c addCrowdTagsUserId \u64cd\u4f5c\uff0c\u4f1a\u6709\u4e3b\u952e\u51b2\u7a81\uff0c\u4e3b\u952e\u51b2\u7a81\u76f4\u63a5\u62e6\u622a\u4e0d\u4f1a\u629b\u5f02\u5e38\u3002\u90a3\u4e48\u66f4\u65b0\u4eba\u7fa4\u6807\u7b7e\u7684\u7edf\u8ba1\u91cf\u4f1a\u7ee7\u7eed\u589e\u52a0\u3002\u4f60\u53ef\u4ee5\u601d\u8003\u4e0b\u8fd9\u91cc\u8981\u600e\u4e48\u5904\u7406\uff0c\u8bfe\u7a0b\u540e\u7eed\u4e5f\u4f1a\u7ee7\u7eed\u5904\u7406\u3002</li> </ul> Java<pre><code>@Slf4j\n@Service\npublic class TagService implements ITagService {\n\n    @Resource\n    private ITagRepository repository;\n\n    @Override\n    public void execTagBatchJob(String tagId, String batchId) {\n        log.info(\"\u4eba\u7fa4\u6807\u7b7e\u6279\u6b21\u4efb\u52a1 tagId:{} batchId:{}\", tagId, batchId);\n\n        // 1. \u67e5\u8be2\u6279\u6b21\u4efb\u52a1\n        CrowdTagsJobEntity crowdTagsJobEntity = repository.queryCrowdTagsJobEntity(tagId, batchId);\n\n        // 2. \u91c7\u96c6\u7528\u6237\u6570\u636e\n\n        // 3. \u6570\u636e\u5199\u5165\u8bb0\u5f55\n        // \u6ca1\u6570\u636e\uff0c\u5148\u6a21\u62df\n        List&lt;String&gt; userIdList = new ArrayList&lt;String&gt;(){{\n            add(\"xiaofuge\");\n            add(\"dopplerxd\");\n        }};\n\n        // 4. \u4e00\u822c\u4eba\u7fa4\u6807\u7b7e\u7684\u5904\u7406\u5728\u516c\u53f8\u4e2d\uff0c\u4f1a\u6709\u4e13\u95e8\u7684\u6570\u636e\u6570\u4ed3\u56e2\u961f\u901a\u8fc7\u811a\u672c\u65b9\u5f0f\u5199\u5165\u5230\u6570\u636e\u5e93\uff0c\u4e0d\u9700\u8981\u8fd9\u6837\u4e00\u4e2a\u4e2a\u6216\u8005\u6279\u6b21\u6765\u5199\n        for (String userId : userIdList) {\n            repository.addCrowdTagsUserId(tagId, userId);\n        }\n\n        // 5. \u66f4\u65b0\u4eba\u7fa4\u6807\u7b7e\u7edf\u8ba1\u91cf\n        repository.updateCrowdTagsStatistics(tagId, userIdList.size());\n    }\n}\n</code></pre> <p><code>TagService.execTagBatchJob()</code></p> <ul> <li>\u67e5\u8be2\u6807\u7b7e\u4efb\u52a1\uff1a\u4ece\u6570\u636e\u5e93\u83b7\u53d6\u6807\u7b7e\u7684\u89c4\u5219\uff08\u5982\u53c2\u4e0e\u6b21\u6570\u3001\u7edf\u8ba1\u65f6\u95f4\u8303\u56f4\uff09</li> <li>\u7528\u6237\u91c7\u96c6\uff08\u7b80\u5316\u6a21\u62df\uff09\uff1a\u6536\u96c6\u6ee1\u8db3\u89c4\u5219\u7684\u7528\u6237 ID \u5217\u8868</li> <li>\u5199\u5165\u660e\u7ec6\u8bb0\u5f55\uff1a\u6279\u91cf\u5199\u5165 <code>crowd_tags_detail</code></li> <li>\u66f4\u65b0\u7edf\u8ba1\u6570\u636e\uff1a\u66f4\u65b0 <code>crowd_tags</code> \u4e2d\u8be5\u6807\u7b7e\u7684\u7528\u6237\u603b\u6570</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-5%20%E4%BA%BA%E7%BE%A4%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/#tagrepository","title":"TagRepository","text":"Java<pre><code>@Repository\npublic class TagRepository implements ITagRepository {\n\n    @Resource\n    private ICrowdTagsJobDao crowdTagsJobDao;\n    @Resource\n    private ICrowdTagsDao crowdTagsDao;\n    @Resource\n    private ICrowdTagsDetailDao crowdTagsDetailDao;\n    @Resource\n    private IRedisService redisService;\n\n    @Override\n    public CrowdTagsJobEntity queryCrowdTagsJobEntity(String tagId, String batchId) {\n        CrowdTagsJob crowdTagsJobReq = new CrowdTagsJob();\n        crowdTagsJobReq.setTagId(tagId);\n        crowdTagsJobReq.setBatchId(batchId);\n\n        CrowdTagsJob crowdTagsJobRes = crowdTagsJobDao.queryCrowdTagsJob(crowdTagsJobReq);\n\n        return CrowdTagsJobEntity.builder()\n                .tagType(crowdTagsJobRes.getTagType())\n                .tagRule(crowdTagsJobRes.getTagRule())\n                .statStartTime(crowdTagsJobRes.getStatStartTime())\n                .statEndTime(crowdTagsJobRes.getStatEndTime())\n                .build();\n    }\n\n    @Override\n    public void addCrowdTagsUserId(String tagId, String userId) {\n        CrowdTagsDetail crowdTagsDetailReq = new CrowdTagsDetail();\n        crowdTagsDetailReq.setTagId(tagId);\n        crowdTagsDetailReq.setUserId(userId);\n\n        try {\n            crowdTagsDetailDao.addCrowdTagsUserId(crowdTagsDetailReq);\n\n            RBitSet bitSet = redisService.getBitSet(tagId);\n            bitSet.set(redisService.getIndexFromUserId(userId), true);\n        } catch (DuplicateKeyException ignore) {\n            // \u5ffd\u7565\u552f\u4e00\u7d22\u5f15\u51b2\u7a81\n        }\n    }\n\n    @Override\n    public void updateCrowdTagsStatistics(String tagId, int size) {\n        CrowdTags crowdTagsReq = new CrowdTags();\n        crowdTagsReq.setTagId(tagId);\n        crowdTagsReq.setStatistics(size);\n\n        crowdTagsDao.updateCrowdTagsStatistics(crowdTagsReq);\n    }\n}\n</code></pre> <p><code>TagRepository.addCrowdTagsUserId()</code></p> <ul> <li>\u5411\u6570\u636e\u5e93\u5199\u5165\u660e\u7ec6\uff08\u552f\u4e00\u7d22\u5f15\u5904\u7406\u51b2\u7a81\uff09</li> <li>\u5229\u7528 Redis BitMap \u5c06\u7528\u6237\u5728\u8be5\u6807\u7b7e\u4e0b\u6807\u8bb0\u4e3a\u201c\u5b58\u5728\u201d</li> <li>BitMap\u4f4d\u7f6e\u7531 <code>getIndexFromUserId()</code> \u786e\u5b9a</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-5%20%E4%BA%BA%E7%BE%A4%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/#redis-bitmap","title":"Redis bitmap \u8fdb\u884c\u6570\u636e\u5b58\u50a8","text":"Java<pre><code>public interface IRedisService {\n    default int getIndexFromUserId(String userId) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] hashBytes = md.digest(userId.getBytes(StandardCharsets.UTF_8));\n            // \u5c06\u54c8\u5e0c\u503c\u8f6c\u6362\u4e3a\u6574\u6570\n            BigInteger bigInt = new BigInteger(1, hashBytes);\n            // \u53d6\u6a21\u8fd0\u7b97\uff0c\u786e\u4fdd\u7d22\u5f15\u5728\u6570\u7ec4\u8303\u56f4\u5185\n            return bigInt.mod(BigInteger.valueOf(Integer.MAX_VALUE)).intValue();\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(\"MD5 algorithm not found\", e);\n        }\n    }\n}\n</code></pre>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-5%20%E4%BA%BA%E7%BE%A4%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/#ai","title":"AI \u9762\u8bd5\u9898","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-5%20%E4%BA%BA%E7%BE%A4%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/#1","title":"1. \u4ec0\u4e48\u662f\u4eba\u7fa4\u6807\u7b7e\uff1f\u5728\u62fc\u56e2\u8425\u9500\u7cfb\u7edf\u4e2d\u5b83\u7684\u4f5c\u7528\u662f\u4ec0\u4e48\uff1f","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-5%20%E4%BA%BA%E7%BE%A4%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/#_6","title":"\u2705 \u4eba\u7fa4\u6807\u7b7e\u5b9a\u4e49\uff1a","text":"<p>\u4eba\u7fa4\u6807\u7b7e\u662f\u5bf9\u7528\u6237\u67d0\u4e9b\u4e1a\u52a1\u884c\u4e3a\u3001\u7279\u5f81\u3001\u5c5e\u6027\u7684\u62bd\u8c61\u63cf\u8ff0\uff0c\u6807\u7b7e\u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u7528\u6237\u5206\u7fa4\u7684\u89c4\u5219\u6807\u8bc6\uff0c\u7528\u6765\u6807\u8bb0\u7528\u6237\u662f\u5426\u5c5e\u4e8e\u67d0\u4e2a\u4e1a\u52a1\u5b9a\u4e49\u4e0b\u7684\u7279\u5b9a\u7fa4\u4f53\u3002</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-5%20%E4%BA%BA%E7%BE%A4%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/#_7","title":"\u2705 \u4e3e\u4f8b\uff1a","text":"<ul> <li>\u8fd130\u5929\u8d2d\u4e70\u91d1\u989d \u2265 500 \u5143 \u2192 \u9ad8\u4ef7\u503c\u7528\u6237\u6807\u7b7e</li> <li>\u6700\u8fd1\u53c2\u4e0e\u62fc\u56e2 \u2265 3 \u6b21 \u2192 \u6d3b\u8dc3\u62fc\u56e2\u7528\u6237\u6807\u7b7e</li> <li>\u9886\u53d6\u4f18\u60e0\u5238\u4f46\u672a\u4e0b\u5355 \u2192 \u6d41\u5931\u9884\u8b66\u7528\u6237\u6807\u7b7e</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-5%20%E4%BA%BA%E7%BE%A4%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/#_8","title":"\u2705 \u5728\u62fc\u56e2\u8425\u9500\u7cfb\u7edf\u4e2d\u7684\u4f5c\u7528\uff1a","text":"<ol> <li>\u7cbe\u51c6\u8425\u9500\u6295\u653e\uff1a\u57fa\u4e8e\u6807\u7b7e\u5708\u5b9a\u7528\u6237\uff0c\u5206\u53d1\u62fc\u56e2\u4f18\u60e0\u3001\u901a\u77e5\u3001\u5238\u3001\u77ed\u4fe1\u7b49\u3002</li> <li>\u7b56\u7565\u81ea\u52a8\u5316\u6267\u884c\uff1a\u4e0e\u62fc\u56e2\u6d3b\u52a8\u7ed1\u5b9a\uff0c\u5b9e\u73b0\u81ea\u52a8\u5224\u65ad\u7528\u6237\u662f\u5426\u5177\u5907\u8d44\u683c\uff08\u5982\u53c2\u4e0e/\u53ef\u89c1\u9650\u5236\uff09\u3002</li> <li>\u6d3b\u52a8\u6548\u679c\u76d1\u63a7\uff1a\u7edf\u8ba1\u6807\u7b7e\u5bf9\u5e94\u7528\u6237\u884c\u4e3a\u7684\u53cd\u9988\uff0c\u5f62\u6210\u7cbe\u7ec6\u5316\u590d\u76d8\u6570\u636e\u3002</li> <li>\u63d0\u5347ROI\uff08\u6295\u5165\u4ea7\u51fa\u6bd4\uff09\uff1a\u51cf\u5c11\u65e0\u6548\u6295\u653e\uff0c\u628a\u8d44\u6e90\u96c6\u4e2d\u5728\u9ad8\u6f5c\u7528\u6237\u4e0a\u3002</li> </ol>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-5%20%E4%BA%BA%E7%BE%A4%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/#2-redis-bitmap","title":"2. \u4e3a\u4ec0\u4e48\u9009\u62e9\u4f7f\u7528 Redis BitMap \u5b58\u50a8\u4eba\u7fa4\u6807\u7b7e\uff1f\u4f18\u70b9\u662f\u4ec0\u4e48\uff1f","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-5%20%E4%BA%BA%E7%BE%A4%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/#bitmap","title":"\u2705 BitMap \u662f\u4ec0\u4e48\uff1f","text":"<p>Redis BitMap \u662f\u4e00\u79cd\u4f7f\u7528\u4f4d\u6570\u7ec4\uff08bitmap\uff09\u6765\u5b58\u50a8\u5e03\u5c14\u503c\uff080/1\uff09\u7684\u6570\u636e\u7ed3\u6784\u3002\u6bcf\u4e00\u4e2a\u7528\u6237ID \u6620\u5c04\u4e3a\u4e00\u4e2a\u4f4d\uff0c<code>1</code> \u8868\u793a\u201c\u5c5e\u4e8e\u8be5\u6807\u7b7e\u201d\uff0c<code>0</code> \u8868\u793a\u201c\u4e0d\u5c5e\u4e8e\u201d\u3002</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-5%20%E4%BA%BA%E7%BE%A4%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/#_9","title":"\u2705 \u4e3a\u4ec0\u4e48\u9002\u5408\u5b58\u50a8\u4eba\u7fa4\u6807\u7b7e\uff1f","text":"<ol> <li>\u7a7a\u95f4\u6781\u7701\uff1a</li> <li>BitMap \u6bcf\u4f4d\u53ea\u5360 1 bit\uff0c1000 \u4e07\u7528\u6237\u4ec5\u9700\u7ea6 1.25MB \u5185\u5b58\u3002</li> <li>\u76f8\u6bd4\u4e8e Set \u6216 List \u7c7b\u578b\uff0c\u8282\u7701\u6570\u5341\u500d\u7a7a\u95f4\u3002</li> <li>\u67e5\u627e\u6781\u5feb\uff1a</li> <li>\u4f4d\u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6 O(1)\uff0c\u5224\u65ad\u7528\u6237\u662f\u5426\u547d\u4e2d\u67d0\u4e2a\u6807\u7b7e\u975e\u5e38\u5feb\u3002</li> <li>\u5e76\u96c6/\u4ea4\u96c6\u64cd\u4f5c\u7b80\u5355\uff1a</li> <li>Redis \u63d0\u4f9b <code>BITOP AND/OR/XOR</code> \u6307\u4ee4\uff0c\u65b9\u4fbf\u5b9e\u73b0\u6807\u7b7e\u7ec4\u5408\u7b5b\u9009\u3002</li> <li>\u5929\u7136\u652f\u6301\u5e42\u7b49\u6027\u548c\u552f\u4e00\u6027\uff1a</li> <li>\u76f8\u540c\u7528\u6237\u8bbe\u7f6e\u4f4d\u503c\u591a\u6b21\u4e0d\u4f1a\u4ea7\u751f\u91cd\u590d\u95ee\u9898\u3002</li> <li>\u9ad8\u5e76\u53d1\u53ef\u8bfb\uff1a</li> <li>BitMap \u5b58\u50a8\u4e8e\u5185\u5b58\u4e2d\uff0c\u9002\u5408\u5927\u89c4\u6a21\u5b9e\u65f6\u8bfb\u5199\u573a\u666f\u3002</li> </ol>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-5%20%E4%BA%BA%E7%BE%A4%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/#3","title":"3. \u63cf\u8ff0\u4e00\u6b21\u5b8c\u6574\u7684\u4eba\u7fa4\u6807\u7b7e\u91c7\u96c6\u6d41\u7a0b\uff0c\u6d89\u53ca\u54ea\u4e9b\u5173\u952e\u6a21\u5757\uff1f","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-5%20%E4%BA%BA%E7%BE%A4%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/#_10","title":"\ud83d\udcca \u6d41\u7a0b\u6b65\u9aa4\uff1a","text":"Text Only<pre><code>[\u7528\u6237\u884c\u4e3a] \u2192 [\u4e1a\u52a1\u6570\u636e\u5199\u5165\u6570\u4ed3] \u2192 [\u89e6\u53d1\u4eba\u7fa4\u6807\u7b7e\u4efb\u52a1] \u2192 [\u89c4\u5219\u89e3\u6790]\n        \u2192 [\u5339\u914d\u547d\u4e2d\u7528\u6237] \u2192 [\u5199\u5165 crowd_tags_detail \u8868]\n        \u2192 [\u5199\u5165 Redis BitMap] \u2192 [\u7edf\u8ba1\u66f4\u65b0 crowd_tags \u8868]\n</code></pre>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-5%20%E4%BA%BA%E7%BE%A4%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/#_11","title":"\ud83d\udd27 \u5173\u952e\u6a21\u5757\u8bf4\u660e\uff1a","text":"\u6a21\u5757 \u8bf4\u660e CrowdTagsJobEntity \u63cf\u8ff0\u6807\u7b7e\u4efb\u52a1\uff0c\u5305\u62ec\u7edf\u8ba1\u65f6\u95f4\u3001\u89c4\u5219\u3001\u6807\u7b7e\u7c7b\u578b\u7b49 TagService \u6838\u5fc3\u6267\u884c\u5165\u53e3\uff0c\u8d1f\u8d23\u9a71\u52a8\u6574\u4e2a\u6807\u7b7e\u8ba1\u7b97\u6d41\u7a0b Repository\u5c42 \u5c01\u88c5 DB \u4e0e Redis \u64cd\u4f5c\uff0c\u89e3\u8026\u6570\u636e\u8bbf\u95ee DataWarehouse \u79bb\u7ebf\u6807\u7b7e\u8ba1\u7b97\u7684\u6570\u636e\u6765\u6e90\uff0c\u7531\u6570\u4ed3\u8d1f\u8d23\u63d0\u4f9b\u5206\u6790\u7ed3\u679c Redis BitMap \u5b9e\u73b0\u767e\u4e07\u7ea7\u522b\u6807\u7b7e\u7528\u6237\u5b58\u50a8\u4e0e\u5b9e\u65f6\u5224\u65ad"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-5%20%E4%BA%BA%E7%BE%A4%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/#4","title":"4. \u5982\u4f55\u4fdd\u8bc1\u7528\u6237\u6807\u7b7e\u5199\u5165\u7684\u5e42\u7b49\u6027\uff1f\u4f60\u5728\u4ee3\u7801\u4e2d\u5982\u4f55\u5904\u7406\uff1f","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-5%20%E4%BA%BA%E7%BE%A4%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/#_12","title":"\u2705 \u5e42\u7b49\u6027\u5b9a\u4e49\uff1a","text":"<p>\u65e0\u8bba\u6267\u884c\u591a\u5c11\u6b21\u76f8\u540c\u64cd\u4f5c\uff0c\u7ed3\u679c\u59cb\u7ec8\u4e00\u81f4\u3002\u5bf9\u4e8e\u6807\u7b7e\u7cfb\u7edf\u6765\u8bf4\uff0c\u7528\u6237\u5e94\u4e0d\u4f1a\u88ab\u91cd\u590d\u8ba1\u5165\u67d0\u6807\u7b7e\u3002</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-5%20%E4%BA%BA%E7%BE%A4%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/#_13","title":"\u2705 \u5199\u5165\u6570\u636e\u5e93\u7684\u5e42\u7b49\u6027\uff1a","text":"Java<pre><code>try {\n    crowdTagsDetailDao.addCrowdTagsUserId(crowdTagsDetailReq);\n} catch (DuplicateKeyException ignore) {\n    // \u9047\u5230\u552f\u4e00\u952e\u51b2\u7a81\u5ffd\u7565\uff0c\u907f\u514d\u91cd\u590d\u63d2\u5165\n}\n</code></pre> <ul> <li>\u552f\u4e00\u7d22\u5f15\u7ea6\u675f\uff1a\u6570\u636e\u5e93\u5bf9 <code>(tag_id, user_id)</code> \u505a\u552f\u4e00\u7d22\u5f15\u63a7\u5236</li> <li>\u5f02\u5e38\u6355\u83b7\u515c\u5e95\uff1a\u91cd\u590d\u63d2\u5165\u4f1a\u629b\u51fa <code>DuplicateKeyException</code>\uff0c\u7cfb\u7edf\u5ffd\u7565\u5904\u7406</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-5%20%E4%BA%BA%E7%BE%A4%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/#redis","title":"\u2705 \u5199\u5165 Redis \u7684\u5e42\u7b49\u6027\uff1a","text":"Java<pre><code>bitSet.set(redisService.getIndexFromUserId(userId), true);\n</code></pre> <ul> <li>BitMap \u8bbe\u7f6e\u91cd\u590d\u4f4d\u503c\u4e0d\u4f1a\u62a5\u9519\uff0c\u5929\u7136\u5e42\u7b49</li> <li>Redis BitMap \u7684\u4f4d\u64cd\u4f5c\u4e0d\u4f1a\u5bfc\u81f4\u6570\u636e\u91cd\u590d\u6216\u6c61\u67d3</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-5%20%E4%BA%BA%E7%BE%A4%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/#5-redis-bitmap","title":"5. \u5982\u679c\u6807\u7b7e\u6570\u636e\u91cf\u8fbe\u5230\u5343\u4e07\u7ea7\uff0cRedis BitMap \u662f\u5426\u8fd8\u80fd\u5e94\u5bf9\uff1f\u5982\u4f55\u4f18\u5316\uff1f","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-5%20%E4%BA%BA%E7%BE%A4%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/#redis-bitmap_1","title":"\u2705 Redis BitMap \u53ef\u5e94\u5bf9\uff1a","text":"<ul> <li>BitMap \u7406\u8bba\u4e0a\u652f\u6301 2^32 \u4e2a\u7528\u6237\uff0c\u5373\u8d85\u8fc7 40 \u4ebf\u7528\u6237\uff1b</li> <li>1 \u5343\u4e07\u7528\u6237\u4ec5\u5360\u7528 \u2248 1.25 MB \u5185\u5b58\uff0cRedis \u6beb\u65e0\u538b\u529b\u3002</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-5%20%E4%BA%BA%E7%BE%A4%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/#_14","title":"\u2705 \u4f18\u5316\u5efa\u8bae\uff1a","text":"\u4f18\u5316\u70b9 \u8bf4\u660e \u5206\u7247\u5b58\u50a8 \u5927\u6807\u7b7e\u62c6\u6210\u591a\u4e2a\u5c0f BitMap\uff0c\u5982\u6309\u7528\u6237ID hash\u5206\u6bb5 Roaring Bitmap \u538b\u7f29\u7a00\u758f\u6570\u636e\uff08\u5982 Java RoaringBitmap + Redis Bloom \u5b9e\u73b0\uff09 \u6570\u636e\u9884\u70ed/\u5ef6\u8fdf\u52a0\u8f7d \u6d3b\u8dc3\u6807\u7b7e\u5e38\u9a7b\u5185\u5b58\uff0c\u5176\u4f59\u6807\u7b7e\u6309\u9700\u52a0\u8f7d \u5e03\u9686\u8fc7\u6ee4\u5668 \u5bf9\u4e0d\u6d3b\u8dc3\u6807\u7b7e\u4f7f\u7528\u5e03\u9686\u8fc7\u6ee4\u5668\u4ee3\u66ff\u4f4d\u56fe\uff0c\u8282\u7701\u8d44\u6e90 \u591a\u8282\u70b9 Redis Cluster \u6c34\u5e73\u6269\u5c55 Redis\uff0c\u63d0\u5347\u5e76\u53d1\u80fd\u529b\u4e0e\u53ef\u7528\u6027"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-8%20%E5%9F%BA%E4%BA%8ERedis%E7%9A%84%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E5%BC%80%E5%85%B3/","title":"2 8 \u57fa\u4e8eRedis\u7684\u52a8\u6001\u914d\u7f6e\u5f00\u5173","text":"<p>\u9879\u76ee\u5f15\u5165\u4e86\u57fa\u4e8e Redis \u7684\u52a8\u6001\u914d\u7f6e\u5f00\u5173\uff08Dynamic Configuration Control\uff0c\u7b80\u79f0 DCC\uff09\u673a\u5236\u3002\u8fd9\u4e00\u529f\u80fd\u65e8\u5728\u5b9e\u73b0\u7cfb\u7edf\u914d\u7f6e\u7684\u52a8\u6001\u8c03\u6574\uff0c\u65e0\u9700\u91cd\u542f\u5e94\u7528\uff0c\u4ece\u800c\u63d0\u9ad8\u7cfb\u7edf\u7684\u7075\u6d3b\u6027\u548c\u53ef\u7ef4\u62a4\u6027\u3002</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-8%20%E5%9F%BA%E4%BA%8ERedis%E7%9A%84%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E5%BC%80%E5%85%B3/#_1","title":"\ud83e\udde9 \u529f\u80fd\u6982\u8ff0","text":"<p>\u8be5\u63d0\u4ea4\u5b9e\u73b0\u4e86\u4e00\u4e2a\u57fa\u4e8e Redis \u7684\u52a8\u6001\u914d\u7f6e\u5f00\u5173\u7cfb\u7edf\uff0c\u5141\u8bb8\u5f00\u53d1\u8005\u5728\u4e0d\u91cd\u542f\u5e94\u7528\u7684\u60c5\u51b5\u4e0b\uff0c\u52a8\u6001\u5730\u542f\u7528\u6216\u7981\u7528\u67d0\u4e9b\u529f\u80fd\u6a21\u5757\u3002\u8fd9\u5bf9\u4e8e\u9700\u8981\u5feb\u901f\u54cd\u5e94\u5e02\u573a\u53d8\u5316\u6216\u8fdb\u884c A/B \u6d4b\u8bd5\u7684\u573a\u666f\u5c24\u4e3a\u91cd\u8981\u3002</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-8%20%E5%9F%BA%E4%BA%8ERedis%E7%9A%84%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E5%BC%80%E5%85%B3/#_2","title":"\ud83d\udd0d \u5b9e\u73b0\u539f\u7406","text":"<p>\u8be5\u529f\u80fd\u7684\u5b9e\u73b0\u4e3b\u8981\u6d89\u53ca\u4ee5\u4e0b\u51e0\u4e2a\u7ec4\u4ef6\uff1a</p> <ol> <li>\u6ce8\u89e3\u5b9a\u4e49\uff1a\u901a\u8fc7\u81ea\u5b9a\u4e49\u6ce8\u89e3 <code>@DCCValue</code>\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u6807\u8bb0\u9700\u8981\u52a8\u6001\u63a7\u5236\u7684\u914d\u7f6e\u9879\u3002</li> <li>\u914d\u7f6e\u503c\u52a0\u8f7d\uff1a<code>DCCValueBeanFactory</code> \u7c7b\u8d1f\u8d23\u5728\u5e94\u7528\u542f\u52a8\u65f6\u626b\u63cf\u5e26\u6709 <code>@DCCValue</code> \u6ce8\u89e3\u7684\u5b57\u6bb5\uff0c\u5e76\u4ece Redis \u4e2d\u52a0\u8f7d\u5bf9\u5e94\u7684\u914d\u7f6e\u503c\u3002</li> <li>Redis \u5b58\u50a8\uff1a\u914d\u7f6e\u9879\u4ee5\u952e\u503c\u5bf9\u7684\u5f62\u5f0f\u5b58\u50a8\u5728 Redis \u4e2d\uff0c\u952e\u4e3a\u914d\u7f6e\u9879\u7684\u540d\u79f0\uff0c\u503c\u4e3a\u914d\u7f6e\u9879\u7684\u5f53\u524d\u72b6\u6001\uff08\u5982 \"true\" \u6216 \"false\"\uff09\u3002</li> <li>\u914d\u7f6e\u670d\u52a1\uff1a<code>DCCService</code> \u63d0\u4f9b\u4e86\u63a5\u53e3\u4f9b\u5176\u4ed6\u6a21\u5757\u67e5\u8be2\u914d\u7f6e\u9879\u7684\u5f53\u524d\u72b6\u6001\uff0c\u4ece\u800c\u51b3\u5b9a\u662f\u5426\u6267\u884c\u67d0\u4e9b\u529f\u80fd\u3002</li> <li>\u63a7\u5236\u5668\u63a5\u53e3\uff1a<code>DCCController</code> \u63d0\u4f9b\u4e86 HTTP \u63a5\u53e3\uff0c\u5141\u8bb8\u8fd0\u7ef4\u4eba\u5458\u6216\u5176\u4ed6\u7cfb\u7edf\u901a\u8fc7 API \u52a8\u6001\u4fee\u6539\u914d\u7f6e\u9879\u7684\u503c\uff0c\u5b9e\u73b0\u5bf9\u529f\u80fd\u7684\u542f\u7528\u6216\u7981\u7528\u3002</li> </ol>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-8%20%E5%9F%BA%E4%BA%8ERedis%E7%9A%84%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E5%BC%80%E5%85%B3/#_3","title":"\ud83d\udd04 \u5de5\u4f5c\u6d41\u7a0b","text":"<ol> <li>\u914d\u7f6e\u5b9a\u4e49\uff1a\u5f00\u53d1\u8005\u5728\u9700\u8981\u52a8\u6001\u63a7\u5236\u7684\u529f\u80fd\u70b9\u4e0a\u4f7f\u7528 <code>@DCCValue</code> \u6ce8\u89e3\u6807\u8bb0\u3002</li> <li>\u5e94\u7528\u542f\u52a8\uff1a<code>DCCValueBeanFactory</code> \u5728\u5e94\u7528\u542f\u52a8\u65f6\u626b\u63cf\u6240\u6709\u5e26\u6709 <code>@DCCValue</code> \u6ce8\u89e3\u7684\u5b57\u6bb5\uff0c\u5e76\u4ece Redis \u4e2d\u52a0\u8f7d\u5bf9\u5e94\u7684\u914d\u7f6e\u503c\uff0c\u6ce8\u5165\u5230\u5e94\u7528\u4e2d\u3002</li> <li>\u529f\u80fd\u5224\u65ad\uff1a\u5728\u8fd0\u884c\u65f6\uff0c\u529f\u80fd\u6a21\u5757\u901a\u8fc7\u8c03\u7528 <code>DCCService</code> \u63d0\u4f9b\u7684\u63a5\u53e3\uff0c\u67e5\u8be2\u914d\u7f6e\u9879\u7684\u5f53\u524d\u72b6\u6001\uff0c\u51b3\u5b9a\u662f\u5426\u6267\u884c\u76f8\u5173\u529f\u80fd\u3002</li> <li>\u52a8\u6001\u4fee\u6539\uff1a\u8fd0\u7ef4\u4eba\u5458\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 <code>DCCController</code> \u63d0\u4f9b\u7684 HTTP \u63a5\u53e3\uff0c\u4fee\u6539 Redis \u4e2d\u7684\u914d\u7f6e\u503c\uff0c\u4ece\u800c\u52a8\u6001\u63a7\u5236\u529f\u80fd\u7684\u542f\u7528\u6216\u7981\u7528\u3002</li> </ol>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-8%20%E5%9F%BA%E4%BA%8ERedis%E7%9A%84%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E5%BC%80%E5%85%B3/#_4","title":"\ud83e\uddf1 \u4e3b\u8981\u7ec4\u4ef6\u804c\u8d23\u89e3\u91ca","text":"\u7ec4\u4ef6 \u7c7b\u578b \u4f5c\u7528 Spring\u5bb9\u5668 \u5bb9\u5668\u6846\u67b6 \u7ba1\u7406 Bean \u751f\u547d\u5468\u671f\uff0c\u8d1f\u8d23\u542f\u52a8\u65f6\u6ce8\u5165\u3001\u521d\u59cb\u5316\u6240\u6709 Bean DCCValueBeanFactory Bean \u5de5\u5382\uff08\u81ea\u5b9a\u4e49\uff09 \u8d1f\u8d23\u626b\u63cf\u5e26\u6709 <code>@DCCValue</code> \u6ce8\u89e3\u7684\u5b57\u6bb5\u3001\u4ece Redis \u52a0\u8f7d\u914d\u7f6e\u3001\u52a8\u6001\u6ce8\u5165 \u5b57\u6bb5\u626b\u63cf\u5668 \u53cd\u5c04\u5de5\u5177\u7c7b \u5229\u7528\u53cd\u5c04\u626b\u63cf Bean \u4e2d\u7684\u5b57\u6bb5\uff0c\u5224\u65ad\u662f\u5426\u5305\u542b <code>@DCCValue</code> \u6ce8\u89e3 Redis \u914d\u7f6e\u4e2d\u5fc3 \u5b58\u50a8\u6240\u6709\u52a8\u6001\u914d\u7f6e\u503c\uff0c\u5e76\u652f\u6301\u53d1\u5e03\u53d8\u66f4\u901a\u77e5\uff08Pub/Sub\uff09 \u5b57\u6bb5\u6ce8\u5165\u5668 \u5de5\u5177\u7c7b \u6839\u636e\u53cd\u5c04\u7ed3\u679c\u52a8\u6001\u8bbe\u7f6e\u5b57\u6bb5\u503c RTopic Redis Topic\uff08\u6d88\u606f\u901a\u9053\uff09 Redis \u53d1\u5e03\u8ba2\u9605\u7ec4\u4ef6\uff0c\u7528\u4e8e\u914d\u7f6e\u53d8\u66f4\u901a\u77e5\u4e0e\u5b9e\u65f6\u5237\u65b0\u5b57\u6bb5\u503c"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-8%20%E5%9F%BA%E4%BA%8ERedis%E7%9A%84%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E5%BC%80%E5%85%B3/#_5","title":"\ud83d\udd01 \u5b8c\u6574\u5de5\u4f5c\u6d41\u7a0b\u8be6\u89e3\uff08\u5bf9\u5e94\u56fe\u7247\uff09","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-8%20%E5%9F%BA%E4%BA%8ERedis%E7%9A%84%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E5%BC%80%E5%85%B3/#_6","title":"\ud83e\udde9 \u9636\u6bb5\u4e00\uff1a\u5e94\u7528\u542f\u52a8\u65f6\u521d\u59cb\u5316\u6ce8\u5165\u914d\u7f6e\u503c","text":"<ol> <li>Spring \u5bb9\u5668\u521d\u59cb\u5316 Bean \u5b8c\u6210     Spring \u52a0\u8f7d\u5b8c\u6240\u6709 Bean\uff0c\u51c6\u5907\u8fdb\u5165\u5b9e\u9645\u8fd0\u884c\u3002</li> <li>DCCValueBeanFactory \u6267\u884c\u521d\u59cb\u5316\u903b\u8f91     \u5de5\u5382\u7c7b\u5f00\u59cb\u626b\u63cf\u6240\u6709 Bean\uff0c\u67e5\u627e\u5305\u542b <code>@DCCValue</code> \u6ce8\u89e3\u7684\u5b57\u6bb5\u3002</li> <li>\u5b57\u6bb5\u626b\u63cf\u5668\uff1a\u626b\u63cf\u5b57\u6bb5 + \u6ce8\u89e3\u8bc6\u522b     \u5229\u7528\u53cd\u5c04\u5224\u65ad\u5b57\u6bb5\u662f\u5426\u6807\u6ce8\u4e86 <code>@DCCValue</code>\u3002</li> <li>Redis\uff1a\u8bfb\u53d6\u5bf9\u5e94\u5b57\u6bb5\u7684\u914d\u7f6e\u503c     \u67e5\u627e\u952e\u540d\u4e3a\u6ce8\u89e3\u4e2d\u5b9a\u4e49\u7684 key \u6216\u5b57\u6bb5\u540d\u7684\u503c\uff08\u652f\u6301\u9ed8\u8ba4\u503c\u903b\u8f91\uff09\u3002</li> <li>\u5b57\u6bb5\u6ce8\u5165\u5668\uff1a\u4f7f\u7528\u53cd\u5c04\u5c06\u503c\u6ce8\u5165 Bean \u5b57\u6bb5     \u901a\u8fc7 Java \u53cd\u5c04 API \u8bbe\u7f6e\u5b57\u6bb5\u7684\u8fd0\u884c\u65f6\u503c\u3002</li> <li>\u8fd4\u56de\u914d\u7f6e\u503c \u2192 \u6ce8\u5165\u5b8c\u6210     \u5b57\u6bb5\u5df2\u88ab\u6b63\u786e\u8d4b\u503c\u4e3a Redis \u4e2d\u7684\u6700\u65b0\u914d\u7f6e\u72b6\u6001\u3002</li> </ol>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-8%20%E5%9F%BA%E4%BA%8ERedis%E7%9A%84%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E5%BC%80%E5%85%B3/#_7","title":"\ud83e\udde9 \u9636\u6bb5\u4e8c\uff1a\u8fd0\u884c\u65f6\u914d\u7f6e\u53d1\u751f\u53d8\u66f4\uff0c\u5b57\u6bb5\u52a8\u6001\u5237\u65b0","text":"<ol> <li>Redis \u4e2d\u914d\u7f6e\u9879\u53d1\u751f\u53d8\u66f4     \u6bd4\u5982\u8fd0\u7ef4\u901a\u8fc7 API \u4fee\u6539\u914d\u7f6e\u9879 <code>activity.strategy.switch = false</code>\u3002</li> <li>\u901a\u8fc7 Redis RTopic \u53d1\u5e03\u53d8\u66f4\u901a\u77e5     \u4f7f\u7528 <code>RedisTemplate.convertAndSend(\"DCC_TOPIC\", key)</code> \u53d1\u5e03\u6d88\u606f\u3002</li> <li>\u8ba2\u9605\u7aef\uff08\u5b57\u6bb5\u6ce8\u5165\u5668\uff09\u6536\u5230\u6d88\u606f \u2192 \u5b9a\u4f4d\u5b57\u6bb5     \u7cfb\u7edf\u5185\u90e8\u5df2\u76d1\u542c\u8be5 Topic\uff0c\u63a5\u6536\u5230\u53d8\u66f4\u540e\u5f00\u59cb\u67e5\u627e\u5bf9\u5e94\u5b57\u6bb5\u3002</li> <li>\u53cd\u5c04\u66f4\u65b0\u5b57\u6bb5\u503c\u4e3a\u6700\u65b0\u503c     \u5b57\u6bb5\u88ab\u91cd\u65b0\u6ce8\u5165\u65b0\u503c\uff08\u5982\u4ece <code>true \u2192 false</code>\uff09\uff0c\u5373\u523b\u751f\u6548\u3002</li> </ol>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-8%20%E5%9F%BA%E4%BA%8ERedis%E7%9A%84%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E5%BC%80%E5%85%B3/#_8","title":"\ud83e\udde9 \u6838\u5fc3\u7c7b\u804c\u8d23\u5bf9\u7167","text":"\u7c7b\u540d \u804c\u8d23\u63cf\u8ff0 <code>@DCCValue</code> \u6ce8\u89e3 \u58f0\u660e\u5b57\u6bb5\u53d7\u52a8\u6001\u914d\u7f6e\u63a7\u5236\uff0c\u53ef\u8bbe\u7f6e\u9ed8\u8ba4\u503c\u548c\u914d\u7f6e\u952e <code>DCCValueBeanFactory</code> \u626b\u63cf\u6240\u6709 Bean \u5e76\u5904\u7406\u5e26\u6ce8\u89e3\u5b57\u6bb5\uff0c\u4ece Redis \u52a0\u8f7d\u5e76\u6ce8\u5165\u914d\u7f6e\u503c <code>RedisTemplate</code> / <code>RedissonClient</code> \u4e0e Redis \u901a\u4fe1\uff0c\u5305\u62ec <code>get</code>, <code>set</code>, <code>publish</code> \u7b49 <code>RTopic</code> Redis \u53d1\u5e03\u8ba2\u9605\u901a\u9053\uff0c\u7528\u4e8e\u63a8\u9001\u914d\u7f6e\u66f4\u65b0 <code>\u5b57\u6bb5\u6ce8\u5165\u5668</code> \u5c01\u88c5 Java \u53cd\u5c04\u903b\u8f91\uff0c\u652f\u6301\u8fd0\u884c\u65f6\u52a8\u6001\u8d4b\u503c <code>DCCController</code> \u63d0\u4f9b\u8fd0\u7ef4\u4fee\u6539\u914d\u7f6e\u503c\u7684 REST \u63a5\u53e3\uff08\u5982 <code>/dcc/update?key=a&amp;value=b</code>\uff09"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-8%20%E5%9F%BA%E4%BA%8ERedis%E7%9A%84%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E5%BC%80%E5%85%B3/#_9","title":"\ud83c\udf10 \u793a\u4f8b\uff1a\u5982\u4f55\u58f0\u660e\u5e76\u4f7f\u7528\u52a8\u6001\u914d\u7f6e\u5b57\u6bb5","text":"Java<pre><code>@Slf4j\n@RestController\n@CrossOrigin(\"*\")\n@RequestMapping(\"/api/v1/gbm/dcc\")\npublic class DCCController implements IDCCService {\n\n    @Resource\n    private RTopic dccTopic;\n\n    /**\n     * \u52a8\u6001\u503c\u53d8\u66f4\n     * &lt;p&gt;\n     * curl http://127.0.0.1:8092/api/v1/gbm/dcc/update_config?key=downgradeSwitch&amp;value=1\n     * curl http://127.0.0.1:8092/api/v1/gbm/dcc/update_config?key=cutRange&amp;value=0\n     */\n    @RequestMapping(value = \"/update_config\", method = RequestMethod.GET)\n    @Override\n    public Response&lt;Boolean&gt; updateConfig(@RequestParam String key, @RequestParam String value) {\n        try {\n            log.info(\"DCC \u52a8\u6001\u914d\u7f6e\u503c\u53d8\u66f4 key:{} value:{}\", key, value);\n            dccTopic.publish(key + \",\" + value);\n            return Response.&lt;Boolean&gt;builder()\n                   .code(ResponseCode.SUCCESS.getCode())\n                   .info(ResponseCode.SUCCESS.getInfo())\n                   .build();\n        } catch (Exception e) {\n            log.error(\"DCC \u52a8\u6001\u914d\u7f6e\u503c\u53d8\u66f4\u5931\u8d25 key:{} value:{}\", key, value, e);\n            return Response.&lt;Boolean&gt;builder()\n                    .code(ResponseCode.UN_ERROR.getCode())\n                    .info(ResponseCode.UN_ERROR.getInfo())\n                    .build();\n        }\n    }\n\n}\n</code></pre> <p>\u8c03\u7528\u63a5\u53e3 <code>http://127.0.0.1:8092/api/v1/gbm/dcc/update_config?key=downgradeSwitch&amp;value=1</code>\uff0c\u5c31\u4f1a\u5c06 <code>downgradeSwitch</code> \u8bbe\u7f6e\u4e3a <code>1</code>\uff0c\u4e0d\u5173\u673a\u5b9e\u73b0 <code>\u964d\u7ea7\u62e6\u622a</code>\u3002</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-8%20%E5%9F%BA%E4%BA%8ERedis%E7%9A%84%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E5%BC%80%E5%85%B3/#dcc","title":"\u2705 DCC \u7684\u4f18\u52bf","text":"<ul> <li>\u65e0\u9700\u91cd\u542f\uff1a\u914d\u7f6e\u9879\u7684\u4fee\u6539\u4e0d\u9700\u8981\u91cd\u542f\u5e94\u7528\uff0c\u51cf\u5c11\u4e86\u7cfb\u7edf\u7684\u505c\u673a\u65f6\u95f4\u3002</li> <li>\u5feb\u901f\u54cd\u5e94\uff1a\u80fd\u591f\u5feb\u901f\u54cd\u5e94\u5e02\u573a\u53d8\u5316\uff0c\u8fdb\u884c\u529f\u80fd\u7684\u542f\u7528\u6216\u7981\u7528\u3002</li> <li>A/B \u6d4b\u8bd5\uff1a\u652f\u6301\u5bf9\u4e0d\u540c\u7528\u6237\u7fa4\u4f53\u542f\u7528\u4e0d\u540c\u7684\u529f\u80fd\uff0c\u8fdb\u884c A/B \u6d4b\u8bd5\u3002</li> <li>\u8fd0\u7ef4\u4fbf\u6377\uff1a\u901a\u8fc7 HTTP \u63a5\u53e3\u5373\u53ef\u4fee\u6539\u914d\u7f6e\u9879\uff0c\u7b80\u5316\u4e86\u8fd0\u7ef4\u64cd\u4f5c\u3002</li> </ul> \u4f18\u70b9 \u8bf4\u660e \ud83d\udd27 \u70ed\u66f4\u65b0 \u6539\u914d\u7f6e\u4e0d\u91cd\u542f\uff0c\u7acb\u5373\u751f\u6548 \ud83d\ude80 \u9ad8\u6027\u80fd \u57fa\u4e8e Redis \u5185\u5b58\u7ed3\u6784\uff0c\u67e5\u8be2\u4e0e\u6ce8\u5165\u6548\u7387\u9ad8 \u267b\ufe0f \u53cd\u5c04\u7075\u6d3b \u53ef\u52a8\u6001\u63a7\u5236\u4efb\u610f\u5b57\u6bb5\uff0c\u4e0d\u4fb5\u5165\u4e1a\u52a1\u903b\u8f91 \ud83d\udee0\ufe0f \u53ef\u6269\u5c55\u6027\u5f3a \u53ef\u5bf9\u63a5\u914d\u7f6e\u4e2d\u5fc3\u3001\u6570\u636e\u5e93\u3001\u6d88\u606f\u4e2d\u95f4\u4ef6\u7b49"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-9%20%E6%8B%BC%E5%9B%A2%E4%BA%A4%E6%98%93%E9%94%81%E5%8D%95%E9%80%BB%E8%BE%91/","title":"\u62fc\u56e2\u8425\u9500\u4f18\u60e0\u9501\u5b9a\u529f\u80fd\u89e3\u6790","text":"<p>\u5f53\u5546\u57ce\u7c7b\u7cfb\u7edf\u63a5\u5165\u62fc\u56e2\u529f\u80fd\u65f6\uff0c\u9700\u8981\u5728\u7528\u6237\u4e0b\u5355\u8fc7\u7a0b\u4e2d\u9501\u5b9a\u4e00\u7b14\u8425\u9500\u4f18\u60e0\uff08\u5982\u62fc\u56e2\u6298\u6263\uff09\u3002\u8fd9\u610f\u5473\u7740\u5728\u7528\u6237\u5b9e\u9645\u652f\u4ed8\u524d\uff0c\u62fc\u56e2\u7cfb\u7edf\u9700\u8981\u4e3a\u5176\u9884\u7559\u4e00\u4e2a\u53c2\u4e0e\u540d\u989d\u548c\u76f8\u5e94\u7684\u4f18\u60e0\u3002\u652f\u4ed8\u5b8c\u6210\u540e\uff0c\u8be5\u540d\u989d\u88ab\u786e\u8ba4\u4e3a\u6709\u6548\u53c2\u4e0e\uff1b\u82e5\u652f\u4ed8\u8d85\u65f6\u6216\u5931\u8d25\uff0c\u5219\u91ca\u653e\u8be5\u540d\u989d\u3002</p>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-9%20%E6%8B%BC%E5%9B%A2%E4%BA%A4%E6%98%93%E9%94%81%E5%8D%95%E9%80%BB%E8%BE%91/#_2","title":"\u5b9e\u73b0\u6982\u8ff0","text":"<p>\u672c\u6b21\u63d0\u4ea4\u901a\u8fc7\u5728API\u5c42\u3001\u5e94\u7528\u5c42\u3001\u9886\u57df\u5c42\u548c\u57fa\u7840\u8bbe\u65bd\u5c42\u5f15\u5165\u65b0\u7684\u670d\u52a1\u3001\u5b9e\u4f53\u3001\u6570\u636e\u8bbf\u95ee\u5bf9\u8c61\uff08DAO\uff09\u4ee5\u53ca\u6570\u636e\u5e93\u8868\u7ed3\u6784\uff0c\u5b9e\u73b0\u4e86\u8425\u9500\u4f18\u60e0\u7684\u9501\u5b9a\u529f\u80fd\u3002</p> <ul> <li>\u6570\u636e\u5e93\u5c42\u9762\uff1a\u65b0\u589e\u4e86 <code>group_buy_order</code> \u548c <code>group_buy_order_list</code> \u4e24\u5f20\u6838\u5fc3\u8868\u3002<ul> <li><code>group_buy_order</code>\uff1a\u8bb0\u5f55\u62fc\u56e2\u7684\u6574\u4f53\u60c5\u51b5\uff0c\u5305\u62ec\u76ee\u6807\u4eba\u6570\u3001\u5df2\u5b8c\u6210\u4eba\u6570\u3001\u4ee5\u53ca\u5173\u952e\u7684 <code>lock_count</code> (\u9501\u5b9a\u4eba\u6570)\u3002</li> <li><code>group_buy_order_list</code>\uff1a\u8bb0\u5f55\u6bcf\u4e2a\u7528\u6237\u53c2\u4e0e\u62fc\u56e2\u7684\u660e\u7ec6\u8ba2\u5355\uff0c\u5305\u62ec\u7528\u6237ID\u3001\u5916\u90e8\u4ea4\u6613\u53f7\uff08\u7528\u4e8e\u5e42\u7b49\uff09\u3001\u8ba2\u5355\u72b6\u6001\u7b49\u3002</li> </ul> </li> <li>API\u63a5\u53e3\u5c42 (<code>doppler-group-buy-market-api</code>)\uff1a\u5b9a\u4e49\u4e86\u8425\u9500\u4ea4\u6613\u670d\u52a1\u7684\u63a5\u53e3\u548c\u6570\u636e\u4f20\u8f93\u5bf9\u8c61 (DTO)\u3002</li> <li>\u5e94\u7528\u89e6\u53d1\u5c42 (<code>doppler-group-buy-market-trigger</code>)\uff1a\u63d0\u4f9b\u4e86HTTP\u63a5\u53e3\uff0c\u4f9b\u5916\u90e8\u7cfb\u7edf\u8c03\u7528\u3002</li> <li>\u9886\u57df\u670d\u52a1\u5c42 (<code>doppler-group-buy-market-domain</code>)\uff1a\u5305\u542b\u4e86\u6838\u5fc3\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u5982\u8ba2\u5355\u805a\u5408\u3001\u72b6\u6001\u7ba1\u7406\u548c\u4e0e\u4ed3\u5e93\u7684\u4ea4\u4e92\u3002</li> <li>\u57fa\u7840\u8bbe\u65bd\u5c42 (<code>doppler-group-buy-market-infrastructure</code>)\uff1a\u5b9e\u73b0\u4e86\u6570\u636e\u6301\u4e45\u5316\u903b\u8f91\uff0c\u5305\u62ecDAO\u63a5\u53e3\u53ca\u5176MyBatis XML\u6620\u5c04\u6587\u4ef6\u3002</li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-9%20%E6%8B%BC%E5%9B%A2%E4%BA%A4%E6%98%93%E9%94%81%E5%8D%95%E9%80%BB%E8%BE%91/#_3","title":"\u6838\u5fc3\u6d41\u7a0b\uff1a\u9501\u5b9a\u8425\u9500\u652f\u4ed8\u8ba2\u5355","text":"<p>\u5f53\u5546\u57ce\u7cfb\u7edf\u7528\u6237\u9009\u62e9\u53c2\u4e0e\u62fc\u56e2\u5e76\u4e0b\u5355\u65f6\uff0c\u5927\u81f4\u6d41\u7a0b\u5982\u4e0b\uff1a</p> <ol> <li> <p>API\u8bf7\u6c42\uff1a\u5546\u57ce\u7cfb\u7edf\u8c03\u7528\u62fc\u56e2\u7cfb\u7edf\u66b4\u9732\u7684 <code>lockMarketPayOrder</code> \u63a5\u53e3\u3002</p> <ul> <li><code>site.dopplerxd.trigger.http.MarketTradeController#lockMarketPayOrder</code>\uff1a\u63a5\u6536HTTP\u8bf7\u6c42\uff0c\u8bf7\u6c42\u4f53\u4e3a <code>LockMarketPayOrderRequestDTO</code>\u3002</li> </ul> </li> <li> <p>\u670d\u52a1\u7f16\u6392\uff1a<code>MarketTradeController</code> \u5c06\u8bf7\u6c42\u59d4\u6258\u7ed9\u9886\u57df\u670d\u52a1\u8fdb\u884c\u5904\u7406\u3002</p> <ul> <li><code>site.dopplerxd.domain.trade.service.ITradeOrderService#lockMarketPayOrder</code>\uff1a\u8fd9\u662f\u6838\u5fc3\u7684\u4e1a\u52a1\u7f16\u6392\u670d\u52a1\u3002\u5b83\u63a5\u6536\u7528\u6237\u4fe1\u606f\u3001\u6d3b\u52a8\u4fe1\u606f\u548c\u5546\u54c1\u4fe1\u606f\u3002</li> </ul> </li> <li> <p>\u6570\u636e\u805a\u5408\u4e0e\u4e1a\u52a1\u6821\u9a8c\uff1a</p> <ul> <li><code>TradeOrderService</code> \u9996\u5148\u4f1a\u6536\u96c6\u548c\u6784\u5efa\u5fc5\u8981\u7684\u4fe1\u606f\uff0c\u5c01\u88c5\u6210 <code>GroupBuyOrderAggregate</code>\u3002\u8fd9\u4e2a\u805a\u5408\u5bf9\u8c61\u5305\u542b\u4e86\uff1a<ul> <li><code>UserEntity</code>\uff1a\u7528\u6237\u4fe1\u606f\u3002</li> <li><code>PayActivityEntity</code>\uff1a\u652f\u4ed8\u6d3b\u52a8\u4fe1\u606f\uff08\u5982\u6d3b\u52a8ID\u3001\u76ee\u6807\u6570\u91cf\u3001\u8d77\u6b62\u65f6\u95f4\uff09\u3002</li> <li><code>PayDiscountEntity</code>\uff1a\u652f\u4ed8\u4f18\u60e0\u4fe1\u606f\uff08\u5982\u5546\u54c1ID\u3001\u6e20\u9053\u3001\u539f\u59cb\u4ef7\u683c\u3001\u6298\u6263\u4ef7\u683c\u3001\u5916\u90e8\u4ea4\u6613\u53f7\uff09\u3002</li> </ul> </li> <li>(\u53ef\u80fd)\u901a\u8fc7 <code>IIndexGroupBuyMarketService</code> \u67e5\u8be2\u6d3b\u52a8\u548c\u5546\u54c1\u8be6\u60c5\uff0c\u8ba1\u7b97\u4f18\u60e0\u3002</li> </ul> </li> <li> <p>\u6301\u4e45\u5316\u4e0e\u72b6\u6001\u66f4\u65b0\uff1a<code>TradeOrderService</code> \u8c03\u7528\u4ed3\u5e93\u63a5\u53e3 <code>ITradeRepository</code> \u6765\u6267\u884c\u5b9e\u9645\u7684\u9501\u5b9a\u64cd\u4f5c\u3002</p> <ul> <li><code>site.dopplerxd.infrastructure.adapter.repository.TradeRepository#lockMarketPayOrder</code>\uff1a\u8fd9\u662f\u4ed3\u5e93\u63a5\u53e3\u7684\u5b9e\u73b0\uff0c\u8d1f\u8d23\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\u3002<ul> <li>\u56e2\u961f\u5904\u7406\uff1a\u5982\u679c\u8bf7\u6c42\u4e2d\u6ca1\u6709\u63d0\u4f9b <code>teamId</code>\uff08\u7528\u6237\u662f\u65b0\u5f00\u56e2\uff09\uff0c\u7cfb\u7edf\u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u7684 <code>teamId</code>\u3002</li> <li>\u521b\u5efa/\u66f4\u65b0\u62fc\u56e2\u4e3b\u8ba2\u5355 (<code>group_buy_order</code>)\uff1a<ul> <li>\u5982\u679c\u662f\u65b0\u56e2\u961f\uff0c\u4f1a\u5411 <code>group_buy_order</code> \u8868\u63d2\u5165\u4e00\u6761\u65b0\u8bb0\u5f55\uff0c\u5305\u542b\u6d3b\u52a8ID\u3001\u76ee\u6807\u6570\u91cf\u3001\u521d\u59cb\u9501\u5b9a\u6570\u91cf\uff08\u901a\u5e38\u4e3a1\uff09\u7b49\u3002</li> <li>\u5982\u679c\u662f\u52a0\u5165\u73b0\u6709\u56e2\u961f\uff0c\u4f1a\u8c03\u7528 <code>IGroupBuyOrderDao#updateAddLockCount</code> \u65b9\u6cd5\uff0c\u5c1d\u8bd5\u5c06\u5bf9\u5e94 <code>teamId</code> \u7684 <code>lock_count</code> \u52a01\u3002\u8fd9\u91cc\u4f1a\u6709\u5e76\u53d1\u63a7\u5236\uff0c\u786e\u4fdd <code>lock_count</code> \u4e0d\u8d85\u8fc7 <code>target_count</code>\u3002</li> </ul> </li> <li>\u521b\u5efa\u62fc\u56e2\u660e\u7ec6\u8ba2\u5355 (<code>group_buy_order_list</code>)\uff1a<ul> <li>\u4e3a\u5f53\u524d\u7528\u6237\u751f\u6210\u4e00\u4e2a\u552f\u4e00\u7684 <code>orderId</code>\u3002</li> <li>\u5411 <code>group_buy_order_list</code> \u8868\u63d2\u5165\u4e00\u6761\u8bb0\u5f55\uff0c\u5305\u542b\u7528\u6237ID\u3001\u56e2\u961fID\u3001\u8ba2\u5355ID\u3001\u6d3b\u52a8ID\u3001\u5546\u54c1ID\u3001\u4ef7\u683c\u4fe1\u606f\u3001\u5916\u90e8\u4ea4\u6613\u53f7 <code>out_trade_no</code>\uff08\u7528\u4e8e\u5e42\u7b49\u6027\u6821\u9a8c\uff0c\u9632\u6b62\u91cd\u590d\u9501\u5b9a\uff09\uff0c\u5e76\u5c06\u8ba2\u5355\u72b6\u6001\u8bbe\u7f6e\u4e3a\u521d\u59cb\u9501\u5b9a\u72b6\u6001\uff08\u5982 <code>TradeOrderStatusEnumVO.CREATE</code>\uff09\u3002</li> <li>\u6b64\u64cd\u4f5c\u901a\u8fc7 <code>IGroupBuyOrderListDao#insert</code> \u5b8c\u6210\u3002</li> </ul> </li> <li>\u5f02\u5e38\u5904\u7406\uff1a\u5982\u679c\u63d2\u5165 <code>group_buy_order_list</code> \u65f6\u56e0 <code>out_trade_no</code> \u91cd\u590d\u5bfc\u81f4 <code>DuplicateKeyException</code>\uff0c\u4f1a\u629b\u51fa <code>AppException(ResponseCode.INDEX_EXCEPTION)</code>\uff0c\u8868\u660e\u8be5\u5916\u90e8\u4ea4\u6613\u5df2\u5904\u7406\u8fc7\u3002</li> </ul> </li> </ul> </li> <li> <p>\u8fd4\u56de\u7ed3\u679c\uff1a\u64cd\u4f5c\u6210\u529f\u540e\uff0c<code>TradeRepository</code> \u8fd4\u56de\u4e00\u4e2a <code>MarketPayOrderEntity</code>\uff0c\u5176\u4e2d\u5305\u542b\u751f\u6210\u7684 <code>orderId</code>\u3001\u5b9e\u9645\u7684 <code>deductionPrice</code> \u548c\u5f53\u524d\u7684\u8ba2\u5355\u72b6\u6001\u3002</p> <ul> <li><code>MarketTradeController</code> \u5c06\u6b64\u5b9e\u4f53\u8f6c\u6362\u4e3a <code>LockMarketPayOrderResponseDTO</code> \u5e76\u8fd4\u56de\u7ed9\u8c03\u7528\u65b9\uff08\u5546\u57ce\u7cfb\u7edf\uff09\u3002</li> </ul> </li> </ol>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-9%20%E6%8B%BC%E5%9B%A2%E4%BA%A4%E6%98%93%E9%94%81%E5%8D%95%E9%80%BB%E8%BE%91/#_4","title":"\u5173\u952e\u7c7b\u4e0e\u65b9\u6cd5\u53ca\u5176\u529f\u80fd","text":""},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-9%20%E6%8B%BC%E5%9B%A2%E4%BA%A4%E6%98%93%E9%94%81%E5%8D%95%E9%80%BB%E8%BE%91/#api-dtos-doppler-group-buy-market-api","title":"API &amp; DTOs (<code>doppler-group-buy-market-api</code>)","text":"<ul> <li><code>IMarketTradeService</code>:<ul> <li><code>lockMarketPayOrder(LockMarketPayOrderRequestDTO)</code>: \u5b9a\u4e49\u4e86\u9501\u5b9a\u8425\u9500\u652f\u4ed8\u8ba2\u5355\u7684\u670d\u52a1\u5951\u7ea6\u3002</li> </ul> </li> <li><code>LockMarketPayOrderRequestDTO</code>:<ul> <li>\u5c01\u88c5\u4e86\u9501\u5b9a\u8ba2\u5355\u6240\u9700\u7684\u8bf7\u6c42\u53c2\u6570\uff0c\u5982 <code>userId</code>, <code>teamId</code> (\u53ef\u9009), <code>activityId</code>, <code>goodsId</code>, <code>source</code>, <code>channel</code>, <code>outTradeNo</code>\u3002</li> </ul> </li> <li><code>LockMarketPayOrderResponseDTO</code>:<ul> <li>\u5c01\u88c5\u4e86\u9501\u5b9a\u8ba2\u5355\u64cd\u4f5c\u7684\u54cd\u5e94\u7ed3\u679c\uff0c\u5982 <code>orderId</code>, <code>deductionPrice</code>, <code>tradeOrderStatus</code>\u3002</li> </ul> </li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-9%20%E6%8B%BC%E5%9B%A2%E4%BA%A4%E6%98%93%E9%94%81%E5%8D%95%E9%80%BB%E8%BE%91/#controller-doppler-group-buy-market-trigger","title":"Controller (<code>doppler-group-buy-market-trigger</code>)","text":"<ul> <li><code>MarketTradeController</code>:<ul> <li><code>lockMarketPayOrder(...)</code>: HTTP POST\u63a5\u53e3 <code>/api/v1/gbm/trade/lockMarketPayOrder</code> \u7684\u5904\u7406\u65b9\u6cd5\uff0c\u63a5\u6536\u8bf7\u6c42\u5e76\u8c03\u7528 <code>ITradeOrderService</code>\u3002</li> </ul> </li> </ul> Java<pre><code>@Slf4j\n@RestController\n@CrossOrigin(\"*\")\n@RequestMapping(\"/api/v1/gbm/trade\")\npublic class MarketTradeController implements IMarketTradeService {\n\n    @Resource\n    private IIndexGroupBuyMarketService indexGroupBuyMarketService;\n    @Resource\n    private ITradeOrderService tradeOrderService;\n\n    @Override\n    public Response&lt;LockMarketPayOrderResponseDTO&gt; lockMarketPayOrder(LockMarketPayOrderRequestDTO lockMarketPayOrderRequestDTO) {\n        try {\n            // \u83b7\u53d6\u53c2\u6570\n            String userId = lockMarketPayOrderRequestDTO.getUserId();\n            String teamId = lockMarketPayOrderRequestDTO.getTeamId();\n            Long activityId = lockMarketPayOrderRequestDTO.getActivityId();\n            String goodsId = lockMarketPayOrderRequestDTO.getGoodsId();\n            String source = lockMarketPayOrderRequestDTO.getSource();\n            String channel = lockMarketPayOrderRequestDTO.getChannel();\n            String outTradeNo = lockMarketPayOrderRequestDTO.getOutTradeNo();\n\n            log.info(\"\u8425\u9500\u4ea4\u6613\u9501\u5355:{} LockMarketPayOrderRequestDTO:{}\", userId, JSON.toJSONString(lockMarketPayOrderRequestDTO));\n\n            if (StringUtils.isBlank(userId) || StringUtils.isBlank(source) || StringUtils.isBlank(channel)\n                    || StringUtils.isBlank(goodsId) || StringUtils.isBlank(outTradeNo) || null == activityId) {\n                return Response.&lt;LockMarketPayOrderResponseDTO&gt;builder()\n                        .code(ResponseCode.ILLEGAL_PARAMETER.getCode())\n                        .info(ResponseCode.ILLEGAL_PARAMETER.getInfo())\n                        .build();\n            }\n\n            // \u67e5\u8be2 outTradeNo \u662f\u5426\u5df2\u5b58\u5728\u4ea4\u6613\u8bb0\u5f55\n            MarketPayOrderEntity marketPayOrderEntity = tradeOrderService.queryNoPayMarketPayOrderByOutTradeNo(userId, outTradeNo);\n            if (null != marketPayOrderEntity) {\n                LockMarketPayOrderResponseDTO lockMarketPayOrderResponseDTO = new LockMarketPayOrderResponseDTO();\n                lockMarketPayOrderResponseDTO.setOrderId(marketPayOrderEntity.getOrderId());\n                lockMarketPayOrderResponseDTO.setDeductionPrice(marketPayOrderEntity.getDeductionPrice());\n                lockMarketPayOrderResponseDTO.setTradeOrderStatus(marketPayOrderEntity.getTradeOrderStatusEnumVO().getCode());\n\n                log.info(\"\u4ea4\u6613\u9501\u5355\u8bb0\u5f55(\u5b58\u5728):{} marketPayOrderEntity:{}\", userId, JSON.toJSONString(marketPayOrderEntity));\n                return Response.&lt;LockMarketPayOrderResponseDTO&gt;builder()\n                        .code(ResponseCode.SUCCESS.getCode())\n                        .info(ResponseCode.SUCCESS.getInfo())\n                        .data(lockMarketPayOrderResponseDTO)\n                        .build();\n            }\n\n            // \u5224\u65ad\u62fc\u56e2\u9501\u5355\u662f\u5426\u5b8c\u6210\u4e86\u76ee\u6807\n            if (null != teamId) {\n                GroupBuyProgressVO groupBuyProgressVO = tradeOrderService.queryGroupBuyProgress(teamId);\n                if (null != groupBuyProgressVO &amp;&amp; Objects.equals(groupBuyProgressVO.getTargetCount(), groupBuyProgressVO.getLockCount())) {\n                    log.info(\"\u4ea4\u6613\u9501\u5355\u62e6\u622a-\u62fc\u5355\u76ee\u6807\u5df2\u8fbe\u6210:{} {}\", userId, teamId);\n                    return Response.&lt;LockMarketPayOrderResponseDTO&gt;builder()\n                            .code(ResponseCode.E0006.getCode())\n                            .info(ResponseCode.E0006.getInfo())\n                            .build();\n                }\n            }\n\n            // \u8425\u9500\u4f18\u60e0\u8bd5\u7b97\n            TrialBalanceEntity trialBalanceEntity = indexGroupBuyMarketService.indexMarketTrial(MarketProductEntity.builder()\n                    .userId(userId)\n                    .source(source)\n                    .channel(channel)\n                    .goodsId(goodsId)\n                    .activityId(activityId)\n                    .build());\n\n            GroupBuyActivityDiscountVO groupBuyActivityDiscountVO = trialBalanceEntity.getGroupBuyActivityDiscountVO();\n\n            // \u9501\u5355\n            UserEntity userEntityReq = UserEntity.builder().userId(userId).build();\n            PayActivityEntity payActivityEntityReq = PayActivityEntity.builder()\n                    .teamId(teamId)\n                    .activityId(activityId)\n                    .activityName(groupBuyActivityDiscountVO.getActivityName())\n                    .startTime(groupBuyActivityDiscountVO.getStartTime())\n                    .endTime(groupBuyActivityDiscountVO.getEndTime())\n                    .targetCount(groupBuyActivityDiscountVO.getTarget())\n                    .build();\n            PayDiscountEntity payDiscountEntityReq = PayDiscountEntity.builder()\n                    .source(source)\n                    .channel(channel)\n                    .goodsId(goodsId)\n                    .goodsName(trialBalanceEntity.getGoodsName())\n                    .originalPrice(trialBalanceEntity.getOriginalPrice())\n                    .deductionPrice(trialBalanceEntity.getDeductionPrice())\n                    .outTradeNo(outTradeNo)\n                    .build();\n            marketPayOrderEntity = tradeOrderService.lockMarketPayOrder(userEntityReq, payActivityEntityReq, payDiscountEntityReq);\n            log.info(\"\u4ea4\u6613\u9501\u5355\u8bb0\u5f55(\u65b0):{} marketPayOrderEntity:{}\", userId, JSON.toJSONString(marketPayOrderEntity));\n\n            LockMarketPayOrderResponseDTO lockMarketPayOrderResponseDTO = new LockMarketPayOrderResponseDTO();\n            lockMarketPayOrderResponseDTO.setOrderId(marketPayOrderEntity.getOrderId());\n            lockMarketPayOrderResponseDTO.setDeductionPrice(marketPayOrderEntity.getDeductionPrice());\n            lockMarketPayOrderResponseDTO.setTradeOrderStatus(marketPayOrderEntity.getTradeOrderStatusEnumVO().getCode());\n            return Response.&lt;LockMarketPayOrderResponseDTO&gt;builder()\n                    .code(ResponseCode.SUCCESS.getCode())\n                   .info(ResponseCode.SUCCESS.getInfo())\n                   .data(lockMarketPayOrderResponseDTO)\n                   .build();\n        } catch (AppException e) {\n            log.error(\"\u8425\u9500\u4ea4\u6613\u9501\u5355\u4e1a\u52a1\u5f02\u5e38:{} LockMarketPayOrderRequestDTO:{}\", lockMarketPayOrderRequestDTO.getUserId(), JSON.toJSONString(lockMarketPayOrderRequestDTO), e);\n            return Response.&lt;LockMarketPayOrderResponseDTO&gt;builder()\n                    .code(e.getCode())\n                    .info(e.getInfo())\n                    .build();\n        } catch (Exception e) {\n            log.error(\"\u8425\u9500\u4ea4\u6613\u9501\u5355\u670d\u52a1\u5931\u8d25:{} LockMarketPayOrderRequestDTO:{}\", lockMarketPayOrderRequestDTO.getUserId(), JSON.toJSONString(lockMarketPayOrderRequestDTO), e);\n            return Response.&lt;LockMarketPayOrderResponseDTO&gt;builder()\n                    .code(ResponseCode.UN_ERROR.getCode())\n                    .info(ResponseCode.UN_ERROR.getInfo())\n                    .build();\n        }\n    }\n}\n</code></pre>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-9%20%E6%8B%BC%E5%9B%A2%E4%BA%A4%E6%98%93%E9%94%81%E5%8D%95%E9%80%BB%E8%BE%91/#domain-layer-doppler-group-buy-market-domain","title":"Domain Layer (<code>doppler-group-buy-market-domain</code>)","text":"<ul> <li><code>ITradeOrderService</code> / <code>TradeOrderService</code>:<ul> <li><code>lockMarketPayOrder(UserEntity, PayActivityEntity, PayDiscountEntity)</code>: \u6838\u5fc3\u4e1a\u52a1\u65b9\u6cd5\uff0c\u8d1f\u8d23\u7f16\u6392\u9501\u5355\u6d41\u7a0b\uff0c\u6784\u5efa\u805a\u5408\u5bf9\u8c61\uff0c\u5e76\u8c03\u7528\u4ed3\u5e93\u5c42\u3002</li> </ul> </li> <li><code>GroupBuyOrderAggregate</code>:<ul> <li>\u805a\u5408\u4e86 <code>UserEntity</code>, <code>PayActivityEntity</code>, <code>PayDiscountEntity</code>\uff0c\u4ee3\u8868\u4e00\u4e2a\u5b8c\u6574\u7684\u62fc\u56e2\u8ba2\u5355\u4e0a\u4e0b\u6587\uff0c\u7528\u4e8e\u4f20\u9012\u7ed9\u4ed3\u5e93\u5c42\u8fdb\u884c\u6301\u4e45\u5316\u3002</li> </ul> </li> <li><code>ITradeRepository</code>:<ul> <li><code>lockMarketPayOrder(GroupBuyOrderAggregate)</code>: \u5b9a\u4e49\u4e86\u6301\u4e45\u5316\u9501\u5b9a\u8ba2\u5355\u7684\u4ed3\u5e93\u63a5\u53e3\u3002</li> </ul> </li> <li>Entities &amp; Value Objects:<ul> <li><code>MarketPayOrderEntity</code>: \u8868\u793a\u5df2\u9501\u5b9a\u7684\u8425\u9500\u652f\u4ed8\u8ba2\u5355\u7684\u5b9e\u4f53\uff0c\u5305\u542b <code>orderId</code> \u548c\u4f18\u60e0\u4fe1\u606f\u3002</li> <li><code>PayActivityEntity</code>: \u5c01\u88c5\u4e86\u652f\u4ed8\u76f8\u5173\u7684\u6d3b\u52a8\u4fe1\u606f\u3002</li> <li><code>PayDiscountEntity</code>: \u5c01\u88c5\u4e86\u652f\u4ed8\u76f8\u5173\u7684\u4f18\u60e0\u548c\u5546\u54c1\u4fe1\u606f\u3002</li> <li><code>UserEntity</code>: \u7b80\u5355\u7684\u7528\u6237\u5b9e\u4f53\u3002</li> <li><code>TradeOrderStatusEnumVO</code>: \u679a\u4e3e\uff0c\u5b9a\u4e49\u4e86\u4ea4\u6613\u8ba2\u5355\u7684\u72b6\u6001\uff08\u5982\uff1a0-\u521b\u5efa\u9501\u5b9a\uff0c1-\u6d88\u8d39\u5b8c\u6210\uff09\u3002</li> <li><code>GroupBuyProgressVO</code>: \u503c\u5bf9\u8c61\uff0c\u7528\u4e8e\u67e5\u8be2\u62fc\u56e2\u8fdb\u5ea6\uff08\u76ee\u6807\u6570\u3001\u5b8c\u6210\u6570\u3001\u9501\u5b9a\u6570\uff09\u3002</li> </ul> </li> <li><code>IIndexGroupBuyMarketService</code> (\u76f8\u5173\u4fee\u6539):<ul> <li><code>indexMarketTrial(MarketProductEntity)</code>: \u53ef\u80fd\u7528\u4e8e\u5728\u9501\u5355\u524d\u8fdb\u884c\u4f18\u60e0\u8bd5\u7b97\u6216\u83b7\u53d6\u6d3b\u52a8\u8be6\u60c5\u3002</li> </ul> </li> </ul> Java<pre><code>@Slf4j\n@Service\npublic class TradeOrderService implements ITradeOrderService {\n\n    @Resource\n    private ITradeRepository repository;\n\n    @Override\n    public MarketPayOrderEntity queryNoPayMarketPayOrderByOutTradeNo(String userId, String outTradeNo) {\n        log.info(\"\u62fc\u56e2\u4ea4\u6613-\u67e5\u8be2\u672a\u652f\u4ed8\u8425\u9500\u8ba2\u5355:{} outTradeNo:{}\", userId, outTradeNo);\n        return repository.queryMarketPayOrderEntityByOutTradeNo(userId, outTradeNo);\n    }\n\n    @Override\n    public GroupBuyProgressVO queryGroupBuyProgress(String teamId) {\n        log.info(\"\u62fc\u56e2\u4ea4\u6613-\u67e5\u8be2\u62fc\u5355\u8fdb\u5ea6:{}\", teamId);\n        return repository.queryGroupBuyProgress(teamId);\n    }\n\n    @Override\n    public MarketPayOrderEntity lockMarketPayOrder(UserEntity userEntity, PayActivityEntity payActivityEntity, PayDiscountEntity payDiscountEntity) {\n        log.info(\"\u62fc\u56e2\u4ea4\u6613-\u9501\u5b9a\u8425\u9500\u4f18\u60e0\u652f\u4ed8\u8ba2\u5355 userId:{} activityId:{} goodsId:{}\", userEntity.getUserId(), payActivityEntity.getActivityId(), payDiscountEntity.getGoodsId());\n\n        // \u6784\u5efa\u805a\u5408\u5bf9\u8c61\n        GroupBuyOrderAggregate groupBuyOrderAggregate = GroupBuyOrderAggregate.builder()\n                .userEntity(userEntity)\n                .payActivityEntity(payActivityEntity)\n                .payDiscountEntity(payDiscountEntity)\n                .build();\n\n        // \u9501\u5b9a\u8ba2\u5355\n        // \u6b64\u65f6\u7528\u6237\u53ea\u662f\u4e0b\u5355\uff0c\u8fd8\u6ca1\u6709\u652f\u4ed8\u3002\u540e\u7eed\u4f1a\u67092\u4e2a\u6d41\u7a0b\uff1b\u652f\u4ed8\u6210\u529f\u3001\u8d85\u65f6\u672a\u652f\u4ed8\uff08\u56de\u9000\uff09\n        return repository.lockMarketPayOrder(groupBuyOrderAggregate);\n    }\n}\n</code></pre>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-9%20%E6%8B%BC%E5%9B%A2%E4%BA%A4%E6%98%93%E9%94%81%E5%8D%95%E9%80%BB%E8%BE%91/#infrastructure-layer-doppler-group-buy-market-infrastructure","title":"Infrastructure Layer (<code>doppler-group-buy-market-infrastructure</code>)","text":"<ul> <li><code>TradeRepository</code> (implements <code>ITradeRepository</code>):<ul> <li><code>lockMarketPayOrder(GroupBuyOrderAggregate)</code>: \u5b9e\u73b0\u4e86\u8ba2\u5355\u9501\u5b9a\u7684\u5177\u4f53\u6570\u636e\u5e93\u64cd\u4f5c\u903b\u8f91\u3002<ul> <li>\u751f\u6210 <code>teamId</code> (\u5982\u679c\u9700\u8981)\u3002</li> <li>\u8c03\u7528 <code>groupBuyOrderDao.insert()</code> \u6216 <code>groupBuyOrderDao.updateAddLockCount()</code>\u3002</li> <li>\u8c03\u7528 <code>groupBuyOrderListDao.insert()</code>\u3002</li> </ul> </li> </ul> </li> <li>DAOs:<ul> <li><code>IGroupBuyOrderDao</code>:<ul> <li><code>insert(GroupBuyOrder)</code>: \u63d2\u5165\u65b0\u7684\u62fc\u56e2\u4e3b\u8ba2\u5355\u3002</li> <li><code>updateAddLockCount(String teamId)</code>: \u589e\u52a0\u6307\u5b9a\u56e2\u961f\u7684\u9501\u5b9a\u6570\u91cf\u3002</li> <li><code>queryGroupBuyProgress(String teamId)</code>: \u67e5\u8be2\u62fc\u56e2\u8fdb\u5ea6\u3002</li> </ul> </li> <li><code>IGroupBuyOrderListDao</code>:<ul> <li><code>insert(GroupBuyOrderList)</code>: \u63d2\u5165\u65b0\u7684\u7528\u6237\u62fc\u56e2\u660e\u7ec6\u8ba2\u5355\u3002</li> <li><code>queryGroupBuyOrderRecordByOutTradeNo(GroupBuyOrderList)</code>: \u6839\u636e\u5916\u90e8\u4ea4\u6613\u53f7\u67e5\u8be2\u5df2\u9501\u5b9a\u7684\u8ba2\u5355\uff08\u7528\u4e8e\u5e42\u7b49\u6027\u68c0\u67e5\u6216\u540e\u7eed\u67e5\u8be2\uff09\u3002</li> </ul> </li> </ul> </li> <li>POs (Persistence Objects):<ul> <li><code>GroupBuyOrder</code>: \u5bf9\u5e94 <code>group_buy_order</code> \u8868\u7684PO\u3002</li> <li><code>GroupBuyOrderList</code>: \u5bf9\u5e94 <code>group_buy_order_list</code> \u8868\u7684PO\u3002</li> </ul> </li> </ul> Java<pre><code>@Slf4j\n@Repository\npublic class TradeRepository implements ITradeRepository {\n\n    @Resource\n    private IGroupBuyOrderDao groupBuyOrderDao;\n    @Resource\n    private IGroupBuyOrderListDao groupBuyOrderListDao;\n\n    @Override\n    public MarketPayOrderEntity queryMarketPayOrderEntityByOutTradeNo(String userId, String outTradeNo) {\n        GroupBuyOrderList groupBuyOrderListReq = new GroupBuyOrderList();\n        groupBuyOrderListReq.setUserId(userId);\n        groupBuyOrderListReq.setOutTradeNo(outTradeNo);\n        GroupBuyOrderList groupBuyOrderListRes = groupBuyOrderListDao.queryGroupBuyOrderRecordByOutTradeNo(groupBuyOrderListReq);\n        if (null == groupBuyOrderListRes) {\n            return null;\n        }\n        return MarketPayOrderEntity.builder()\n                .orderId(groupBuyOrderListRes.getOrderId())\n                .deductionPrice(groupBuyOrderListRes.getDeductionPrice())\n                .tradeOrderStatusEnumVO(TradeOrderStatusEnumVO.valueOf(groupBuyOrderListRes.getStatus()))\n                .build();\n    }\n\n    @Override\n    public GroupBuyProgressVO queryGroupBuyProgress(String teamId) {\n        GroupBuyOrder groupBuyOrderRes = groupBuyOrderDao.queryGroupBuyProgress(teamId);\n        if (null == groupBuyOrderRes) {\n            return null;\n        }\n        return GroupBuyProgressVO.builder()\n                .targetCount(groupBuyOrderRes.getTargetCount())\n                .completeCount(groupBuyOrderRes.getCompleteCount())\n                .lockCount(groupBuyOrderRes.getLockCount())\n                .build();\n    }\n\n    @Transactional(timeout = 500)\n    @Override\n    public MarketPayOrderEntity lockMarketPayOrder(GroupBuyOrderAggregate groupBuyOrderAggregate) {\n        // \u63d0\u53d6\u805a\u5408\u5bf9\u8c61\u4fe1\u606f\n        UserEntity userEntity = groupBuyOrderAggregate.getUserEntity();\n        PayActivityEntity payActivityEntity = groupBuyOrderAggregate.getPayActivityEntity();\n        PayDiscountEntity payDiscountEntity = groupBuyOrderAggregate.getPayDiscountEntity();\n\n        // \u5224\u65ad\u56e2\u961f\u662f\u5426\u5b58\u5728\n        String teamId = payActivityEntity.getTeamId();\n        if (StringUtils.isBlank(teamId)) {\n            // \u4e0d\u5b58\u5728teamId\uff0c\u8bf4\u660e\u662f\u65b0\u56e2\u961f\uff0c\u6682\u65f6\u968f\u673a\u4e00\u4e2aID\uff08\u4f01\u4e1a\u4e2d\u4f1a\u4f7f\u7528\u7edf\u4e00\u7684\u96ea\u82b1\u7b97\u6cd5\u751f\u6210UUID\uff09\n            teamId = RandomStringUtils.randomNumeric(8);\n\n            // \u6784\u5efa\u62fc\u56e2\u8ba2\u5355\n            GroupBuyOrder groupBuyOrder = new GroupBuyOrder();\n            groupBuyOrder.setTeamId(teamId);\n            groupBuyOrder.setActivityId(payActivityEntity.getActivityId());\n            groupBuyOrder.setSource(payDiscountEntity.getSource());\n            groupBuyOrder.setChannel(payDiscountEntity.getChannel());\n            groupBuyOrder.setOriginalPrice(payDiscountEntity.getOriginalPrice());\n            groupBuyOrder.setDeductionPrice(payDiscountEntity.getDeductionPrice());\n            groupBuyOrder.setPayPrice(payDiscountEntity.getDeductionPrice());\n            groupBuyOrder.setTargetCount(payActivityEntity.getTargetCount());\n            groupBuyOrder.setCompleteCount(0);\n            groupBuyOrder.setLockCount(1);\n\n            // \u5199\u5165\u8bb0\u5f55\n            groupBuyOrderDao.insert(groupBuyOrder);\n        } else {\n            // \u5b58\u5728teamId\uff0c\u8bf4\u660e\u662f\u8001\u56e2\u961f\uff0c\u66f4\u65b0\u62fc\u56e2\u8ba2\u5355\n            int updateAddTargetCount = groupBuyOrderDao.updateAddLockCount(teamId);\n\n            if (1 != updateAddTargetCount) {\n                throw new AppException(ResponseCode.E0005);\n            }\n        }\n\n        // \u968f\u673a\u4e00\u4e2aID\uff08\u4f01\u4e1a\u4e2d\u4f1a\u4f7f\u7528\u7edf\u4e00\u7684\u96ea\u82b1\u7b97\u6cd5\u751f\u6210UUID\uff09\n        String orderId = RandomStringUtils.randomNumeric(12);\n        GroupBuyOrderList groupBuyOrderListReq = new GroupBuyOrderList();\n        groupBuyOrderListReq.setUserId(userEntity.getUserId());\n        groupBuyOrderListReq.setTeamId(teamId);\n        groupBuyOrderListReq.setOrderId(orderId);\n        groupBuyOrderListReq.setActivityId(payActivityEntity.getActivityId());\n        groupBuyOrderListReq.setStartTime(payActivityEntity.getStartTime());\n        groupBuyOrderListReq.setEndTime(payActivityEntity.getEndTime());\n        groupBuyOrderListReq.setGoodsId(payDiscountEntity.getGoodsId());\n        groupBuyOrderListReq.setSource(payDiscountEntity.getSource());\n        groupBuyOrderListReq.setChannel(payDiscountEntity.getChannel());\n        groupBuyOrderListReq.setOriginalPrice(payDiscountEntity.getOriginalPrice());\n        groupBuyOrderListReq.setDeductionPrice(payDiscountEntity.getDeductionPrice());\n        groupBuyOrderListReq.setStatus(TradeOrderStatusEnumVO.CREATE.getCode());\n        groupBuyOrderListReq.setOutTradeNo(payDiscountEntity.getOutTradeNo());\n\n        try {\n            // \u5199\u5165\u62fc\u56e2\u8bb0\u5f55\n            groupBuyOrderListDao.insert(groupBuyOrderListReq);\n        } catch (DuplicateKeyException e) {\n            throw new AppException(ResponseCode.INDEX_EXCEPTION);\n        }\n\n        return MarketPayOrderEntity.builder()\n                .orderId(orderId)\n                .deductionPrice(payDiscountEntity.getDeductionPrice())\n                .tradeOrderStatusEnumVO(TradeOrderStatusEnumVO.CREATE)\n                .build();\n    }\n}\n</code></pre>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-9%20%E6%8B%BC%E5%9B%A2%E4%BA%A4%E6%98%93%E9%94%81%E5%8D%95%E9%80%BB%E8%BE%91/#database-schema-docsdev-opsmysqlsql2-9-group_buy_marketsql","title":"Database Schema (<code>docs/dev-ops/mysql/sql/2-9-group_buy_market.sql</code>)","text":"<ul> <li><code>group_buy_order</code> table:<ul> <li><code>team_id</code>: \u62fc\u5355\u7ec4\u961fID\u3002</li> <li><code>activity_id</code>: \u6d3b\u52a8ID\u3002</li> <li><code>target_count</code>: \u76ee\u6807\u6210\u56e2\u6570\u91cf\u3002</li> <li><code>lock_count</code>: \u5f53\u524d\u5df2\u9501\u5b9a\u4f46\u672a\u652f\u4ed8\u7684\u540d\u989d\u6570\u91cf\u3002\u8fd9\u662f\u5b9e\u73b0\u201c\u9501\u5b9a\u201d\u7684\u6838\u5fc3\u5b57\u6bb5\u3002</li> <li><code>complete_count</code>: \u5df2\u6210\u529f\u652f\u4ed8\u5e76\u5b8c\u6210\u7684\u540d\u989d\u6570\u91cf\u3002</li> <li><code>status</code>: \u62fc\u56e2\u72b6\u6001 (0-\u62fc\u5355\u4e2d, 1-\u5b8c\u6210, 2-\u5931\u8d25)\u3002</li> </ul> </li> <li><code>group_buy_order_list</code> table:<ul> <li><code>user_id</code>: \u7528\u6237ID\u3002</li> <li><code>team_id</code>: \u5173\u8054\u7684\u62fc\u5355\u7ec4\u961fID\u3002</li> <li><code>order_id</code>: \u4e3a\u8be5\u7528\u6237\u751f\u6210\u7684\u62fc\u56e2\u5b50\u8ba2\u5355ID\u3002</li> <li><code>out_trade_no</code>: \u5916\u90e8\u4ea4\u6613\u5355\u53f7\uff0c\u7528\u4e8e\u5e42\u7b49\u63a7\u5236\u548c\u5173\u8054\u5546\u57ce\u8ba2\u5355\u3002</li> <li><code>status</code>: \u5b50\u8ba2\u5355\u72b6\u6001 (0-\u521d\u59cb\u9501\u5b9a, 1-\u6d88\u8d39\u5b8c\u6210)\u3002</li> </ul> </li> </ul>"},{"location":"develop/%E9%A1%B9%E7%9B%AE/%E6%8B%BC%E5%9B%A2%E8%90%A5%E9%94%80%E6%9C%8D%E5%8A%A1%20group-buy-market/2-9%20%E6%8B%BC%E5%9B%A2%E4%BA%A4%E6%98%93%E9%94%81%E5%8D%95%E9%80%BB%E8%BE%91/#_5","title":"\u5982\u4f55\u5b9e\u73b0\u76ee\u6807","text":"<p>\u901a\u8fc7\u4e0a\u8ff0\u7ec4\u4ef6\u7684\u534f\u540c\u5de5\u4f5c\uff0c\u7cfb\u7edf\u5b9e\u73b0\u4e86\u4ee5\u4e0b\u76ee\u6807\uff1a</p> <ol> <li>\u540d\u989d\u9884\u5360\uff1a\u5f53\u7528\u6237\u5728\u5546\u57ce\u7cfb\u7edf\u4e0b\u5355\u65f6\uff0c\u62fc\u56e2\u7cfb\u7edf\u901a\u8fc7\u589e\u52a0 <code>group_buy_order.lock_count</code> \u5e76\u521b\u5efa\u4e00\u6761 <code>group_buy_order_list</code> \u8bb0\u5f55\uff08\u72b6\u6001\u4e3a\u201c\u9501\u5b9a\u201d\uff09\uff0c\u4e3a\u7528\u6237\u9884\u7559\u4e86\u4e00\u4e2a\u53c2\u4e0e\u540d\u989d\u548c\u76f8\u5e94\u7684\u4f18\u60e0\u3002</li> <li>\u9632\u6b62\u8d85\u5356\uff1a\u5728\u589e\u52a0 <code>lock_count</code> \u65f6\uff0c\u4f1a\u6821\u9a8c\u5176\u4e0d\u8d85\u8fc7 <code>target_count</code>\uff0c\u786e\u4fdd\u4e0d\u4f1a\u8d85\u989d\u9501\u5b9a\u3002</li> <li>\u5e42\u7b49\u6027\u4fdd\u8bc1\uff1a<code>group_buy_order_list.out_trade_no</code> \u5b57\u6bb5\u7684\u552f\u4e00\u6027\u7ea6\u675f\uff08\u6216\u901a\u8fc7\u67e5\u8be2\u68c0\u67e5\uff09\u786e\u4fdd\u4e86\u540c\u4e00\u4e2a\u5916\u90e8\u4ea4\u6613\u8bf7\u6c42\u4e0d\u4f1a\u91cd\u590d\u9501\u5b9a\u540d\u989d\u3002</li> <li>\u72b6\u6001\u8ddf\u8e2a\uff1a<code>group_buy_order_list.status</code> \u5b57\u6bb5\u53ef\u4ee5\u8ddf\u8e2a\u7528\u6237\u4ece\u9501\u5b9a\u5230\u6700\u7ec8\u652f\u4ed8\u5b8c\u6210\uff08\u6216\u5931\u8d25\uff09\u7684\u72b6\u6001\u6d41\u8f6c\u3002</li> </ol> <p>\u8fd9\u6837\uff0c\u5546\u57ce\u7cfb\u7edf\u5728\u8c03\u7528\u9501\u5355\u63a5\u53e3\u6210\u529f\u540e\uff0c\u53ef\u4ee5\u653e\u5fc3\u5730\u5f15\u5bfc\u7528\u6237\u8fdb\u884c\u652f\u4ed8\u3002\u652f\u4ed8\u6210\u529f\u540e\uff0c\u5546\u57ce\u7cfb\u7edf\u4f1a\u901a\u77e5\u62fc\u56e2\u7cfb\u7edf\u66f4\u65b0\u8ba2\u5355\u72b6\u6001\uff1b\u5982\u679c\u652f\u4ed8\u5931\u8d25\u6216\u8d85\u65f6\uff0c\u4e5f\u5e94\u6709\u673a\u5236\u901a\u77e5\u62fc\u56e2\u7cfb\u7edf\u91ca\u653e\u9501\u5b9a\u7684\u540d\u989d\uff08\u4f8b\u5982\uff0c\u901a\u8fc7 <code>updateSubtractionLockCount</code> \u65b9\u6cd5\u51cf\u5c11 <code>lock_count</code>\uff0c\u5e76\u66f4\u65b0 <code>group_buy_order_list</code> \u7684\u72b6\u6001\uff09\u3002</p>"},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","title":"\u8bbe\u8ba1\u6a21\u5f0f","text":"","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_1","title":"\u8bbe\u8ba1\u539f\u5219","text":"","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_2","title":"\u5355\u4e00\u804c\u8d23\u539f\u5219","text":"<p>\u5355\u4e00\u804c\u8d23\u539f\u5219\uff08Simple Responsibility Principle\uff0cSRP\uff09\u662f\u6700\u7b80\u5355\u7684\u9762\u5411\u5bf9\u8c61\u8bbe\u8ba1\u539f\u5219\uff0c\u5b83\u7528\u4e8e\u63a7\u5236\u7c7b\u7684\u7c92\u5ea6\u5927\u5c0f\u3002</p> <p>\u4e00\u4e2a\u5bf9\u8c61\u5e94\u8be5\u53ea\u5305\u542b\u5355\u4e00\u7684\u804c\u8d23\uff0c\u5e76\u4e14\u8be5\u804c\u8d23\u88ab\u5b8c\u6574\u5730\u5c01\u88c5\u5728\u4e00\u4e2a\u7c7b\u4e2d\u3002 </p> <p>\u5c06\u7c7b\u7684\u7c92\u5ea6\u8fdb\u884c\u66f4\u8fdb\u4e00\u6b65\u7684\u5212\u5206\uff0c\u4f1a\u66f4\u52a0\u6e05\u6670\u3002\u5305\u62ec\u6211\u4eec\u4ee5\u540e\u5728\u8bbe\u8ba1 Mapper\u3001Service\u3001Controller \u7b49\u7b49\uff0c\u6839\u636e\u4e0d\u540c\u7684\u4e1a\u52a1\u8fdb\u884c\u5212\u5206\uff0c\u90fd\u53ef\u4ee5\u91c7\u7528\u5355\u4e00\u804c\u8d23\u539f\u5219\uff0c\u4ee5\u5b83\u4f5c\u4e3a\u6211\u4eec\u5b9e\u73b0\u9ad8\u5185\u805a\u4f4e\u8026\u5408\u7684\u6307\u5bfc\u65b9\u9488\u3002\u5b9e\u9645\u4e0a\u6211\u4eec\u7684\u5fae\u670d\u52a1\u4e5f\u662f\u53c2\u8003\u4e86\u5355\u4e00\u804c\u8d23\u539f\u5219\uff0c\u6bcf\u4e2a\u5fae\u670d\u52a1\u53ea\u5e94\u62c5\u8d1f\u4e00\u4e2a\u804c\u8d23\u3002</p>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_3","title":"\u5f00\u95ed\u539f\u5219","text":"<p>\u5f00\u95ed\u539f\u5219\uff08Open Close Principle\uff09</p> <p>\u8f6f\u4ef6\u5b9e\u4f53\u5e94\u5f53\u5bf9\u6269\u5c55\u5f00\u653e\uff0c\u5bf9\u4fee\u6539\u5173\u95ed\u3002</p> <p>\u5982\uff1a</p> Java<pre><code>public abstract class Coder {\n    public abstract void coding();\n\n    class JavaCoder extends Coder {\n        @Override\n        public void coding() {\n            System.out.println(\"Java\");\n        }\n    }\n\n    class PHPCoder extends Coder {\n        @Override\n        public void coding() {\n            System.out.println(\"PHP\");\n        }\n    }\n\n    class CppCoder extends Coder {\n        @Override\n        public void coding() {\n            System.out.println(\"CPlusPlus\");\n        }\n    }\n}\n</code></pre> <p>\u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a Coder \u62bd\u8c61\u7c7b\uff0c\u5b9a\u4e49\u51fa\u7f16\u7a0b\u7684\u884c\u4e3a\uff0c\u4f46\u662f\u4e0d\u8fdb\u884c\u5b9e\u73b0\uff0c\u800c\u662f\u5f00\u653e\u7ed9\u5176\u4ed6\u5177\u4f53\u7c7b\u578b\u7684\u7a0b\u5e8f\u5458\u6765\u5b9e\u73b0\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u4e1a\u52a1\u8fdb\u884c\u7075\u6d3b\u6269\u5c55\u4e86\uff0c\u5177\u6709\u8f83\u597d\u7684\u5ef6\u7eed\u6027\u3002</p>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_4","title":"\u91cc\u6c0f\u66ff\u6362\u539f\u5219","text":"<p>\u91cc\u6c0f\u66ff\u6362\u539f\u5219\uff08Liskov Substitution Principle\uff09\u662f\u5bf9\u5b50\u7c7b\u578b\u7684\u7279\u522b\u5b9a\u4e49\u3002</p> <p>\u6240\u6709\u5f15\u7528\u57fa\u7c7b\u7684\u5730\u65b9\u5fc5\u987b\u80fd\u900f\u660e\u5730\u4f7f\u7528\u5176\u5b50\u7c7b\u7684\u5bf9\u8c61\u3002</p> <p>\u7b80\u5355\u7684\u8bf4\u5c31\u662f\uff0c\u5b50\u7c7b\u53ef\u4ee5\u6269\u5c55\u7236\u7c7b\u7684\u529f\u80fd\uff0c\u4f46\u4e0d\u80fd\u6539\u53d8\u7236\u7c7b\u539f\u6709\u7684\u529f\u80fd\uff1a</p> <ol> <li>\u5b50\u7c7b\u53ef\u4ee5\u5b9e\u73b0\u7236\u7c7b\u7684\u62bd\u8c61\u65b9\u6cd5\uff0c\u4f46\u4e0d\u80fd\u8986\u76d6\u7236\u7c7b\u7684\u975e\u62bd\u8c61\u65b9\u6cd5\u3002</li> <li>\u5b50\u7c7b\u53ef\u4ee5\u589e\u52a0\u81ea\u5df1\u7279\u6709\u7684\u65b9\u6cd5\u3002</li> <li>\u5f53\u5b50\u7c7b\u7684\u65b9\u6cd5\u91cd\u8f7d\u7236\u7c7b\u7684\u65b9\u6cd5\u65f6\uff0c\u65b9\u6cd5\u7684\u524d\u7f6e\u6761\u4ef6\uff08\u5373\u65b9\u6cd5\u7684\u8f93\u5165/\u5165\u53c2\uff09\u8981\u6bd4\u7236\u7c7b\u65b9\u6cd5\u7684\u8f93\u5165\u53c2\u6570\u66f4\u5bbd\u677e\u3002</li> <li>\u5f53\u5b50\u7c7b\u7684\u65b9\u6cd5\u5b9e\u73b0\u7236\u7c7b\u7684\u65b9\u6cd5\u65f6\uff08\u91cd\u5199\uff0f\u91cd\u8f7d\u6216\u5b9e\u73b0\u62bd\u8c61\u65b9\u6cd5\uff09\uff0c\u65b9\u6cd5\u7684\u540e\u7f6e\u6761\u4ef6\uff08\u5373\u65b9\u6cd5\u7684\u8f93\u51fa/\u8fd4\u56de\u503c\uff09\u8981\u6bd4\u7236\u7c7b\u66f4\u4e25\u683c\u6216\u4e0e\u7236\u7c7b\u4e00\u6837\u3002</li> </ol>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_5","title":"\u4f9d\u8d56\u5012\u8f6c\u539f\u5219","text":"<p>\u4f9d\u8d56\u5012\u8f6c\u539f\u5219\uff08Dependence lnversion Principle\uff09\u4e5f\u662f\u6211\u4eec\u4e00\u76f4\u5728\u4f7f\u7528\u7684\uff0c\u6700\u660e\u663e\u7684\u5c31\u662f\u6211\u4eec\u7684Spring\u6846\u67b6\u4e86\u3002</p> <p>\u9ad8\u5c42\u6a21\u5757\u4e0d\u5e94\u4f9d\u8d56\u4e8e\u5e95\u5c42\u6a21\u5757\uff0c\u5b83\u4eec\u90fd\u5e94\u8be5\u4f9d\u8d56\u62bd\u8c61\u3002\u62bd\u8c61\u4e0d\u5e94\u4f9d\u8d56\u4e8e\u7ec6\u8282\uff0c\u7ec6\u8282\u5e94\u8be5\u4f9d\u8d56\u4e8e\u62bd\u8c61\u3002</p> Java<pre><code>public class Main {\n\n    public static void main(String[] args) {\n        UserController controller = new UserController();\n    }\n\n    static class UserMapper {\n        //CRUD...\n    }\n\n    static class UserServiceNew {   //\u7531\u4e8eUserServiceNew\u53d1\u751f\u53d8\u5316\uff0c\u4f1a\u76f4\u63a5\u5f71\u54cd\u5230\u5176\u4ed6\u9ad8\u5c42\u6a21\u5757\n        UserMapper mapper = new UserMapper();\n        //\u4e1a\u52a1\u4ee3\u7801....\n    }\n\n    static class UserController {   //\u712f\uff0c\u5e72\u561b\u6539\u5e95\u5c42\u554a\uff0c\u6211\u8fd9\u53c8\u5f97\u91cd\u5199\u4e86\n        UserService service = new UserService();   //\u54e6\u8c41\uff0c\u539f\u6765\u7684\u4e0d\u80fd\u7528\u4e86\n        UserServiceNew serviceNew = new UserServiceNew();   //\u53ea\u80fd\u4fee\u6539\u6210\u65b0\u7684\u4e86\n        //\u4e1a\u52a1\u4ee3\u7801....\n    }\n}\n</code></pre> <p>\u6211\u4eec\u53d1\u73b0\uff0c\u6211\u4eec\u7684\u5404\u4e2a\u6a21\u5757\u4e4b\u95f4\u5b9e\u9645\u4e0a\u662f\u5177\u6709\u5f3a\u5173\u8054\u7684\uff0c\u4e00\u4e2a\u6a21\u5757\u662f\u76f4\u63a5\u6307\u5b9a\u4f9d\u8d56\u4e8e\u53e6\u4e00\u4e2a\u6a21\u5757\uff0c\u867d\u7136\u8fd9\u6837\u7ed3\u6784\u6e05\u6670\uff0c\u4f46\u662f\u5e95\u5c42\u6a21\u5757\u7684\u53d8\u52a8\uff0c\u4f1a\u76f4\u63a5\u5f71\u54cd\u5230\u5176\u4ed6\u4f9d\u8d56\u4e8e\u5b83\u7684\u9ad8\u5c42\u6a21\u5757\uff0c\u5982\u679c\u6211\u4eec\u7684\u9879\u76ee\u53d8\u5f97\u5f88\u5e9e\u5927\uff0c\u90a3\u4e48\u8fd9\u6837\u7684\u4fee\u6539\u5c06\u662f\u4e00\u573a\u707e\u96be\u3002</p> <p>\u800c\u6709\u4e86Spring\u6846\u67b6\u4e4b\u540e\uff0c\u6211\u4eec\u7684\u5f00\u53d1\u6a21\u5f0f\u5c31\u53d1\u751f\u4e86\u53d8\u5316\uff1a</p> Java<pre><code>public class Main {\n\n    public static void main(String[] args) {\n        UserController controller = new UserController();\n    }\n\n    interface UserMapper {\n        //\u63a5\u53e3\u4e2d\u53ea\u505aCRUD\u65b9\u6cd5\u5b9a\u4e49\n    }\n\n    static class UserMapperImpl implements UserMapper {\n        //\u5b9e\u73b0\u7c7b\u5b8c\u6210CRUD\u5177\u4f53\u5b9e\u73b0\n    }\n\n    interface UserService {\n        //\u4e1a\u52a1\u4ee3\u7801\u5b9a\u4e49....\n    }\n\n    static class UserServiceImpl implements UserService {\n        @Resource   //\u73b0\u5728\u7531Spring\u6765\u4e3a\u6211\u4eec\u9009\u62e9\u4e00\u4e2a\u6307\u5b9a\u7684\u5b9e\u73b0\u7c7b\uff0c\u7136\u540e\u6ce8\u5165\uff0c\u800c\u4e0d\u662f\u7531\u6211\u4eec\u5728\u7c7b\u4e2d\u786c\u7f16\u7801\u8fdb\u884c\u6307\u5b9a\n        UserMapper mapper;\n\n        //\u4e1a\u52a1\u4ee3\u7801\u5177\u4f53\u5b9e\u73b0\n    }\n\n    static class UserController {\n        @Resource\n        UserService service;   //\u76f4\u63a5\u4f7f\u7528\u63a5\u53e3\uff0c\u5c31\u7b97\u4f60\u6539\u5b9e\u73b0\uff0c\u6211\u4e5f\u4e0d\u9700\u8981\u518d\u4fee\u6539\u4ee3\u7801\u4e86\n\n        //\u4e1a\u52a1\u4ee3\u7801....\n    }\n}\n</code></pre> <p>\u901a\u8fc7\u4f7f\u7528\u63a5\u53e3\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u539f\u6709\u7684\u5f3a\u5173\u8054\u7ed9\u5f31\u5316\uff0c\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u63a5\u53e3\u4e2d\u5b9a\u4e49\u4e86\u4ec0\u4e48\u65b9\u6cd5\u7136\u540e\u53bb\u4f7f\u7528\u5373\u53ef\uff0c\u800c\u5177\u4f53\u7684\u64cd\u4f5c\u7531\u63a5\u53e3\u7684\u5b9e\u73b0\u7c7b\u6765\u5b8c\u6210\uff0c\u5e76\u7531Spring\u6765\u4e3a\u6211\u4eec\u6ce8\u5165\uff0c\u800c\u4e0d\u662f\u6211\u4eec\u901a\u8fc7\u786c\u7f16\u7801\u7684\u65b9\u5f0f\u53bb\u6307\u5b9a\u3002</p>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_6","title":"\u63a5\u53e3\u9694\u79bb\u539f\u5219","text":"<p>\u63a5\u53e3\u9694\u79bb\u539f\u5219\uff08Interface Segregation Principle, ISP\uff09\u5b9e\u9645\u4e0a\u662f\u5bf9\u63a5\u53e3\u7684\u7ec6\u5316\u3002</p> <p>\u5ba2\u6237\u7aef\u4e0d\u5e94\u4f9d\u8d56\u90a3\u4e9b\u5b83\u4e0d\u9700\u8981\u7684\u63a5\u53e3\u3002</p> <p>\u5982\u4e00\u4e2a\u83b7\u53d6\u8bbe\u5907\u4fe1\u606f\u7684\u63a5\u53e3\uff0c\u6709\u83b7\u53d6 cpu \u7684\u65b9\u6cd5\uff0c\u6709\u83b7\u53d6\u529f\u7387\u7684\u65b9\u6cd5\u3002\u5bf9\u4e8e\u4e00\u53f0\u7535\u8111\uff0c\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u90fd\u80fd\u7528\u5230\uff1b\u4f46\u662f\u5bf9\u4e8e\u4e00\u53f0\u7535\u98ce\u6247\uff0c\u6839\u672c\u7528\u4e0d\u5230\u83b7\u53d6 cpu \u7684\u65b9\u6cd5\uff0c\u8fd9\u5c31\u8fdd\u80cc\u4e86\u63a5\u53e3\u9694\u79bb\u539f\u5219\u3002\u5e94\u8be5\u7ec6\u5316\u7c92\u5ea6\uff0c\u5982\u5206\u4e3a\u667a\u80fd\u8bbe\u5907\u4fe1\u606f\u63a5\u53e3\u548c\u666e\u901a\u8bbe\u5907\u4fe1\u606f\u63a5\u53e3\u3002</p>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_7","title":"\u5408\u6210\u590d\u7528\u539f\u5219","text":"<p>\u5408\u6210\u590d\u7528\u539f\u5219\uff08Composite Reuse Principle\uff09\u7684\u6838\u5fc3\u5c31\u662f\u59d4\u6d3e\u3002</p> <p>\u4f18\u5148\u4f7f\u7528\u5bf9\u8c61\u7ec4\u5408\uff0c\u800c\u4e0d\u662f\u901a\u8fc7\u7ee7\u627f\u6765\u8fbe\u5230\u590d\u7528\u7684\u76ee\u7684\u3002</p> <p>\u5982\uff1a</p> Java<pre><code>class A {\n    public void connectDatabase() {\n        System.out.println(\"\u8fde\u63a5\u6570\u636e\u5e93\u64cd\u4f5c\");\n    }\n}\n\nclass B extends A {    // \u76f4\u63a5\u901a\u8fc7\u7ee7\u627f\u7684\u65b9\u5f0f\uff0c\u5f97\u5230A\u7684\u6570\u636e\u5e93\u8fde\u63a5\u903b\u8f91\n    public void test() {\n        System.out.println(\"B\u4e5f\u9700\u8981\u8fde\u63a5\u6570\u636e\u5e93\");\n        connectDatabase();   //\u76f4\u63a5\u8c03\u7528\u7236\u7c7b\u65b9\u6cd5\n    }\n}\n</code></pre> <p>\u8fd9\u6837\uff0c\u4f7f\u7528\u7ee7\u627f\u7684\u65b9\u5f0f\u5b9e\u73b0\u590d\u7528\uff0c\u4f1a\u589e\u52a0\u8026\u5408\u5ea6\u3002\u4e00\u65e6\u8be5\u529f\u80fd\u4e0d\u7531 A \u6765\u5b9e\u73b0\uff0cB \u4e5f\u8981\u8ddf\u7740\u4fee\u6539\u7ee7\u627f\u7684\u7236\u7c7b\u3002\u800c\u4e14\u901a\u8fc7\u7ee7\u627f\u5b50\u7c7b\u4f1a\u5f97\u5230\u4e00\u4e9b\u7236\u7c7b\u4e2d\u7684\u5b9e\u73b0\u7ec6\u8282\uff0c\u6bd4\u5982\u67d0\u4e9b\u5b57\u6bb5\u6216\u662f\u65b9\u6cd5\uff0c\u8fd9\u6837\u76f4\u63a5\u66b4\u9732\u7ed9\u5b50\u7c7b\uff0c\u5e76\u4e0d\u5b89\u5168\u3002</p> <p>\u56e0\u6b64\uff0c\u53ef\u4ee5\u9009\u62e9\u4ee5\u4e0b\u65b9\u5f0f\u6765\u5b9e\u73b0\u590d\u7528\uff1a</p> Java<pre><code>class A {\n    public void connectDatabase() {\n        System.out.println(\"\u8fde\u63a5\u6570\u636e\u5e93\u64cd\u4f5c\");\n    }\n}\n\nclass B {   // \u4e0d\u8fdb\u884c\u7ee7\u627f\uff0c\u800c\u662f\u5728\u7528\u7684\u65f6\u5019\u7ed9\u6211\u4e00\u4e2aA\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u62bd\u8c61\u6210\u4e00\u4e2a\u63a5\u53e3\uff0c\u66f4\u52a0\u7075\u6d3b\n    public void test(A a) {\n        System.out.println(\"B\u4e5f\u9700\u8981\u8fde\u63a5\u6570\u636e\u5e93\");\n        a.connectDatabase();   // \u5728\u901a\u8fc7\u4f20\u5165\u7684\u5bf9\u8c61A\u53bb\u6267\u884c\n    }\n}\n</code></pre> <p>\u6216\u662f</p> Java<pre><code>class A {\n    public void connectDatabase() {\n        System.out.println(\"\u8fde\u63a5\u6570\u636e\u5e93\u64cd\u4f5c\");\n    }\n}\n\nclass B {\n\n    A a;\n    public B(A a) {   // \u5728\u6784\u9020\u65f6\u5c31\u6307\u5b9a\u597d\n        this.a = a;\n    }\n\n    public void test() {\n        System.out.println(\"B\u4e5f\u9700\u8981\u8fde\u63a5\u6570\u636e\u5e93\");\n        a.connectDatabase();   // \u4e5f\u662f\u901a\u8fc7\u5bf9\u8c61A\u53bb\u6267\u884c\n    }\n}\n</code></pre> <p>\u901a\u8fc7\u5bf9\u8c61\u4e4b\u95f4\u7684\u7ec4\u5408\uff0c\u964d\u4f4e\u4e86\u7c7b\u4e4b\u95f4\u7684\u8026\u5408\u5ea6\uff0c\u5e76\u4e14 A \u7684\u5b9e\u73b0\u7ec6\u8282\u4e5f\u4e0d\u4f1a\u4e4b\u95f4\u88ab B \u5f97\u5230\uff0c\u53ea\u7ba1\u7528\u5c31\u884c\u3002</p>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_8","title":"\u8fea\u7c73\u7279\u6cd5\u5219","text":"<p>\u8fea\u7c73\u7279\u6cd5\u5219\uff08Law of Demeter\uff09\u53c8\u79f0\u6700\u5c11\u77e5\u8bc6\u539f\u5219\uff0c\u662f\u5bf9\u7a0b\u5e8f\u5185\u90e8\u6570\u636e\u4ea4\u4e92\u7684\u9650\u5236\u3002</p> <p>\u6bcf\u4e00\u4e2a\u8f6f\u4ef6\u5355\u4f4d\u5bf9\u5176\u4ed6\u5355\u4f4d\u90fd\u53ea\u6709\u6700\u5c11\u7684\u77e5\u8bc6\uff0c\u800c\u4e14\u5c40\u9650\u4e8e\u90a3\u4e9b\u4e0e\u672c\u5355\u4f4d\u5bc6\u5207\u76f8\u5173\u7684\u8f6f\u4ef6\u5355\u4f4d\u3002\u3001</p> <p>\u4e00\u4e2a\u7c7b/\u6a21\u5757\u5bf9\u5176\u4ed6\u7684\u7c7b/\u6a21\u5757\u6709\u8d8a\u5c11\u7684\u4ea4\u4e92\u8d8a\u597d\u3002</p>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_9","title":"\u521b\u5efa\u578b\u8bbe\u8ba1\u6a21\u5f0f","text":"","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_10","title":"\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f","text":"<p>\u6211\u4eec\u60f3\u8981\u521b\u5efa\u4e00\u4e2a\u7c7b\u7684\u5b9e\u73b0\u7c7b\u65f6\uff0c\u5982\u679c\u7528\u666e\u901a\u5199\u6cd5\uff1a</p> Java<pre><code>public abstract class Fruit {\n    private final String name;\n\n    public Fruit(String name) {\n        this.name = name;\n    }\n\n    @Override\n    String toString() {\n        return name + \"@\" + hashCode();\n    }\n}\n\npublic class Apple extends Fruit {\n    public Apple() {\n        super(\"\u82f9\u679c\");\n    }\n}\n\npublic class Orange extends Fruit {\n    public Orange() {\n        super(\"\u6a58\u5b50\");\n    }\n}\n</code></pre> <p>\u76f4\u63a5 new \u6765\u5f97\u5230\u5bf9\u8c61</p> Java<pre><code>public class Main {\n    public static void main(String[] args) {\n        Apple apple = new Apple();\n        System.out.println(apple);\n    }\n}\n</code></pre> <p>\u4f46\u662f\u8fd9\u6837\u5199\uff0c\u5982\u679c\u521b\u5efa\u5bf9\u8c61\u7684\u65f6\u5019\u9700\u8981\u4f20\u5165\u4e00\u4e9b\u53c2\u6570\uff0c\u8981\u4fee\u6539\u5b9e\u73b0\u7c7b\u65f6\u5c31\u4f1a\u6539\u52a8\u5f88\u591a\u4ee3\u7801\u3002\u6839\u636e\u8fea\u7c73\u7279\u6cd5\u5219\uff0c\u5e94\u8be5\u51cf\u5c11\u7c7b\u4e4b\u95f4\u7684\u4ea4\u4e92\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5de5\u5382\uff0c\u6211\u4eec\u9700\u8981\u4ec0\u4e48\u7c7b\uff0c\u627e\u5de5\u5382\u751f\u6210\u5c31\u884c\uff0c\u4e8e\u662f\u6709\u4e86\u4e0b\u9762\u7684\u7b80\u5355\u5de5\u5382\u6a21\u5f0f\u3002</p>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_11","title":"\u7b80\u5355\u5de5\u5382\u6a21\u5f0f","text":"<p>\u7b80\u5355\u5de5\u5382\u6a21\u5f0f\u4e0d\u662f\u4e00\u4e2a\u6b63\u5f0f\u7684\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u4f46\u5b83\u662f\u5de5\u5382\u6a21\u5f0f\u7684\u57fa\u7840\u3002\u5b83\u4f7f\u7528\u4e00\u4e2a\u5355\u72ec\u7684\u5de5\u5382\u7c7b\u6765\u521b\u5efa\u4e0d\u540c\u7684\u5bf9\u8c61\uff0c\u6839\u636e\u4f20\u5165\u7684\u53c2\u6570\u51b3\u5b9a\u521b\u5efa\u54ea\u79cd\u7c7b\u578b\u7684\u5bf9\u8c61\u3002</p> <p>\u5c06\u5bf9\u8c61\u5c01\u88c5\u5230\u5de5\u5382\u4e2d\uff1a</p> Java<pre><code>public class FruitFactory {\n    /**\n     * \u8fd9\u91cc\u5c31\u76f4\u63a5\u6765\u4e00\u4e2a\u9759\u6001\u65b9\u6cd5\u6839\u636e\u6307\u5b9a\u7c7b\u578b\u8fdb\u884c\u521b\u5efa\n     * @param type \u6c34\u679c\u7c7b\u578b\n     * @return \u5bf9\u5e94\u7684\u6c34\u679c\u5bf9\u8c61\n     */\n    public static Fruit getFruit(String type) {\n        switch (type) {\n            case \"\u82f9\u679c\":\n                return new Apple();\n               case \"\u6a58\u5b50\":\n                return new Orange();\n            default:\n                return null;\n        }\n    }\n}\n</code></pre> <p>\u7136\u540e\u901a\u8fc7\u5de5\u5382\u6765\u521b\u5efa\u5bf9\u8c61\uff1a</p> Java<pre><code>public class Main {\n    public static void main(String[] args) {\n        Fruit fruit = FruitFactory.getFruit(\"\u6a58\u5b50\"); // \u76f4\u63a5\u95ee\u5de5\u5382\u8981\uff0c\u800c\u4e0d\u662f\u81ea\u5df1\u53bb\u521b\u5efa\n        System.out.println(fruit);\n    }\n}\n</code></pre> <p>\u4f46\u8fd9\u6837\u8fd8\u662f\u6709\u4e00\u4e9b\u95ee\u9898\uff0c\u6839\u636e\u5f00\u95ed\u539f\u5219\uff0c\u4e00\u4e2a\u8f6f\u4ef6\u5b9e\u4f53\uff0c\u6bd4\u5982\u7c7b\u3001\u6a21\u5757\u548c\u51fd\u6570\u5e94\u8be5\u5bf9\u6269\u5c55\u5f00\u653e\uff0c\u5bf9\u4fee\u6539\u5173\u95ed\u3002\u5982\u679c\u6211\u4eec\u73b0\u5728\u9700\u8981\u65b0\u589e\u4e00\u79cd\u6c34\u679c\uff0c\u6bd4\u5982\u6843\u5b50\uff0c\u90a3\u4e48\u8fd9\u65f6\u5c31\u5f97\u53bb\u4fee\u6539\u5de5\u5382\u63d0\u4f9b\u7684\u5de5\u5382\u65b9\u6cd5\u4e86\uff0c\u4f46\u662f\u8fd9\u6837\u662f\u4e0d\u592a\u7b26\u5408\u5f00\u95ed\u539f\u5219\u7684\uff0c\u56e0\u4e3a\u5de5\u5382\u5b9e\u9645\u4e0a\u662f\u9488\u5bf9\u4e8e\u8c03\u7528\u65b9\u63d0\u4f9b\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u5c3d\u53ef\u80fd\u5bf9\u4fee\u6539\u5173\u95ed\u3002</p>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_12","title":"\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f","text":"<p>\u9488\u5bf9\u4e0a\u9762\u7684\u95ee\u9898\uff0c\u6539\u8fdb\u51fa\u4e86\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f\u3002\u5b83\u5b9a\u4e49\u4e86\u4e00\u4e2a\u521b\u5efa\u5bf9\u8c61\u7684\u63a5\u53e3\uff0c\u4f46\u5c06\u5177\u4f53\u7684\u5bf9\u8c61\u521b\u5efa\u5ef6\u8fdf\u5230\u5b50\u7c7b\u4e2d\u3002</p> <p>\u6838\u5fc3\u601d\u60f3\uff1a</p> <ul> <li>\u5c06\u5bf9\u8c61\u7684\u521b\u5efa\u4e0e\u4f7f\u7528\u5206\u79bb\uff1a\u5ba2\u6237\u7aef\u4e0d\u9700\u8981\u77e5\u9053\u5177\u4f53\u521b\u5efa\u54ea\u4e2a\u7c7b\u7684\u5bf9\u8c61\uff0c\u53ea\u9700\u8981\u901a\u8fc7\u5de5\u5382\u63a5\u53e3\u83b7\u53d6\u5bf9\u8c61\u3002</li> <li>\u6269\u5c55\u6027\uff1a\u5982\u679c\u9700\u8981\u589e\u52a0\u65b0\u7684\u4ea7\u54c1\u7c7b\u578b\uff0c\u53ea\u9700\u8981\u589e\u52a0\u65b0\u7684\u5de5\u5382\u5b50\u7c7b\uff0c\u800c\u4e0d\u9700\u8981\u4fee\u6539\u73b0\u6709\u4ee3\u7801\u3002</li> </ul> <p>\u4f18\u70b9 + \u89e3\u8026\uff1a\u5c06\u5bf9\u8c61\u7684\u521b\u5efa\u4e0e\u4f7f\u7528\u5206\u79bb\uff0c\u5ba2\u6237\u7aef\u4e0d\u9700\u8981\u5173\u5fc3\u5177\u4f53\u7684\u4ea7\u54c1\u7c7b\u3002 + \u6269\u5c55\u6027\uff1a\u589e\u52a0\u65b0\u7684\u4ea7\u54c1\u7c7b\u578b\u65f6\uff0c\u53ea\u9700\u8981\u589e\u52a0\u65b0\u7684\u5de5\u5382\u7c7b\uff0c\u7b26\u5408\u5f00\u95ed\u539f\u5219\u3002 + \u53ef\u7ef4\u62a4\u6027\uff1a\u4ee3\u7801\u7ed3\u6784\u6e05\u6670\uff0c\u6613\u4e8e\u7ef4\u62a4\u3002</p> <p>\u7f3a\u70b9 + \u7c7b\u7684\u6570\u91cf\u589e\u52a0\uff1a\u6bcf\u589e\u52a0\u4e00\u4e2a\u4ea7\u54c1\u7c7b\u578b\uff0c\u90fd\u9700\u8981\u589e\u52a0\u4e00\u4e2a\u5177\u4f53\u5de5\u5382\u7c7b\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7c7b\u7684\u6570\u91cf\u81a8\u80c0\u3002 + \u590d\u6742\u6027\u589e\u52a0\uff1a\u5bf9\u4e8e\u7b80\u5355\u7684\u5bf9\u8c61\u521b\u5efa\uff0c\u4f7f\u7528\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f\u53ef\u80fd\u4f1a\u663e\u5f97\u8fc7\u4e8e\u590d\u6742\u3002</p> <p>\u9002\u7528\u573a\u666f + \u9700\u8981\u7075\u6d3b\u521b\u5efa\u5bf9\u8c61\uff1a\u5f53\u5bf9\u8c61\u7684\u521b\u5efa\u8fc7\u7a0b\u6bd4\u8f83\u590d\u6742\uff0c\u6216\u8005\u9700\u8981\u6839\u636e\u6761\u4ef6\u52a8\u6001\u521b\u5efa\u5bf9\u8c61\u65f6\u3002 + \u9700\u8981\u89e3\u8026\uff1a\u5f53\u9700\u8981\u5c06\u5bf9\u8c61\u7684\u521b\u5efa\u4e0e\u4f7f\u7528\u5206\u79bb\uff0c\u907f\u514d\u5ba2\u6237\u7aef\u4f9d\u8d56\u5177\u4f53\u7c7b\u65f6\u3002 + \u9700\u8981\u6269\u5c55\u6027\uff1a\u5f53\u7cfb\u7edf\u9700\u8981\u652f\u6301\u591a\u79cd\u4ea7\u54c1\u7c7b\u578b\uff0c\u5e76\u4e14\u672a\u6765\u53ef\u80fd\u4f1a\u589e\u52a0\u65b0\u7684\u4ea7\u54c1\u7c7b\u578b\u65f6\u3002</p> <p>\u5e94\u7528\u5b9e\u4f8b + \u6c7d\u8f66\u5236\u9020\uff1a\u4f60\u9700\u8981\u4e00\u8f86\u6c7d\u8f66\uff0c\u53ea\u9700\u4ece\u5de5\u5382\u63d0\u8d27\uff0c\u800c\u4e0d\u9700\u8981\u5173\u5fc3\u6c7d\u8f66\u7684\u5236\u9020\u8fc7\u7a0b\u53ca\u5176\u5185\u90e8\u5b9e\u73b0\u3002 + Hibernate\uff1a\u66f4\u6362\u6570\u636e\u5e93\u65f6\uff0c\u53ea\u9700\u66f4\u6539\u65b9\u8a00\uff08Dialect\uff09\u548c\u6570\u636e\u5e93\u9a71\u52a8\uff08Driver\uff09\uff0c\u5373\u53ef\u5b9e\u73b0\u5bf9\u4e0d\u540c\u6570\u636e\u5e93\u7684\u5207\u6362\u3002</p> Java<pre><code>public abstract class FruitFactory&lt;T extends Fruit&gt; { // \u5c06\u6c34\u679c\u5de5\u5382\u62bd\u8c61\u4e3a\u62bd\u8c61\u7c7b\uff0c\u6dfb\u52a0\u6cdb\u578bT\u7531\u5b50\u7c7b\u6307\u5b9a\u6c34\u679c\u7c7b\u578b\n    public abstract T getFruit(); // \u4e0d\u540c\u7684\u6c34\u679c\u5de5\u5382\uff0c\u901a\u8fc7\u6b64\u65b9\u6cd5\u751f\u4ea7\u4e0d\u540c\u7684\u6c34\u679c\n}\n\npublic class AppleFactory extends FruitFactory&lt;Apple&gt; { // \u82f9\u679c\u5de5\u5382\uff0c\u76f4\u63a5\u8fd4\u56deApple\uff0c\u4e00\u6b65\u5230\u4f4d\n    @Override\n    public Apple getFruit() {\n        return new Apple();\n    }\n}\n</code></pre> <p>\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7c7b\u578b\u7684\u5de5\u5382\u6765\u751f\u4ea7\u4e0d\u540c\u7c7b\u578b\u7684\u6c34\u679c\u4e86\uff0c\u5e76\u4e14\u5982\u679c\u65b0\u589e\u4e86\u6c34\u679c\u7c7b\u578b\uff0c\u76f4\u63a5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5de5\u5382\u7c7b\u5c31\u884c\uff0c\u4e0d\u9700\u8981\u4fee\u6539\u4e4b\u524d\u5df2\u7ecf\u7f16\u5199\u597d\u7684\u5185\u5bb9\u3002</p> Java<pre><code>public class Main {\n    public static void main(String[] args) {\n        test(new AppleFactory()::getFruit); // \u6bd4\u5982\u6211\u4eec\u73b0\u5728\u8981\u5403\u4e00\u4e2a\u82f9\u679c\uff0c\u90a3\u4e48\u5c31\u76f4\u63a5\u901a\u8fc7\u82f9\u679c\u5de5\u5382\u6765\u83b7\u53d6\u82f9\u679c\n    }\n\n    // \u6b64\u65b9\u6cd5\u6a21\u62df\u5403\u6389\u4e00\u4e2a\u6c34\u679c\n    private static void test(Supplier&lt;Fruit&gt; supplier){\n        System.out.println(supplier.get() + \" \u88ab\u5403\u6389\u4e86\uff0c\u771f\u597d\u5403\u3002\");\n    }\n}\n</code></pre>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_13","title":"\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f","text":"<p>\u62bd\u8c61\u5de5\u5382\u662f\u56f4\u7ed5\u4e00\u4e2a\u8d85\u7ea7\u5de5\u5382\u521b\u5efa\u5176\u4ed6\u5de5\u5382\uff0c\u8be5\u8d85\u7ea7\u5de5\u5382\u53c8\u79f0\u4e3a\u5176\u4ed6\u5de5\u5382\u7684\u5de5\u5382\u3002</p> <p>\u5728\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f\u4e2d\uff0c\u63a5\u53e3\u662f\u8d1f\u8d23\u521b\u5efa\u4e00\u4e2a\u76f8\u5173\u5bf9\u8c61\u7684\u5de5\u5382\uff0c\u4e0d\u9700\u8981\u663e\u5f0f\u6307\u5b9a\u5b83\u4eec\u7684\u7c7b\u3002\u6bcf\u4e2a\u751f\u6210\u7684\u5de5\u5382\u90fd\u80fd\u6309\u7167\u5de5\u5382\u6a21\u5f0f\u63d0\u4f9b\u5bf9\u8c61\u3002</p> <p>\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f\u63d0\u4f9b\u4e86\u4e00\u79cd\u521b\u5efa\u4e00\u7cfb\u5217\u76f8\u5173\u6216\u76f8\u4e92\u4f9d\u8d56\u5bf9\u8c61\u7684\u63a5\u53e3\uff0c\u800c\u65e0\u9700\u6307\u5b9a\u5177\u4f53\u5b9e\u73b0\u7c7b\u3002\u901a\u8fc7\u4f7f\u7528\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f\uff0c\u53ef\u4ee5\u5c06\u5ba2\u6237\u7aef\u4e0e\u5177\u4f53\u4ea7\u54c1\u7684\u521b\u5efa\u8fc7\u7a0b\u89e3\u8026\uff0c\u4f7f\u5f97\u5ba2\u6237\u7aef\u53ef\u4ee5\u901a\u8fc7\u5de5\u5382\u63a5\u53e3\u6765\u521b\u5efa\u4e00\u65cf\u4ea7\u54c1\u3002</p> <p>\u6838\u5fc3\u601d\u60f3 + \u63d0\u4f9b\u4e00\u4e2a\u63a5\u53e3\uff1a\u7528\u4e8e\u521b\u5efa\u4e00\u7ec4\u76f8\u5173\u6216\u4f9d\u8d56\u7684\u5bf9\u8c61\uff0c\u800c\u4e0d\u9700\u8981\u6307\u5b9a\u5177\u4f53\u7684\u7c7b\u3002 + \u5c01\u88c5\u5bf9\u8c61\u7684\u521b\u5efa\uff1a\u5ba2\u6237\u7aef\u53ea\u9700\u8981\u77e5\u9053\u62bd\u8c61\u5de5\u5382\u548c\u62bd\u8c61\u4ea7\u54c1\uff0c\u4e0d\u9700\u8981\u5173\u5fc3\u5177\u4f53\u7684\u5b9e\u73b0\u3002</p> <p>\u7ed3\u6784 + \u62bd\u8c61\u5de5\u5382\uff08Abstract Factory\uff09\uff1a\u5b9a\u4e49\u521b\u5efa\u4e00\u7ec4\u4ea7\u54c1\u7684\u63a5\u53e3\u3002 + \u5177\u4f53\u5de5\u5382\uff08Concrete Factory\uff09\uff1a\u5b9e\u73b0\u62bd\u8c61\u5de5\u5382\u63a5\u53e3\uff0c\u521b\u5efa\u5177\u4f53\u7684\u4ea7\u54c1\u3002 + \u62bd\u8c61\u4ea7\u54c1\uff08Abstract Product\uff09\uff1a\u5b9a\u4e49\u4ea7\u54c1\u7684\u63a5\u53e3\u3002 + \u5177\u4f53\u4ea7\u54c1\uff08Concrete Product\uff09\uff1a\u5b9e\u73b0\u62bd\u8c61\u4ea7\u54c1\u63a5\u53e3\u7684\u5177\u4f53\u7c7b\u3002</p> <p>\u4f18\u70b9 + \u786e\u4fdd\u540c\u4e00\u4ea7\u54c1\u65cf\u7684\u5bf9\u8c61\u4e00\u8d77\u5de5\u4f5c\u3002 + \u5ba2\u6237\u7aef\u4e0d\u9700\u8981\u77e5\u9053\u6bcf\u4e2a\u5bf9\u8c61\u7684\u5177\u4f53\u7c7b\uff0c\u7b80\u5316\u4e86\u4ee3\u7801\u3002</p> <p>\u7f3a\u70b9 + \u6269\u5c55\u4ea7\u54c1\u65cf\u975e\u5e38\u56f0\u96be\u3002\u589e\u52a0\u4e00\u4e2a\u65b0\u7684\u4ea7\u54c1\u65cf\u9700\u8981\u4fee\u6539\u62bd\u8c61\u5de5\u5382\u548c\u6240\u6709\u5177\u4f53\u5de5\u5382\u7684\u4ee3\u7801\uff0c\u8fdd\u80cc\u4e86\u5f00\u95ed\u539f\u5219\u3002</p> <p>\u4f7f\u7528\u573a\u666f + QQ \u6362\u76ae\u80a4\u65f6\uff0c\u6574\u5957\u76ae\u80a4\u4e00\u8d77\u66f4\u6362\u3002 + \u521b\u5efa\u8de8\u5e73\u53f0\u5e94\u7528\u65f6\uff0c\u751f\u6210\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u7684\u7a0b\u5e8f\u3002</p> Java<pre><code>public class Phone {\n}\n\npublic class Computer {\n}\n\npublic class TV {\n}\n</code></pre> <p>\u5b9a\u4e49\u62bd\u8c61\u5de5\u5382</p> Java<pre><code>public abstract class AbstractFactory {\n    public abstract Phone getPhone();\n    public abstract Phone getComputer();\n    public abstract Phone getTV();\n}\n</code></pre> <p>\u5b9a\u4e49\u5177\u4f53\u5de5\u5382</p> Java<pre><code>class XiaoMiFactory extends AbstractFactory {\n}\n\nclass AppleFactory extends AbstractFactory {\n}\n\nclass HuaweiFactory extends AbstractFactory {\n}\n</code></pre> <p>\u4f7f\u7528\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f</p> Java<pre><code>public class Main {\n    public static void main(String[] args) {\n        AbstractFactory factory;\n\n        // \u83b7\u53d6\u5c0f\u7c73\u7684\u4ea7\u54c1\n        factory = new XiaoMiFactory();\n        Phone = factory.getPhone();\n        Computer = factory.getComputer();\n\n        // \u83b7\u53d6\u534e\u4e3a\u7684\u4ea7\u54c1\n        factory = new HuaweiFactory();\n        ...\n    }\n}\n</code></pre>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_14","title":"\u5efa\u9020\u8005\u6a21\u5f0f","text":"<p>\u5982 <code>StringBuilder</code> \u7b49 XXXBuilder \u5c31\u5c5e\u4e8e\u5efa\u9020\u8005\u6a21\u5f0f\u7684\u601d\u60f3\uff0c\u7ecf\u5e38\u4f7f\u7528\u8fd9\u6837\u7684\u7c7b\u6765\u521b\u5efa\u9700\u8981\u7684\u5bf9\u8c61\u3002</p> <p>\u5b9e\u9645\u4e0a\u662f\u901a\u8fc7\u5efa\u9020\u8005\u6765\u4e0d\u65ad\u914d\u7f6e\u53c2\u6570\u6216\u5185\u5bb9\uff0c\u6700\u540e\u8fdb\u884c\u5bf9\u8c61\u7684\u6784\u5efa\u3002</p> <p>\u76f8\u6bd4\u76f4\u63a5\u53bb new \u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\uff0c\u5efa\u9020\u8005\u6a21\u5f0f\u7684\u91cd\u5fc3\u66f4\u52a0\u5173\u6ce8\u5728\u5982\u4f55\u5b8c\u6210\u6bcf\u4e00\u6b65\u7684\u914d\u7f6e\uff0c\u540c\u65f6\u5982\u679c\u4e00\u4e2a\u7c7b\u7684\u6784\u9020\u65b9\u6cd5\u53c2\u6570\u8fc7\u591a\uff0c\u6211\u4eec\u901a\u8fc7\u5efa\u9020\u8005\u6a21\u5f0f\u6765\u521b\u5efa\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u4f1a\u66f4\u52a0\u4f18\u96c5\u3002</p> Java<pre><code>public class Student {\n    private int id;\n    private int age;\n    private String name;\n    private List&lt;String&gt; awards;\n\n    // \u4e00\u5f8b\u4f7f\u7528\u5efa\u9020\u8005\u6765\u521b\u5efa\uff0c\u4e0d\u5bf9\u5916\u76f4\u63a5\u5f00\u653e\n    private Student(int id, int age, String name, List&lt;String&gt; awards) {\n        ...\n    }\n\n    public static StudentBuilder builder() { // \u901a\u8fc7builder\u65b9\u6cd5\u76f4\u63a5\u83b7\u53d6\u5efa\u9020\u8005\n        return new StudentBuilder();\n    }\n\n    public static class StudentBuilder { // \u521b\u5efa\u4e00\u4e2a\u5185\u90e8\u7c7b\n        // Builder\u4e5f\u9700\u8981\u5c06\u6240\u6709\u7684\u53c2\u6570\u90fd\u8fdb\u884c\u6682\u65f6\u4fdd\u5b58\uff0c\u6240\u4ee5Student\u600e\u4e48\u5b9a\u4e49\u7684\u8fd9\u91cc\u5c31\u600e\u4e48\u5b9a\u4e49\n        int id;\n        int age;\n        String name;\n        List&lt;String&gt; awards;\n\n        public StudentBuilder id(int id) { // \u76f4\u63a5\u8c03\u7528\u5efa\u9020\u8005\u5bf9\u5e94\u7684\u65b9\u6cd5\uff0c\u4e3a\u5bf9\u5e94\u7684\u5c5e\u6027\u8d4b\u503c\n            this.id = id;\n            return this; // \u4e3a\u4e86\u652f\u6301\u94fe\u5f0f\u8c03\u7528\uff0c\u8fd9\u91cc\u76f4\u63a5\u8fd4\u56de\u5efa\u9020\u8005\u672c\u8eab\uff0c\u4e0b\u540c\n        }\n\n        ...\n\n        public StudentBuilder awards(String... awards) {\n            this.awards = Arrays.asList(awards);\n            return this;\n        }\n\n        public Student build() { // \u6700\u540e\u6211\u4eec\u53ea\u9700\u8981\u8c03\u7528\u5efa\u9020\u8005\u63d0\u4f9b\u7684build\u65b9\u6cd5\u5373\u53ef\u6839\u636e\u6211\u4eec\u7684\u914d\u7f6e\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\n            return new Student(id, age, name, awards);\n        }\n    }\n}\n</code></pre>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_15","title":"\u5355\u4f8b\u6a21\u5f0f","text":"<p>\u6709\u65f6\u5728\u6574\u4e2a\u7a0b\u5e8f\u4e2d\uff0c\u540c\u4e00\u4e2a\u7c7b\u59cb\u7ec8\u53ea\u4f1a\u6709\u4e00\u4e2a\u5bf9\u8c61\u6765\u8fdb\u884c\u64cd\u4f5c\uff0c\u5982\u6570\u636e\u5e93\u8fde\u63a5\u7c7b\uff0c\u53ea\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\u6216\u4f7f\u7528\u9759\u6001\u65b9\u6cd5\u8fdb\u884c\u64cd\u4f5c\u5373\u53ef\uff0c\u6ca1\u5fc5\u8981\u521b\u5efa\u591a\u4e2a\u5bf9\u8c61\u3002</p>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_16","title":"\u997f\u6c49\u5f0f\u5355\u4f8b","text":"Java<pre><code>public class Singleton {\n    private final static Singleton INSTANCE = new instance();\n\n    private Singleton() {}\n\n    public static Singleton getInstance() {\n        return INSTANCE;\n    }\n}\n</code></pre> <p>\u5f53\u6211\u4eec\u9700\u8981\u83b7\u53d6\u5bf9\u8c61\u65f6\uff0c\u901a\u8fc7 <code>getInstance()</code> \u65b9\u6cd5\u6765\u83b7\u53d6\u552f\u4e00\u7684\u5bf9\u8c61\u3002</p>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_17","title":"\u61d2\u6c49\u5f0f\u5355\u4f8b","text":"<p>\u5e76\u4e0d\u4e00\u5f00\u59cb\u5c31\u521b\u5efa\u5bf9\u8c61\uff0c\u800c\u662f\u5728\u7b2c\u4e00\u6b21\u4f7f\u7528\u7684\u65f6\u5019\u624d\u521b\u5efa\u3002</p> Java<pre><code>public class Singleton {\n    private final static Singleton INSTANCE;\n\n    private Singleton() {}\n\n    public static Singleton getInstance() {\n        if (INSTANCE == null) {\n            INSTANCE = new Singleton();\n        }\n        return INSTANCE;\n    }\n}\n</code></pre> <p>\u8fd9\u6837\u505a\u867d\u7136\u80fd\u591f\u8282\u7701\u4e00\u5b9a\u8d44\u6e90\uff0c\u4f46\u662f\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u53ef\u80fd\u4f1a\u51fa\u73b0\u95ee\u9898\u3002</p> <p>\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u7684\u95ee\u9898 \u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\uff0c\u4e0a\u8ff0\u5b9e\u73b0\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4ee5\u4e0b\u95ee\u9898\uff1a</p> <ol> <li>\u7ade\u6001\u6761\u4ef6\uff08Race Condition\uff09 \u5f53\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8c03\u7528 getInstance () \u65b9\u6cd5\u65f6\uff0c\u53ef\u80fd\u4f1a\u540c\u65f6\u8fdb\u5165 if (instance == null) \u7684\u5224\u65ad\u3002</li> </ol> <p>\u5982\u679c\u6b64\u65f6 instance \u4e3a null\uff0c\u591a\u4e2a\u7ebf\u7a0b\u90fd\u4f1a\u6267\u884c instance = new LazySingleton ()\uff0c\u4ece\u800c\u5bfc\u81f4\u521b\u5efa\u591a\u4e2a\u5b9e\u4f8b\u3002</p> <ol> <li>\u5b9e\u4f8b\u4e0d\u4e00\u81f4 \u7531\u4e8e\u7ade\u6001\u6761\u4ef6\u7684\u5b58\u5728\uff0c\u4e0d\u540c\u7ebf\u7a0b\u53ef\u80fd\u4f1a\u83b7\u53d6\u5230\u4e0d\u540c\u7684\u5b9e\u4f8b\uff0c\u8fd9\u8fdd\u53cd\u4e86\u5355\u4f8b\u6a21\u5f0f\u7684\u552f\u4e00\u6027\u8981\u6c42\u3002</li> </ol> <p>\u793a\u4f8b\u573a\u666f \u5047\u8bbe\u6709\u4e24\u4e2a\u7ebf\u7a0b T 1 \u548c T 2 \u540c\u65f6\u8c03\u7528 getInstance () \u65b9\u6cd5\uff1a</p> <p>T 1 \u8fdb\u5165 getInstance () \u65b9\u6cd5\uff0c\u5224\u65ad instance == null \u4e3a true\uff0c\u51c6\u5907\u6267\u884c instance = new LazySingleton ()\u3002</p> <p>\u5728 T 1 \u6267\u884c new LazySingleton () \u4e4b\u524d\uff0cT 2 \u4e5f\u8fdb\u5165 getInstance () \u65b9\u6cd5\uff0c\u5224\u65ad instance == null \u4e5f\u4e3a true\u3002</p> <p>T 1 \u548c T 2 \u90fd\u4f1a\u6267\u884c new LazySingleton ()\uff0c\u4ece\u800c\u521b\u5efa\u4e24\u4e2a\u4e0d\u540c\u7684\u5b9e\u4f8b\u3002</p> <p>\u89e3\u51b3\u65b9\u6cd5 \u4e3a\u4e86\u89e3\u51b3\u61d2\u6c49\u5f0f\u5355\u4f8b\u6a21\u5f0f\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u91c7\u7528\u4ee5\u4e0b\u65b9\u6cd5\uff1a</p> <ol> <li>\u52a0\u9501\uff08Synchronized\uff09 \u5728 getInstance () \u65b9\u6cd5\u4e0a\u52a0\u9501\uff0c\u786e\u4fdd\u540c\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u6267\u884c\u521b\u5efa\u5b9e\u4f8b\u7684\u4ee3\u7801\uff1a</li> </ol> <p>Java \u590d\u5236 Public class LazySingleton {     Private static LazySingleton instance;</p> Text Only<pre><code>private LazySingleton() {\n    // \u79c1\u6709\u6784\u9020\u51fd\u6570\n}\n\npublic static synchronized LazySingleton getInstance() {\n    if (instance == null) {\n        instance = new LazySingleton();\n    }\n    return instance;\n}\n</code></pre> <p>} \u4f18\u70b9\uff1a\u7b80\u5355\u76f4\u63a5\uff0c\u786e\u4fdd\u7ebf\u7a0b\u5b89\u5168\u3002</p> <p>\u7f3a\u70b9\uff1a\u6bcf\u6b21\u8c03\u7528 getInstance () \u65b9\u6cd5\u65f6\u90fd\u4f1a\u52a0\u9501\uff0c\u6027\u80fd\u8f83\u5dee\u3002</p> <ol> <li>\u53cc\u91cd\u68c0\u67e5\u9501\uff08Double-Checked Locking\uff09 \u5728\u52a0\u9501\u7684\u57fa\u7840\u4e0a\uff0c\u901a\u8fc7\u53cc\u91cd\u68c0\u67e5\u6765\u51cf\u5c11\u52a0\u9501\u7684\u6b21\u6570\uff1a</li> </ol> <p>Java \u590d\u5236 Public class LazySingleton {     Private static volatile LazySingleton instance;</p> Text Only<pre><code>private LazySingleton() {\n    // \u79c1\u6709\u6784\u9020\u51fd\u6570\n}\n\npublic static LazySingleton getInstance() {\n    if (instance == null) {\n        synchronized (LazySingleton.class) {\n            if (instance == null) {\n                instance = new LazySingleton();\n            }\n        }\n    }\n    return instance;\n}\n</code></pre> <p>} \u4f18\u70b9\uff1a\u53ea\u6709\u5728\u7b2c\u4e00\u6b21\u521b\u5efa\u5b9e\u4f8b\u65f6\u52a0\u9501\uff0c\u540e\u7eed\u8c03\u7528\u4e0d\u9700\u8981\u52a0\u9501\uff0c\u6027\u80fd\u8f83\u597d\u3002</p> <p>\u6ce8\u610f\uff1ainstance \u9700\u8981\u4f7f\u7528 volatile \u5173\u952e\u5b57\uff0c\u7981\u6b62\u6307\u4ee4\u91cd\u6392\u5e8f\uff0c\u786e\u4fdd\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u7684\u53ef\u89c1\u6027\u3002</p> <ol> <li>\u9759\u6001\u5185\u90e8\u7c7b\uff08Initialization-on-demand Holder Idiom\uff09 \u5229\u7528\u7c7b\u52a0\u8f7d\u673a\u5236\u6765\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\uff1a</li> </ol> <p>Java \u590d\u5236 Public class LazySingleton {     Private LazySingleton () {         // \u79c1\u6709\u6784\u9020\u51fd\u6570     }</p> Text Only<pre><code>private static class SingletonHolder {\n    private static final LazySingleton INSTANCE = new LazySingleton();\n}\n\npublic static LazySingleton getInstance() {\n    return SingletonHolder.INSTANCE;\n}\n</code></pre> <p>} \u4f18\u70b9\uff1a\u7ebf\u7a0b\u5b89\u5168\uff0c\u5ef6\u8fdf\u52a0\u8f7d\uff0c\u6027\u80fd\u597d\u3002</p> <p>\u539f\u7406\uff1a\u9759\u6001\u5185\u90e8\u7c7b\u5728\u7b2c\u4e00\u6b21\u88ab\u5f15\u7528\u65f6\u624d\u4f1a\u52a0\u8f7d\uff0c\u4ece\u800c\u4fdd\u8bc1\u5b9e\u4f8b\u7684\u552f\u4e00\u6027\u3002</p> <ol> <li>\u679a\u4e3e\uff08Enum\uff09 \u4f7f\u7528\u679a\u4e3e\u5b9e\u73b0\u5355\u4f8b\u6a21\u5f0f\uff1a</li> </ol> <p>Java \u590d\u5236 Public enum LazySingleton {     INSTANCE;</p> Text Only<pre><code>public void doSomething() {\n    // \u4e1a\u52a1\u65b9\u6cd5\n}\n</code></pre> <p>} \u4f18\u70b9\uff1a\u7ebf\u7a0b\u5b89\u5168\uff0c\u9632\u6b62\u53cd\u5c04\u653b\u51fb\uff0c\u4ee3\u7801\u7b80\u6d01\u3002</p> <p>\u7f3a\u70b9\uff1a\u4e0d\u591f\u7075\u6d3b\uff0c\u65e0\u6cd5\u5ef6\u8fdf\u52a0\u8f7d\u3002</p> <p>\u603b\u7ed3 \u61d2\u6c49\u5f0f\u5355\u4f8b\u6a21\u5f0f\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u53ef\u80fd\u4f1a\u51fa\u73b0\u95ee\u9898\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u7ade\u6001\u6761\u4ef6\u5bfc\u81f4\u521b\u5efa\u591a\u4e2a\u5b9e\u4f8b\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u91c7\u7528\u4ee5\u4e0b\u65b9\u6cd5\uff1a</p> <p>\u52a0\u9501\uff08synchronized\uff09\u3002</p> <p>\u53cc\u91cd\u68c0\u67e5\u9501\uff08Double-Checked Locking\uff09\u3002</p> <p>\u9759\u6001\u5185\u90e8\u7c7b\uff08Initialization-on-demand Holder Idiom\uff09\u3002</p> <p>\u679a\u4e3e\uff08Enum\uff09\u3002</p> <p>\u5176\u4e2d\uff0c\u9759\u6001\u5185\u90e8\u7c7b\u548c\u679a\u4e3e\u662f\u5b9e\u73b0\u5355\u4f8b\u6a21\u5f0f\u7684\u63a8\u8350\u65b9\u5f0f\uff0c\u5b83\u4eec\u65e2\u80fd\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\uff0c\u53c8\u80fd\u5b9e\u73b0\u5ef6\u8fdf\u52a0\u8f7d\u3002</p>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_18","title":"\u539f\u578b\u6a21\u5f0f","text":"<p>\u539f\u578b\u6a21\u5f0f\u4f7f\u7528\u539f\u578b\u793a\u4f8b\u6307\u5b9a\u5f85\u521b\u5efa\u5bf9\u8c61\u7684\u7c7b\u578b\uff0c\u5e76\u4e14\u901a\u8fc7\u590d\u5236\u8fd9\u4e2a\u539f\u578b\u6765\u521b\u5efa\u65b0\u7684\u5bf9\u8c61\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u539f\u578b\u5bf9\u8c61\u4f5c\u4e3a\u6a21\u677f\uff0c\u901a\u8fc7\u514b\u9686\u64cd\u4f5c\uff0c\u6765\u4ea7\u751f\u66f4\u591a\u7684\u5bf9\u8c61\u3002</p> <p>\u8981\u6ce8\u610f\u6d45\u62f7\u8d1d\u548c\u6df1\u62f7\u8d1d\u7684\u533a\u522b\u3002\u5bf9\u4e8e\u5f15\u7528\u7c7b\u578b\uff0c\u6d45\u62f7\u8d1d\u53ea\u80fd\u590d\u5236\u5185\u5c42\u5bf9\u8c61\u7684\u5730\u5740\uff0c\u800c\u6df1\u62f7\u8d1d\u76f8\u5f53\u4e8e\u4f7f\u7528\u5176\u503c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5f15\u7528\u5bf9\u8c61\u3002</p>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_19","title":"\u7ed3\u6784\u578b\u8bbe\u8ba1\u6a21\u5f0f","text":"","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_20","title":"\u7c7b/\u5bf9\u8c61\u9002\u914d\u5668\u6a21\u5f0f","text":"<p>\u65e5\u5e38\u751f\u6d3b\u4e2d\uff0c\u7ecf\u5e38\u4f1a\u9047\u5230\u6570\u636e\u7ebf\u63a5\u53e3\u4e0d\u5339\u914d\u6216\u5145\u7535\u5668\u529f\u7387\u4e0d\u5408\u9002\u7684\u95ee\u9898\uff0c\u9700\u8981\u7528\u62d3\u5c55\u575e\u3001\u8f6c\u63a5\u5934\u3001\u7535\u6e90\u9002\u914d\u5668\u7b49\u5de5\u5177\u89e3\u51b3\u3002\u5728\u7a0b\u5e8f\u5f00\u53d1\u4e2d\u4e5f\u4f1a\u9047\u5230\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u5982\uff1a</p> TestSupplier<pre><code>public class TestSupplier { // \u624b\u673a\u4f9b\u5e94\u5546\n    public String doSupply() {\n        return \"iPhone 16e\";\n    }\n}\n</code></pre> Main<pre><code>public class Main {\n    public static void main(String[] args) {\n        TestSupplier supplier = new TestSupplier();\n          test( ? );   //\u6211\u4eec\u6ca1\u6709Target\u7c7b\u578b\u7684\u624b\u673a\u4f9b\u5e94\u5546\uff0c\u53ea\u6709\u5176\u4ed6\u7684\uff0c\u90a3\u8fd9\u91cc\u8be5\u586b\u4e2a\u5565\n    }\n\n    public static void test(Target target) { // \u73b0\u5728\u6211\u4eec\u9700\u8981\u8c03\u7528test\u65b9\u6cd5\uff0c\u4f46\u662ftest\u65b9\u6cd5\u9700\u8981Target\u7c7b\u578b\u7684\u624b\u673a\u4f9b\u5e94\u5546\n        System.out.println(\"\u6210\u529f\u5f97\u5230\uff1a\"+target.supply());\n    }\n}\n</code></pre> Target<pre><code>public interface Target { // \u73b0\u5728\u7684\u624b\u673a\u4f9b\u5e94\u5546\uff0c\u5e76\u4e0d\u662ftest\u65b9\u6cd5\u6240\u9700\u8981\u7684\u90a3\u79cd\u7c7b\u578b\n    String supply();\n}\n</code></pre> <p>\u8fd9\u662f\u5c31\u53ef\u4ee5\u4f7f\u7528\u9002\u914d\u5668\u6a21\u5f0f\u6765\u89e3\u51b3\u3002</p>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_21","title":"\u7c7b\u9002\u914d\u5668\u6a21\u5f0f","text":"<p>\u521b\u5efa\u4e00\u4e2a\u9002\u914d\u5668\u7c7b\uff1a</p> TestAdapter<pre><code>// \u8ba9\u9002\u914d\u5668\u7ee7\u627fTestSupplier\u5e76\u5b9e\u73b0Target\u63a5\u53e3\npublic class TestAdapter extends TestSupplier implements Target {\n    @Override \n    public String supply() {\n        return super.supply();\n    }\n}\n</code></pre> <p>\u8fd9\u6837\uff0c\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a Target \u7c7b\u578b\u7684\u5b9e\u73b0\u7c7b\uff0c\u5e76\u4e14\u91c7\u7528\u7684\u662f TestSupplier \u63d0\u4f9b\u7684\u5b9e\u73b0\u3002</p> Main<pre><code>public class Main {\n    public static void main(String[] args) {\n        TestAdapter adapter = new TestAdapter();\n        test(adapter);\n    }\n\n    public static void test(Target target) {\n        System.out.println(\"\u6210\u529f\u5f97\u5230\uff1a\"+target.supply());\n    }\n}\n</code></pre> <p>\u4f46\u8fd9\u79cd\u5b9e\u73b0\u65b9\u5f0f\u4f1a\u5360\u7528\u4e00\u4e2a\u7ee7\u627f\u5751\u4f4d\uff0c\u7531\u4e8e Java \u4e0d\u652f\u6301\u591a\u7ee7\u627f\uff0c\u90a3\u4e48\u5982\u679c Target \u4e0d\u662f\u63a5\u53e3\u800c\u662f\u62bd\u8c61\u7c7b\u7684\u8bdd\uff0c\u5c31\u4e0d\u80fd\u5b9e\u73b0\u4e86\u3002\u540c\u65f6\uff0c\u6839\u636e\u590d\u7528\u539f\u5219\uff0c\u6211\u4eec\u5e94\u8be5\u66f4\u591a\u7684\u901a\u8fc7\u5408\u6210\u7684\u65b9\u5f0f\u53bb\u5b9e\u73b0\u529f\u80fd\uff0c\u4e8e\u662f\u6709\u4e86\u5bf9\u8c61\u9002\u914d\u5668\u3002</p>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_22","title":"\u5bf9\u8c61\u9002\u914d\u5668","text":"TestAdapter<pre><code>public class TestAdapter implements Target {\n\n    TestSupplier supplier;\n\n    public TestAdapter(TestSupplier supplier) {\n        this.supplier = supplier;\n    }\n\n    @Override\n    public String supply() {\n        return supplier.doSupply();\n    }\n}\n</code></pre> <p>\u8fd9\u6837\uff0c\u901a\u8fc7\u7ec4\u5408\u7684\u65b9\u5f0f\u628a\u5bf9\u8c61\u5b58\u653e\u5728\u4e86 TestAdapter \u4e2d\uff0c\u7136\u540e\u501f\u52a9\u5b58\u653e\u7684\u5bf9\u8c61\u8c03\u7528\u5177\u4f53\u5b9e\u73b0\u3002</p>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_23","title":"\u6865\u63a5\u6a21\u5f0f","text":"<p>\u6865\u63a5\u6a21\u5f0f\u7684\u6838\u5fc3\u601d\u60f3\u662f\u901a\u8fc7\u7ec4\u5408\u800c\u4e0d\u662f\u7ee7\u627f\u6765\u89e3\u8026\u62bd\u8c61\u548c\u5b9e\u73b0\uff0c\u7528\u4e8e\u89e3\u51b3\u591a\u5c42\u7ee7\u627f\u5e26\u6765\u7684\u590d\u6742\u6027\uff0c\u907f\u514d\u7c7b\u7206\u70b8\u95ee\u9898\u3002\u9002\u7528\u4e8e\u9700\u8981\u5c06\u62bd\u8c61\u548c\u5b9e\u73b0\u89e3\u8026\u7684\u573a\u666f\uff0c\u4f8b\u5982\u4e0d\u540c\u5e73\u53f0\u4e0a\u7684\u56fe\u5f62\u7ed8\u5236\u3001\u4e0d\u540c\u6570\u636e\u5e93\u7684\u8bbf\u95ee\u7b49\u3002</p> <p>\u5728\u5b66\u4e60\u6865\u63a5\u6a21\u5f0f\u7684\u65f6\u5019\uff0c\u6211\u60f3\u8fd9\u4e0d\u662f\u548c\u679a\u4e3e\u7c7b\u6709\u70b9\u76f8\u4f3c\u5417\uff1f\u4f46\u662f\u4ed4\u7ec6\u601d\u8003\uff0c\u8fd8\u662f\u6709\u5f88\u591a\u533a\u522b\u7684\uff1a</p> <p>1 \u8bbe\u8ba1\u76ee\u7684</p> <ul> <li>\u6865\u63a5\u6a21\u5f0f\uff1a<ul> <li>\u662f\u4e00\u79cd\u7ed3\u6784\u578b\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u7528\u4e8e\u5c06\u62bd\u8c61\u90e8\u5206\u548c\u5b9e\u73b0\u90e8\u5206\u5206\u79bb\uff0c\u4f7f\u5b83\u4eec\u53ef\u4ee5\u72ec\u7acb\u53d8\u5316\u3002</li> <li>\u6838\u5fc3\u601d\u60f3\u662f\u901a\u8fc7\u7ec4\u5408\u800c\u4e0d\u662f\u7ee7\u627f\u6765\u89e3\u8026\u62bd\u8c61\u548c\u5b9e\u73b0\u3002</li> </ul> </li> <li>\u679a\u4e3e\u7c7b\uff1a<ul> <li>\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u7c7b\uff0c\u7528\u4e8e\u5b9a\u4e49\u4e00\u7ec4\u56fa\u5b9a\u7684\u5e38\u91cf\u3002</li> <li>\u6838\u5fc3\u601d\u60f3\u662f\u63d0\u4f9b\u4e00\u79cd\u7c7b\u578b\u5b89\u5168\u7684\u65b9\u5f0f\u6765\u8868\u793a\u6709\u9650\u7684\u3001\u9884\u5b9a\u4e49\u7684\u503c\u3002</li> </ul> </li> </ul> <p>2 \u4e3b\u8981\u7528\u9014</p> <ul> <li>\u6865\u63a5\u6a21\u5f0f\uff1a<ul> <li>\u7528\u4e8e\u89e3\u51b3\u591a\u5c42\u7ee7\u627f\u5e26\u6765\u7684\u590d\u6742\u6027\uff0c\u907f\u514d\u7c7b\u7206\u70b8\u95ee\u9898\u3002</li> <li>\u9002\u7528\u4e8e\u9700\u8981\u5c06\u62bd\u8c61\u548c\u5b9e\u73b0\u89e3\u8026\u7684\u573a\u666f\uff0c\u4f8b\u5982\u4e0d\u540c\u5e73\u53f0\u4e0a\u7684\u56fe\u5f62\u7ed8\u5236\u3001\u4e0d\u540c\u6570\u636e\u5e93\u7684\u8bbf\u95ee\u7b49\u3002</li> </ul> </li> <li>\u679a\u4e3e\u7c7b\uff1a<ul> <li>\u7528\u4e8e\u5b9a\u4e49\u4e00\u7ec4\u56fa\u5b9a\u7684\u5e38\u91cf\uff0c\u4f8b\u5982\u72b6\u6001\u3001\u7c7b\u578b\u3001\u6a21\u5f0f\u7b49\u3002</li> <li>\u9002\u7528\u4e8e\u9700\u8981\u9650\u5236\u53d8\u91cf\u53d6\u503c\u8303\u56f4\u7684\u573a\u666f\uff0c\u4f8b\u5982\u661f\u671f\u51e0\u3001\u989c\u8272\u3001\u64cd\u4f5c\u7c7b\u578b\u7b49\u3002</li> </ul> </li> </ul> <p>3 \u8bbe\u8ba1\u601d\u60f3</p> <ul> <li>\u6865\u63a5\u6a21\u5f0f\uff1a<ul> <li>\u5f3a\u8c03\u62bd\u8c61\u4e0e\u5b9e\u73b0\u7684\u5206\u79bb\uff0c\u901a\u8fc7\u7ec4\u5408\u5c06\u62bd\u8c61\u90e8\u5206\u548c\u5b9e\u73b0\u90e8\u5206\u8fde\u63a5\u8d77\u6765\u3002</li> <li>\u62bd\u8c61\u90e8\u5206\u548c\u5b9e\u73b0\u90e8\u5206\u53ef\u4ee5\u72ec\u7acb\u6269\u5c55\uff0c\u4e92\u4e0d\u5f71\u54cd\u3002</li> </ul> </li> <li>\u679a\u4e3e\u7c7b\uff1a<ul> <li>\u5f3a\u8c03\u7c7b\u578b\u5b89\u5168\u548c\u4ee3\u7801\u7b80\u6d01\u6027\uff0c\u901a\u8fc7\u679a\u4e3e\u5e38\u91cf\u6765\u9650\u5236\u53d8\u91cf\u7684\u53d6\u503c\u8303\u56f4\u3002</li> <li>\u679a\u4e3e\u7c7b\u672c\u8eab\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u7c7b\u578b\uff0c\u53ef\u4ee5\u5305\u542b\u65b9\u6cd5\u548c\u5c5e\u6027\u3002</li> </ul> </li> </ul> <p>4 \u6269\u5c55\u6027</p> <ul> <li>\u6865\u63a5\u6a21\u5f0f\uff1a<ul> <li>\u62bd\u8c61\u90e8\u5206\u548c\u5b9e\u73b0\u90e8\u5206\u53ef\u4ee5\u72ec\u7acb\u6269\u5c55\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u589e\u52a0\u65b0\u7684\u5f62\u72b6\uff08\u62bd\u8c61\u90e8\u5206\uff09\u6216\u65b0\u7684\u7ed8\u5236\u65b9\u5f0f\uff08\u5b9e\u73b0\u90e8\u5206\uff09\uff0c\u800c\u4e0d\u5f71\u54cd\u73b0\u6709\u4ee3\u7801\u3002</li> </ul> </li> <li>\u679a\u4e3e\u7c7b\uff1a<ul> <li>\u679a\u4e3e\u5e38\u91cf\u662f\u56fa\u5b9a\u7684\uff0c\u4e0d\u80fd\u52a8\u6001\u6269\u5c55\u3002\u5982\u679c\u9700\u8981\u589e\u52a0\u65b0\u7684\u5e38\u91cf\uff0c\u5fc5\u987b\u4fee\u6539\u679a\u4e3e\u7c7b\u7684\u5b9a\u4e49\u3002</li> </ul> </li> </ul> <p>5 \u7ebf\u7a0b\u5b89\u5168\u6027</p> <ul> <li>\u6865\u63a5\u6a21\u5f0f\uff1a<ul> <li>\u7ebf\u7a0b\u5b89\u5168\u6027\u53d6\u51b3\u4e8e\u5177\u4f53\u7684\u5b9e\u73b0\u3002</li> <li>\u5982\u679c\u5b9e\u73b0\u90e8\u5206\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u5219\u6865\u63a5\u6a21\u5f0f\u4e5f\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u3002</li> </ul> </li> <li>\u679a\u4e3e\u7c7b\uff1a<ul> <li>\u679a\u4e3e\u5e38\u91cf\u662f\u5929\u7136\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u56e0\u4e3a\u679a\u4e3e\u5b9e\u4f8b\u5728\u7c7b\u52a0\u8f7d\u65f6\u5c31\u5df2\u7ecf\u521b\u5efa\uff0c\u5e76\u4e14\u662f\u4e0d\u53ef\u53d8\u7684\u3002</li> </ul> </li> </ul> <p>6 \u9002\u7528\u573a\u666f</p> <ul> <li>\u6865\u63a5\u6a21\u5f0f\uff1a\u9002\u7528\u4e8e\u9700\u8981\u5c06\u62bd\u8c61\u548c\u5b9e\u73b0\u89e3\u8026\u7684\u573a\u666f\u3002<ul> <li>\u4e0d\u540c\u5e73\u53f0\u4e0a\u7684\u56fe\u5f62\u7ed8\u5236\u3002</li> <li>\u4e0d\u540c\u6570\u636e\u5e93\u7684\u8bbf\u95ee\u3002</li> <li>\u4e0d\u540c\u6d88\u606f\u683c\u5f0f\u7684\u5904\u7406\u3002</li> </ul> </li> <li>\u679a\u4e3e\u7c7b\uff1a\u9002\u7528\u4e8e\u9700\u8981\u5b9a\u4e49\u4e00\u7ec4\u56fa\u5b9a\u5e38\u91cf\u7684\u573a\u666f\u3002<ul> <li>\u72b6\u6001\uff08\u5982\u8ba2\u5355\u72b6\u6001\u3001\u4efb\u52a1\u72b6\u6001\uff09\u3002</li> <li>\u7c7b\u578b\uff08\u5982\u989c\u8272\u3001\u6587\u4ef6\u7c7b\u578b\uff09\u3002</li> <li>\u6a21\u5f0f\uff08\u5982\u5355\u4f8b\u6a21\u5f0f\u3001\u7b56\u7565\u6a21\u5f0f\uff09\u3002</li> </ul> </li> </ul> <p>::: code-tabs @tab \u6865\u63a5\u6a21\u5f0f Java<pre><code>// \u5b9e\u73b0\u90e8\u5206\u63a5\u53e3\ninterface DrawAPI {\n    void drawCircle(int radius, int x, int y);\n}\n\n// \u5177\u4f53\u5b9e\u73b0\nclass RedCircle implements DrawAPI {\n    @Override\n    public void drawCircle(int radius, int x, int y) {\n        System.out.println(\"Drawing Red Circle: \" + radius + \", \" + x + \", \" + y);\n    }\n}\n\nclass GreenCircle implements DrawAPI {\n    @Override\n    public void drawCircle(int radius, int x, int y) {\n        System.out.println(\"Drawing Green Circle: \" + radius + \", \" + x + \", \" + y);\n    }\n}\n\n// \u62bd\u8c61\u90e8\u5206\nabstract class Shape {\n    protected DrawAPI drawAPI;\n\n    protected Shape(DrawAPI drawAPI) {\n        this.drawAPI = drawAPI;\n    }\n\n    public abstract void draw();\n}\n\n// \u5177\u4f53\u62bd\u8c61\nclass Circle extends Shape {\n    private int x, y, radius;\n\n    public Circle(int x, int y, int radius, DrawAPI drawAPI) {\n        super(drawAPI);\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n    }\n\n    @Override\n    public void draw() {\n        drawAPI.drawCircle(radius, x, y);\n    }\n}\n\n// \u4f7f\u7528\npublic class Client {\n    public static void main(String[] args) {\n        Shape redCircle = new Circle(100, 100, 10, new RedCircle());\n        Shape greenCircle = new Circle(200, 200, 20, new GreenCircle());\n\n        redCircle.draw();\n        greenCircle.draw();\n    }\n}\n</code></pre></p> <p>@tab \u679a\u4e3e\u7c7b Java<pre><code>enum Day {\n    MONDAY,\n    TUESDAY,\n    WEDNESDAY,\n    THURSDAY,\n    FRIDAY,\n    SATURDAY,\n    SUNDAY;\n\n    public void printDay() {\n        System.out.println(\"Today is \" + this);\n    }\n}\n\n// \u4f7f\u7528\npublic class Client {\n    public static void main(String[] args) {\n        Day today = Day.MONDAY;\n        today.printDay(); // \u8f93\u51fa: Today is MONDAY\n    }\n}\n</code></pre> :::</p> <p>\u901a\u8fc7\u6865\u63a5\u6a21\u5f0f\uff0c\u4f7f\u5f97\u62bd\u8c61\u548c\u5b9e\u73b0\u53ef\u4ee5\u6cbf\u7740\u5404\u81ea\u7684\u7ef4\u5ea6\u6765\u8fdb\u884c\u53d8\u5316\uff0c\u4e0d\u518d\u662f\u56fa\u5b9a\u7684\u7ed1\u5b9a\u5173\u7cfb\u3002</p>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_24","title":"\u7ec4\u5408\u6a21\u5f0f","text":"<p>\u7ec4\u5408\u6a21\u5f0f\u5b9e\u9645\u4e0a\u5c31\u662f\u5c06\u591a\u4e2a\u7ec4\u4ef6\u8fdb\u884c\u7ec4\u5408\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u5bf9\u4ed6\u4eec\u8fdb\u884c\u4e00\u81f4\u6027\u5904\u7406\u3002</p> <p>\u6bd4\u5982\u7cfb\u7edf\u4e2d\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u4e00\u4e2a\u6587\u4ef6\u5939\u4e2d\u53ef\u4ee5\u6709\u591a\u4e2a\u6587\u4ef6\u5939\u6216\u6587\u4ef6\uff0c\u50cf\u4e00\u4e2a\u6811\u5f62\u7ed3\u6784\u3002\u7ec4\u5408\u6a21\u5f0f\u5c31\u662f\u5bf9\u6811\u4e0a\u7684\u8282\u70b9\u8fdb\u884c\u9012\u5f52\u5904\u7406\uff0c\u6bd4\u5982\u7ed9\u6240\u6709\u6587\u4ef6\u7684\u6587\u4ef6\u540d\u52a0\u4e00\u4e2a\u524d\u7f00\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u7ec4\u5408\u6a21\u5f0f\u6765\u5b9e\u73b0\u3002</p> <p>::: code-tabs @tab \u7ec4\u4ef6\u62bd\u8c61 Java<pre><code>// \u9996\u5148\u521b\u5efa\u4e00\u4e2a\u7ec4\u4ef6\u62bd\u8c61\uff0c\u7ec4\u4ef6\u53ef\u4ee5\u5305\u542b\u7ec4\u4ef6\uff0c\u7ec4\u4ef6\u6709\u81ea\u5df1\u7684\u4e1a\u52a1\u65b9\u6cd5\npublic abstract class Component {\n    public abstract void addComponent(Component component);    // \u6dfb\u52a0\u5b50\u7ec4\u4ef6\n    public abstract void removeComponent(Component component);   // \u5220\u9664\u5b50\u7ec4\u4ef6\n    public abstract Component getChild(int index);   // \u83b7\u53d6\u5b50\u7ec4\u4ef6\n    public abstract void test();   // \u6267\u884c\u5bf9\u5e94\u7684\u4e1a\u52a1\u65b9\u6cd5\uff0c\u6bd4\u5982\u4fee\u6539\u6587\u4ef6\u540d\u79f0\n}\n</code></pre></p> <p>@tab \u6587\u4ef6\u5939\u5b9e\u73b0\u7c7b Java<pre><code>public class Directory extends Component {   // \u76ee\u5f55\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55\n\n    List&lt;Component&gt; child = new ArrayList&lt;&gt;();   // \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528List\u6765\u5b58\u653e\u76ee\u5f55\u4e2d\u7684\u5b50\u7ec4\u4ef6\n\n    @Override\n    public void addComponent(Component component) {\n        child.add(component);\n    }\n\n    @Override\n    public void removeComponent(Component component) {\n        child.remove(component);\n    }\n\n    @Override\n    public Component getChild(int index) {\n        return child.get(index);\n    }\n\n    @Override\n    public void test() {\n        child.forEach(Component::test);   // \u5c06\u7ee7\u7eed\u8c03\u7528\u6240\u6709\u5b50\u7ec4\u4ef6\u7684test\u65b9\u6cd5\u6267\u884c\u4e1a\u52a1\n    }\n}\n</code></pre></p> <p>@tab \u6587\u4ef6\u5b9e\u73b0\u7c7b Java<pre><code>public class File extends Component {   // \u6587\u4ef6\u5c31\u76f8\u5f53\u4e8e\u662f\u6811\u53f6\uff0c\u65e0\u6cd5\u518d\u7ee7\u7eed\u6dfb\u52a0\u5b50\u7ec4\u4ef6\u4e86\n\n    @Override\n    public void addComponent(Component component) {\n        throw new UnsupportedOperationException();   // \u4e0d\u652f\u6301\u8fd9\u4e9b\u64cd\u4f5c\u4e86\n    }\n\n    @Override\n    public void removeComponent(Component component) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public Component getChild(int index) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public void test() {\n        System.out.println(\"\u6587\u4ef6\u540d\u79f0\u4fee\u6539\u6210\u529f\uff01\"+this);   // \u5177\u4f53\u7684\u540d\u79f0\u4fee\u6539\u64cd\u4f5c\n    }\n}\n</code></pre></p> <p>@tab Main Java<pre><code>public static void main(String[] args) {\n    Directory outer = new Directory();   // \u65b0\u5efa\u4e00\u4e2a\u5916\u5c42\u76ee\u5f55\n    Directory inner = new Directory();   // \u65b0\u5efa\u4e00\u4e2a\u5185\u5c42\u76ee\u5f55\n    outer.addComponent(inner);\n    outer.addComponent(new File());   // \u5728\u5185\u5c42\u76ee\u5f55\u548c\u5916\u5c42\u76ee\u5f55\u90fd\u6dfb\u52a0\u70b9\u6587\u4ef6\n    inner.addComponent(new File());\n    inner.addComponent(new File());\n    outer.test();    // \u5f00\u59cb\u6267\u884c\u6587\u4ef6\u540d\u79f0\u4fee\u6539\u64cd\u4f5c\n}\n</code></pre> :::</p> <p>\u53d1\u73b0\u6700\u540e\u4f1a\u9012\u5f52\u5904\u7406\u6240\u6709\u6587\u4ef6\u3002</p>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_25","title":"\u88c5\u9970\u6a21\u5f0f","text":"<p>\u88c5\u9970\u6a21\u5f0f\uff0c\u53ef\u4ee5\u5bf9\u73b0\u6709\u7684\u7c7b\u8fdb\u884c\u4fee\u9970\u3002\u6838\u5fc3\u5728\u4e8e\u5728\u4e0d\u6539\u53d8\u4e00\u4e2a\u5bf9\u8c61\u672c\u8eab\u529f\u80fd\u7684\u57fa\u7840\u4e0a\uff0c\u7ed9\u5bf9\u8c61\u6dfb\u52a0\u989d\u5916\u7684\u884c\u4e3a\u3002\u5e76\u4e14\u8fd9\u662f\u901a\u8fc7\u7ec4\u5408\u800c\u4e0d\u662f\u7ee7\u627f\u5b8c\u6210\u7684\u3002</p> <p>\u88c5\u9970\u7c7b\u5c06\u88c5\u9970\u76ee\u6807\u7ec4\u5408\u5230\u7c7b\u4e2d\uff0c\u91cd\u5199\u57fa\u7c7b\u7684\u65b9\u6cd5\uff0c\u5728\u8c03\u7528\u57fa\u7c7b\u65b9\u6cd5\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u88c5\u9970\u3002</p> <p>::: code-tabs @tab \u9876\u5c42\u62bd\u8c61\u7c7b Java<pre><code>public abstract class Base {\n    public abstract void test();\n}\n</code></pre></p> <p>@tab \u5b9e\u73b0\u7c7b Java<pre><code>public class BaseImpl extends Base {\n    @Override\n    public void test() {\n        System.out.println(\"\u6211\u662f\u4e1a\u52a1\u65b9\u6cd5\");   // \u5177\u4f53\u7684\u4e1a\u52a1\u65b9\u6cd5\n    }\n}\n</code></pre></p> <p>@tab \u88c5\u9970\u7c7b Java<pre><code>public class Decorator extends Base {   // \u88c5\u9970\u8005\u9700\u8981\u5c06\u88c5\u9970\u76ee\u6807\u7ec4\u5408\u5230\u7c7b\u4e2d\n\n    protected Base base;\n\n    public Decorator(Base base) {\n        this.base = base;\n    }\n\n    @Override\n    public void test() {\n        base.test();    // \u8fd9\u91cc\u6682\u65f6\u8fd8\u662f\u4f7f\u7528\u76ee\u6807\u7684\u539f\u672c\u65b9\u6cd5\u5b9e\u73b0\n    }\n}\n</code></pre></p> <p>@tab \u88c5\u9970\u7c7b\u5b9e\u73b0 Java<pre><code>public class DecoratorImpl extends Decorator {\n\n    public DecoratorImpl(Base base) {\n        super(base);\n    }\n\n    @Override\n    public void test() {    // \u5bf9\u539f\u672c\u7684\u65b9\u6cd5\u8fdb\u884c\u88c5\u9970\uff0c\u53ef\u4ee5\u5728\u539f\u672c\u65b9\u6cd5\u5b9e\u73b0\u524d\u540e\u6dfb\u52a0\u989d\u5916\u64cd\u4f5c\n        System.out.println(\"\u88c5\u9970\u65b9\u6cd5\uff1a\u6211\u662f\u64cd\u4f5c\u524d\u903b\u8f91\");\n        super.test();\n        System.out.println(\"\u88c5\u9970\u65b9\u6cd5\uff1a\u6211\u662f\u64cd\u4f5c\u540e\u903b\u8f91\");\n    }\n}\n</code></pre> :::</p>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_26","title":"\u4ee3\u7406\u6a21\u5f0f","text":"<p>...</p>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_27","title":"\u884c\u4e3a\u578b\u8bbe\u8ba1\u6a21\u5f0f","text":"","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_28","title":"\u89e3\u91ca\u5668\u6a21\u5f0f","text":"<p>\u7528\u4e8e\u5b9a\u4e49\u8bed\u8a00\u7684\u8bed\u6cd5\u89c4\u5219\uff0c\u5e76\u63d0\u4f9b\u4e00\u4e2a\u89e3\u91ca\u5668\u6765\u89e3\u91ca\u8bed\u8a00\u4e2d\u7684\u53e5\u5b50\u3002\u5b83\u901a\u5e38\u7528\u4e8e\u5904\u7406\u4e00\u4e9b\u7b80\u5355\u7684\u8bed\u8a00\u6216\u8868\u8fbe\u5f0f\uff0c\u4f8b\u5982\u6570\u5b66\u8868\u8fbe\u5f0f\u3001\u6b63\u5219\u8868\u8fbe\u5f0f\u3001SQL \u67e5\u8be2\u7b49\u3002</p> <p>\u6838\u5fc3\u601d\u60f3</p> <ul> <li>\u5c06\u8bed\u8a00\u4e2d\u7684\u6bcf\u4e2a\u8bed\u6cd5\u89c4\u5219\u8868\u793a\u4e3a\u4e00\u4e2a\u7c7b\u3002</li> <li>\u901a\u8fc7\u7ec4\u5408\u8fd9\u4e9b\u7c7b\u6765\u6784\u5efa\u8bed\u6cd5\u6811\u3002</li> <li>\u63d0\u4f9b\u4e00\u4e2a\u89e3\u91ca\u5668\u6765\u904d\u5386\u8bed\u6cd5\u6811\u5e76\u6267\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\u3002</li> </ul>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_29","title":"\u6a21\u677f\u65b9\u6cd5\u6a21\u5f0f","text":"<p>\u5728\u7a0b\u5e8f\u4e2d\uff0c\u53ef\u80fd\u67d0\u4e9b\u64cd\u4f5c\u662f\u56fa\u5b9a\u7684\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u5728\u7c7b\u4e2d\u5bf9\u5e94\u65b9\u6cd5\u8fdb\u884c\u7f16\u5199\u3002\u4f46\u662f\u53ef\u80fd\u67d0\u4e9b\u64cd\u4f5c\u9700\u8981\u89c6\u60c5\u51b5\u800c\u5b9a\uff0c\u7531\u4e0d\u540c\u7684\u5b50\u7c7b\u5b9e\u73b0\u6765\u51b3\u5b9a\uff0c\u8fd9\u65f6\uff0c\u6211\u4eec\u5c31\u9700\u8981\u8ba9\u8fd9\u4e9b\u64cd\u4f5c\u7531\u5b50\u7c7b\u6765\u5ef6\u8fdf\u5b9e\u73b0\u4e86\uff0c\u5c31\u9700\u8981\u7528\u5230\u6a21\u677f\u65b9\u6cd5\u6a21\u5f0f\u3002</p> <p>\u4ee5\u533b\u9662\u6302\u53f7\u770b\u75c5\u4e3a\u4f8b\uff1a</p> Java<pre><code>/**\n * \u62bd\u8c61\u8bca\u65ad\u65b9\u6cd5\uff0c\u56e0\u4e3a\u73b0\u5728\u53ea\u77e5\u9053\u6302\u53f7\u548c\u770b\u533b\u751f\u662f\u56fa\u5b9a\u6a21\u5f0f\uff0c\u5269\u4e0b\u7684\u5f00\u5904\u65b9\u548c\u62ff\u836f\u90fd\u662f\u4e0d\u786e\u5b9a\u7684\n */\npublic abstract class AbstractDiagnosis {\n\n    public void test(){\n        System.out.println(\"\u4eca\u5929\u5934\u597d\u6655\uff0c\u4e0d\u60f3\u8d77\u5e8a\uff0c\u5f00\u6446\uff0c\u5148\u8ddf\u516c\u53f8\u8bf7\u4e2a\u5047\");\n        System.out.println(\"\u53bb\u533b\u9662\u770b\u75c5\u4e86~\");\n        System.out.println(\"1 &gt;&gt; \u5148\u6302\u53f7\");\n        System.out.println(\"2 &gt;&gt; \u7b49\u5f85\u53eb\u53f7\");\n        //\u7531\u4e8e\u73b0\u5728\u4e0d\u77e5\u9053\u8be5\u5f00\u4ec0\u4e48\u5904\u65b9\uff0c\u6240\u4ee5\u53ea\u80fd\u5148\u5b9a\u4e49\u4e00\u4e0b\u884c\u4e3a\uff0c\u7136\u540e\u5177\u4f53\u7531\u5b50\u7c7b\u5b9e\u73b0\n          //\u5927\u81f4\u7684\u6d41\u7a0b\u5148\u5b9a\u4e49\u597d\u5c31\u884c\n        this.prescribe();\n        this.medicine();  //\u5f00\u836f\u540c\u7406\n    }\n\n    public abstract void prescribe();   //\u5f00\u5904\u65b9\u64cd\u4f5c\u6839\u636e\u5177\u4f53\u75c5\u75c7\u51b3\u5b9a\u4e86\n\n    public abstract void medicine();   //\u62ff\u836f\u4e5f\u662f\u6839\u636e\u5177\u4f53\u7684\u5904\u65b9\u53bb\u62ff\n}\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u5b9a\u4e49\u597d\u4e86\u62bd\u8c61\u65b9\u6cd5\uff0c\u53ea\u662f\u5c06\u5177\u4f53\u7684\u6d41\u7a0b\u5148\u5b9a\u4e49\u51fa\u6765\u4e86\uff0c\u4f46\u662f\u90e8\u5206\u65b9\u6cd5\u9700\u8981\u6839\u636e\u5b9e\u73b0\u51b3\u5b9a\uff1a</p> Java<pre><code>/**\n * \u611f\u5192\u76f8\u5173\u7684\u5177\u4f53\u5b9e\u73b0\u5b50\u7c7b\n */\npublic class ColdDiagnosis extends AbstractDiagnosis{\n    @Override\n    public void prescribe() {\n        System.out.println(\"3 &gt;&gt; \u4e00\u773c\u4e01\u771f\uff0c\u9274\u5b9a\u4e3a\u5047\uff0c\u4f60\u8fd9\u4e0d\u662f\u611f\u5192\uff0c\u7eaf\u7cb9\u662f\u60f3\u6446\u70c2\");\n    }\n\n    @Override\n    public void medicine() {\n        System.out.println(\"4 &gt;&gt; \u5f00\u70b9\u5934\u5b62\u56de\u53bb\u5403\u5427\");\n    }\n}\n</code></pre> <p>\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u6709\u4e86\u4e00\u4e2a\u5177\u4f53\u7684\u5b9e\u73b0\u7c7b\uff0c\u5e76\u4e14\u7531\u4e8e\u770b\u75c5\u7684\u903b\u8f91\u5df2\u7ecf\u7531\u7236\u7c7b\u5b9a\u4e49\u597d\u4e86\uff0c\u6240\u4ee5\u5b50\u7c7b\u53ea\u9700\u8981\u5b9e\u73b0\u9700\u8981\u5b9e\u73b0\u7684\u90e8\u5206\u5373\u53ef\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u5b9e\u73b0\u4e86\u7b80\u5355\u7684\u6a21\u677f\u65b9\u6cd5\u6a21\u5f0f\uff1a</p> Java<pre><code>public static void main(String[] args) {\n    AbstractDiagnosis diagnosis = new ColdDiagnosis();\n    diagnosis.test();\n}\n</code></pre>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_30","title":"\u8d23\u4efb\u94fe\u6a21\u5f0f","text":"<p>\u8d23\u4efb\u94fe\u6a21\u5f0f\u4e5f\u975e\u5e38\u597d\u7406\u89e3\uff0c\u6bd4\u5982\u6211\u4eec\u7684\u9489\u9489\u5ba1\u6279\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u6761\u6d41\u6c34\u7ebf\u4e00\u6837\u7684\u64cd\u4f5c\uff0c\u7531\u4f60\u53d1\u8d77\u7533\u8bf7\uff0c\u7136\u540e\u7ecf\u8fc7\u591a\u4e2a\u90e8\u95e8\u4e3b\u7ba1\u5ba1\u6279\uff0c\u6700\u540e\u624d\u80fd\u901a\u8fc7\uff0c\u6240\u4ee5\u4f60\u7684\u7533\u8bf7\u8868\u76f8\u5f53\u4e8e\u662f\u5728\u4e00\u6761\u8d23\u4efb\u94fe\u4e0a\u4f20\u9012\u3002\u5f53\u7136\u9664\u4e86\u8fd9\u6837\u7684\u76f4\u7ebf\u578b\u8d23\u4efb\u94fe\u4e4b\u5916\uff0c\u8fd8\u6709\u73af\u5f62\u3001\u6811\u5f62\u7b49\u3002</p> <p>JavaWeb \u4e2d\u5b66\u4e60\u7684 Filter \u8fc7\u6ee4\u5668\uff0c\u6b63\u662f\u91c7\u7528\u7684\u8d23\u4efb\u94fe\u6a21\u5f0f\uff0c\u901a\u8fc7\u5c06\u8bf7\u6c42\u4e00\u7ea7\u4e00\u7ea7\u4e0d\u65ad\u5411\u4e0b\u4f20\u9012\uff0c\u6765\u5bf9\u6211\u4eec\u6240\u9700\u8981\u7684\u8bf7\u6c42\u8fdb\u884c\u8fc7\u6ee4\u548c\u5904\u7406\u3002</p> Java<pre><code>public abstract class Handler {\n\n    protected Handler successor;    // \u8bbe\u8ba1\u8d23\u4efb\u94fe\u4ee5\u5355\u94fe\u8868\u5f62\u5f0f\u5b58\u5728\uff0c\u8fd9\u91cc\u5b58\u653e\u540e\u7ee7\u8282\u70b9\n\n    public Handler connect(Handler successor){     // \u62fc\u63a5\u540e\u7eed\u8282\u70b9\n        this.successor = successor;\n        return successor;  // \u8fd9\u91cc\u8fd4\u56de\u540e\u7ee7\u8282\u70b9\uff0c\u65b9\u4fbf\u6211\u4eec\u4e00\u4f1a\u94fe\u5f0f\u8c03\u7528\n    }\n\n    public void handle(){\n        this.doHandle();   // \u7531\u4e0d\u540c\u7684\u5b50\u7c7b\u5b9e\u73b0\u5177\u4f53\u5904\u7406\u8fc7\u7a0b\n        Optional\n                .ofNullable(successor)\n                .ifPresent(Handler::handle);    // \u8d23\u4efb\u94fe\u4e0a\u5982\u679c\u8fd8\u6709\u540e\u7ee7\u8282\u70b9\uff0c\u5c31\u7ee7\u7eed\u5411\u4e0b\u4f20\u9012\n    }\n\n    public abstract void doHandle();   // \u7ed3\u5408\u4e0a\u8282\u8bfe\u5b66\u4e60\u7684\u6a21\u677f\u65b9\u6cd5\uff0c\u4ea4\u7ed9\u5b50\u7c7b\u5b9e\u73b0\n}\n</code></pre> Java<pre><code>public class FirstHandler extends Handler{   // \u7528\u4e8e\u4e00\u9762\u7684\u5904\u7406\u5668\n    @Override\n    public void doHandle() {\n        System.out.println(\"============= \u4e00\u9762 ==========\");\n        System.out.println(\"1. \u8c08\u8c08\u4f60\u5bf9static\u5173\u952e\u5b57\u7684\u7406\u89e3\uff1f\");\n        System.out.println(\"2. \u5185\u90e8\u7c7b\u53ef\u4ee5\u8c03\u7528\u5916\u90e8\u7684\u6570\u636e\u5417\uff1f\u5982\u679c\u662f\u9759\u6001\u7684\u5462\uff1f\");\n        System.out.println(\"3. hashCode()\u65b9\u6cd5\u662f\u6240\u6709\u7684\u7c7b\u90fd\u6709\u5417\uff1f\u9ed8\u8ba4\u8fd4\u56de\u7684\u662f\u4ec0\u4e48\u5462\uff1f\");\n    }\n}\n</code></pre> Java<pre><code>public class SecondHandler extends Handler{  // \u4e8c\u9762\n    @Override\n    public void doHandle() {\n        System.out.println(\"============= \u4e8c\u9762 ==========\");\n        System.out.println(\"1. \u5982\u679c\u6211\u4eec\u81ea\u5df1\u521b\u5efa\u4e00\u4e2ajava.lang\u5305\u5e76\u4e14\u7f16\u5199\u4e00\u4e2aString\u7c7b\uff0c\u80fd\u5426\u5b9e\u73b0\u8986\u76d6JDK\u9ed8\u8ba4\u7684\uff1f\");\n        System.out.println(\"2. HashMap\u7684\u8d1f\u8f7d\u56e0\u5b50\u6709\u4ec0\u4e48\u4f5c\u7528\uff1f\u53d8\u5316\u89c4\u5f8b\u662f\u4ec0\u4e48\uff1f\");\n        System.out.println(\"3. \u7ebf\u7a0b\u6c60\u7684\u8fd0\u4f5c\u673a\u5236\u662f\u4ec0\u4e48\uff1f\");\n        System.out.println(\"4. ReentrantLock\u516c\u5e73\u9501\u548c\u975e\u516c\u5e73\u9501\u7684\u533a\u522b\u662f\u4ec0\u4e48\uff1f\");\n    }\n}\n</code></pre> Java<pre><code>public class ThirdHandler extends Handler{ // \u4e09\u9762\n    @Override\n    public void doHandle() {\n        System.out.println(\"============= \u4e09\u9762 ==========\");\n        System.out.println(\"1. synchronized\u5173\u952e\u5b57\u4e86\u89e3\u5417\uff1f\u5982\u4f55\u4f7f\u7528\uff1f\u5e95\u5c42\u662f\u5982\u4f55\u5b9e\u73b0\u7684\uff1f\");\n        System.out.println(\"2. IO\u548cNIO\u7684\u533a\u522b\u5728\u54ea\u91cc\uff1fNIO\u4e09\u5927\u6838\u5fc3\u7ec4\u4ef6\uff1f\");\n        System.out.println(\"3. TCP\u63e1\u624b\u548c\u6325\u624b\u6d41\u7a0b\uff1f\u5c11\u4e00\u6b21\u63e1\u624b\u53ef\u4ee5\u5417\uff1f\u4e3a\u4ec0\u4e48\uff1f\");\n        System.out.println(\"4. \u64cd\u4f5c\u7cfb\u7edf\u4e2dPCB\u662f\u505a\u4ec0\u4e48\u7684\uff1f\u8fd0\u884c\u673a\u5236\u662f\u4ec0\u4e48\uff1f\");\n    }\n}\n</code></pre> <p>\u7f16\u5199\u597d\u4e86\u6bcf\u4e00\u8f6e\u7684\u9762\u8bd5\u6d41\u7a0b\uff0c\u73b0\u5728\u6211\u4eec\u5c31\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a\u8d23\u4efb\u94fe\u4e86\uff1a</p> Java<pre><code>public static void main(String[] args) {\n    Handler handler = new FirstHandler();  // \u4e00\u9762\u9996\u5f53\u5176\u51b2\n    handler\n            .connect(new SecondHandler())   // \u7ee7\u7eed\u8fde\u63a5\u4e8c\u9762\u548c\u4e09\u9762\n            .connect(new ThirdHandler());\n    handler.handle();   // \u5f00\u59cb\u9762\u8bd5\n} \n</code></pre>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_31","title":"\u547d\u4ee4\u6a21\u5f0f","text":"<p>\u4ee5\u667a\u80fd\u5bb6\u5c45\u4e3a\u4f8b\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728\u4e00\u4e2a\u7ec8\u7aef\u4e0a\u8fdb\u884c\u64cd\u4f5c\uff0c\u5c31\u53ef\u4ee5\u968f\u4fbf\u63a7\u5236\u5bb6\u91cc\u7684\u7535\u5668\u3002</p> <p>\u6bd4\u5982\u73b0\u5728\u6211\u4eec\u6709\u5f88\u591a\u7684\u7c7b\uff0c\u5f69\u7535\u3001\u51b0\u7bb1\u3001\u7a7a\u8c03\u3001\u6d17\u8863\u673a\u3001\u70ed\u6c34\u5668\u7b49\uff0c\u65e2\u7136\u73b0\u5728\u6211\u4eec\u8981\u901a\u8fc7\u4e00\u4e2a\u9065\u63a7\u5668\u53bb\u63a7\u5236\u4ed6\u4eec\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u5c06\u63a7\u5236\u8fd9\u4e9b\u7535\u5668\u7684\u6307\u4ee4\u90fd\u7ed9\u8bbe\u8ba1\u597d\u624d\u884c\uff0c\u5e76\u4e14\u8fd8\u4e0d\u80fd\u6709\u592a\u5f3a\u7684\u5173\u8054\u6027\u3002</p> <p>\u6240\u6709\u7684\u7535\u5668\u80af\u5b9a\u9700\u8981\u901a\u8fc7\u84dd\u7259\u6216\u662f\u7ea2\u5916\u7ebf\u63a5\u53d7\u9065\u63a7\u5668\u53d1\u9001\u7684\u8bf7\u6c42\uff0c\u6240\u4ee5\u6240\u6709\u7684\u7535\u5668\u90fd\u662f\u63a5\u6536\u8005\uff1a</p> \u63a5\u6536\u8005<pre><code>public interface Receiver {\n    void action();   // \u5177\u4f53\u884c\u4e3a\n}\n</code></pre> \u6307\u4ee4<pre><code>public abstract class Command {   // \u6307\u4ee4\u62bd\u8c61\uff0c\u4e0d\u540c\u7684\u7535\u5668\u6709\u6307\u4ee4\n\n    private final Receiver receiver;\n\n    protected Command(Receiver receiver){   // \u6307\u5b9a\u6b64\u547d\u4ee4\u5bf9\u5e94\u7684\u7535\u5668\uff08\u63a5\u53d7\u8005\uff09\n        this.receiver = receiver;\n    }\n\n    public void execute() {\n        receiver.action();   // \u6267\u884c\u547d\u4ee4\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u8ba9\u63a5\u6536\u8005\u5f00\u59cb\u5e72\u6d3b\n    }\n}\n</code></pre> \u9065\u63a7\u5668<pre><code>public class Controller {   // \u9065\u63a7\u5668\u53ea\u9700\u8981\u628a\u6211\u4eec\u7684\u6307\u4ee4\u53d1\u51fa\u53bb\u5c31\u884c\u4e86\n    public static void call(Command command){\n        command.execute();\n    }\n}\n</code></pre> <p>\u521b\u5efa\u4e00\u4e2a\u7a7a\u8c03\uff0c\u4f5c\u4e3a\u547d\u4ee4\u7684\u63a5\u6536\u8005\uff1a</p> \u7a7a\u8c03<pre><code>public class AirConditioner implements Receiver{\n    @Override\n    public void action() {\n        System.out.println(\"\u7a7a\u8c03\u5df2\u5f00\u542f\");\n    }\n}\n</code></pre> <p>\u521b\u5efa\u4e00\u4e2a\u5f00\u542f\u7a7a\u8c03\u7684\u547d\u4ee4\uff1a</p> \u5f00\u673a\u547d\u4ee4<pre><code>public class OpenCommand extends Command {\n    public OpenCommand(AirConditioner airConditioner) {\n        super(airConditioner);\n    }\n}\n</code></pre> <p>\u6700\u540e\u901a\u8fc7\u9065\u63a7\u5668\u53d1\u9001\u51fa\u53bb\uff1a</p> Java<pre><code>public static void main(String[] args) {\n    AirConditioner airConditioner = new AirConditioner();   // \u5148\u521b\u5efa\u4e00\u4e2a\u7a7a\u8c03\n    Controller.call(new OpenCommand(airConditioner));   // \u76f4\u63a5\u901a\u8fc7\u9065\u63a7\u5668\u6765\u53d1\u9001\u7a7a\u8c03\u5f00\u542f\u547d\u4ee4\n}\n</code></pre> <p>\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u9065\u63a7\u5668\u8fd9\u4e2a\u89d2\u8272\u5e76\u4e0d\u9700\u8981\u77e5\u9053\u5177\u4f53\u4f1a\u6267\u884c\u4ec0\u4e48\uff0c\u53ea\u9700\u8981\u53d1\u9001\u547d\u4ee4\u5373\u53ef\uff0c\u9065\u63a7\u5668\u548c\u7535\u5668\u7684\u5173\u8054\u6027\u5c31\u4e0d\u518d\u90a3\u4e48\u5f3a\u4e86\u3002</p>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_32","title":"\u8fed\u4ee3\u5668\u6a21\u5f0f","text":"<p>\u8fed\u4ee3\u5668\u53ef\u4ee5\u8bf4\u662f\u6211\u4eec\u5b66\u4e60 Java \u8bed\u8a00\u7684\u57fa\u7840\uff0c\u6ca1\u6709\u8fed\u4ee3\u5668\uff0c\u96c6\u5408\u7c7b\u7684\u904d\u5386\u5c31\u6210\u4e86\u95ee\u9898\uff0c\u6b63\u662f\u56e0\u4e3a\u6709\u8fed\u4ee3\u5668\u7684\u5b58\u5728\uff0c\u6211\u4eec\u624d\u80fd\u66f4\u52a0\u4f18\u96c5\u7684\u4f7f\u7528 foreach \u8bed\u6cd5\u3002</p> <p>\u4f9d\u7167 JDK \u63d0\u4f9b\u7684\u8fed\u4ee3\u5668\u63a5\u53e3\uff08JDK \u5df2\u7ecf\u4e3a\u6211\u4eec\u5b9a\u4e49\u597d\u4e86\u4e00\u4e2a\u8fed\u4ee3\u5668\u7684\u5177\u4f53\u76f8\u5173\u64cd\u4f5c\uff09\uff0c\u4e5f\u6765\u8bbe\u8ba1\u4e00\u4e2a\u8fed\u4ee3\u5668\uff1a</p> Java<pre><code>public class ArrayCollection&lt;T&gt; implements Iterable&lt;T&gt; {    // \u8bbe\u8ba1\u4e00\u4e2a\u7b80\u5355\u7684\u6570\u7ec4\u96c6\u5408\n\n    private final T[] array;   // \u5e95\u5c42\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u5b58\u653e\u6570\u636e\n\n    private ArrayCollection(T[] array){   // private\u6389\uff0c\u81ea\u5df1\u7528\n        this.array = array;\n    }\n\n    public static &lt;T&gt; ArrayCollection&lt;T&gt; of(T[] array){   // \u5f00\u4e2a\u9759\u6001\u65b9\u6cd5\u76f4\u63a5\u5427\u6570\u7ec4\u8f6c\u6362\u6210ArrayCollection\uff0c\u5176\u5b9e\u548c\u76f4\u63a5new\u4e00\u6837\uff0c\u4f46\u662f\u8fd9\u6837\u5199\u597d\u770b\u4e00\u70b9\n        return new ArrayCollection&lt;&gt;(array);\n    }\n\n    @Override\n    public Iterator&lt;T&gt; iterator() {    // \u9700\u8981\u5b9e\u73b0iterator\u65b9\u6cd5\uff0c\u6b64\u65b9\u6cd5\u4f1a\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u7528\u4e8e\u8fed\u4ee3\u6211\u4eec\u96c6\u5408\u4e2d\u7684\u5143\u7d20\n        return new ArrayIterator();\n    }\n\n    public class ArrayIterator implements Iterator&lt;T&gt; {   // \u8fd9\u91cc\u5b9e\u73b0\u4e00\u4e2a\uff0c\u6ce8\u610f\u522b\u7528\u9759\u6001\uff0c\u9700\u8981\u4f7f\u7528\u5bf9\u8c61\u4e2d\u5b58\u653e\u7684\u6570\u7ec4\n        private int cur = 0;   // \u8fd9\u91cc\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u6307\u9488\u8868\u793a\u5f53\u524d\u7684\u8fed\u4ee3\u4f4d\u7f6e\n\n        @Override\n        public boolean hasNext() {     // \u5224\u65ad\u662f\u5426\u8fd8\u6709\u4e0b\u4e00\u4e2a\u5143\u7d20\n            return cur &lt; array.length;   // \u5982\u679c\u6307\u9488\u5927\u4e8e\u6216\u7b49\u4e8e\u6570\u7ec4\u6700\u5927\u957f\u5ea6\uff0c\u5c31\u4e0d\u80fd\u518d\u7ee7\u7eed\u4e86\n        }\n\n        @Override\n        public T next() {   // \u8fd4\u56de\u5f53\u524d\u6307\u9488\u4f4d\u7f6e\u7684\u5143\u7d20\u5e76\u5411\u540e\u79fb\u52a8\u4e00\u4f4d\n            return array[cur++];   // \u6b63\u5e38\u8fd4\u56de\u5bf9\u5e94\u4f4d\u7f6e\u7684\u5143\u7d20\uff0c\u5e76\u5c06\u6307\u9488\u81ea\u589e\n        }\n    }\n}\n</code></pre> <p>\u63a5\u7740\uff0c\u5c31\u53ef\u4ee5\u5bf9\u8fd9\u4e2a\u7b80\u5355\u7684\u96c6\u5408\u7c7b\u8fdb\u884c\u8fed\u4ee3\u4e86\uff1a</p> Java<pre><code>public static void main(String[] args) {\n    String[] arr = new String[]{\"AAA\", \"BBB\", \"CCC\", \"DDD\"};\n    ArrayCollection&lt;String&gt; collection = ArrayCollection.of(arr);\n    for (String s : collection) {    // \u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528foreach\u8bed\u6cd5\u7cd6\uff0c\u5f53\u7136\u6700\u540e\u8fd8\u662f\u4f1a\u53d8\u6210\u8fed\u4ee3\u5668\u8c03\u7528\n        System.out.println(s);\n    }\n}\n</code></pre> <p>\u7f16\u8bd1\u540e\u7684\u4ee3\u7801\uff1a</p> Java<pre><code>public static void main(String[] args) {\n    String[] arr = new String[]{\"AAA\", \"BBB\", \"CCC\", \"DDD\"};\n    ArrayCollection&lt;String&gt; collection = ArrayCollection.of(arr);\n    Iterator var3 = collection.iterator();   // \u9996\u5148\u83b7\u53d6\u8fed\u4ee3\u5668\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u8c03\u7528\u6211\u4eec\u5b9e\u73b0\u7684iterator\u65b9\u6cd5\n\n    while(var3.hasNext()) {\n        String s = (String)var3.next();   // \u76f4\u63a5\u4f7f\u7528next()\u65b9\u6cd5\u4e0d\u65ad\u5411\u4e0b\u83b7\u53d6\n        System.out.println(s);\n    }\n}\n</code></pre>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_33","title":"\u4e2d\u4ecb\u8005\u6a21\u5f0f","text":"<p>\u501f\u52a9 Facetime\u3001\u5fae\u4fe1\u7b49\uff0c\u53ef\u4ee5\u540c\u65f6\u8ba9\u591a\u4e2a\u4eba\u53c2\u4e0e\u5230\u7fa4\u901a\u8bdd\u4e2d\u8fdb\u884c\u7fa4\u804a\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u4e0d\u9700\u8981\u4e00\u4e2a\u4e00\u4e2a\u5355\u72ec\u8fdb\u884c\u901a\u8bdd\u6216\u662f\u8f6c\u8fbe\u4e86\u3002\u5b9e\u9645\u4e0a\u6b63\u662f\u4f9d\u9760\u4e86\u4e00\u4e2a\u4e2d\u95f4\u5546\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u8fdb\u884c\u7fa4\u4f53\u901a\u8bdd\u7684\u5e73\u53f0\uff0c\u6211\u4eec\u624d\u80fd\u5b9e\u73b0\u6b64\u529f\u80fd\uff0c\u800c\u8fd9\u4e2a\u5e73\u53f0\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u4e2a\u4e2d\u95f4\u4eba\u3002</p> <p>\u5728\u6211\u4eec\u7684\u7a0b\u5e8f\u4e2d\uff0c\u53ef\u80fd\u4e5f\u4f1a\u51fa\u73b0\u5f88\u591a\u7684\u5bf9\u8c61\uff0c\u4f46\u662f\u8fd9\u4e9b\u5bf9\u8c61\u4e4b\u95f4\u7684\u76f8\u4e92\u8c03\u7528\u5173\u7cfb\u9519\u7efc\u590d\u6742\uff0c\u53ef\u80fd\u4e00\u4e2a\u5bf9\u8c61\u8981\u505a\u4ec0\u4e48\u4e8b\u60c5\u5c31\u5f97\u8054\u7cfb\u597d\u51e0\u4e2a\u5bf9\u8c61\u3002\u4ee5\u623f\u4ea7\u4e2d\u4ecb\u4e3a\u4f8b\uff1a</p> Java<pre><code>public class Mediator {   // \u623f\u4ea7\u4e2d\u4ecb\n    private final Map&lt;String, User&gt; userMap = new HashMap&lt;&gt;();   // \u5728\u51fa\u552e\u7684\u623f\u5b50\u9700\u8981\u5b58\u50a8\u4e00\u4e0b\n\n    public void register(String address, User user){   // \u51fa\u552e\u623f\u5c4b\u7684\u4eba\uff0c\u9700\u8981\u544a\u8bc9\u4e2d\u4ecb\u4ed6\u7684\u623f\u5c4b\u5728\u54ea\u91cc\n        userMap.put(address, user);\n    }\n\n    public User find(String address){   // \u901a\u8fc7\u6b64\u65b9\u6cd5\u6765\u770b\u770b\u6709\u6ca1\u6709\u5bf9\u5e94\u7684\u623f\u6e90\n        return userMap.get(address);\n    }\n}\n</code></pre> <p>\u4e24\u79cd\u7528\u6237\uff0c\u4e00\u79cd\u662f\u79df\u623f\uff0c\u4e00\u79cd\u662f\u623f\u4e3b\uff1a</p> Java<pre><code>public class User {\n    String name;\n    String tel;\n\n    public User(String name, String tel) {\n        this.name = name;\n        this.tel = tel;\n    }\n\n    public User find(String address, Mediator mediator){   // \u627e\u623f\u5b50\u7684\u8bdd\uff0c\u9700\u8981\u4e00\u4e2a\u4e2d\u4ecb\u548c\u4f60\u5177\u4f53\u60f3\u627e\u7684\u5730\u65b9\n        return mediator.find(address);\n    }\n\n    @Override\n    public String toString() {\n        return name+\" (\u7535\u8bdd\uff1a\"+tel+\")\";\n    }\n}\n</code></pre> <p>\u6d4b\u8bd5\uff1a</p> Java<pre><code>public static void main(String[] args) {\n    User user0 = new User(\"\u5218\u5973\u58eb\", \"10086\");   // \u51fa\u79df\u4eba\n    User user1 = new User(\"\u674e\u5148\u751f\", \"10010\");   // \u627e\u623f\u4eba\n    Mediator mediator = new Mediator();        // \u4e2d\u4ecb\n\n    mediator.register(\"\u6210\u90fd\u5e02\u6b66\u4faf\u533a\u5929\u5e9c\u4e94\u8857\u767d\u9a6c\u7a0b\u5e8f\u5458\", user0);   // \u5148\u628a\u623f\u5b50\u7ed9\u4e2d\u4ecb\u6302\u4e0a\u53bb\n\n    User user = user1.find(\"\u6210\u90fd\u5e02\u6b66\u4faf\u533a\u5929\u5e9c\u4e94\u8857\u4e0b\u7845\u8c37\", mediator);  // \u5f00\u59cb\u627e\u623f\u5b50\n    if(user == null) System.out.println(\"\u6ca1\u6709\u627e\u5230\u5bf9\u5e94\u7684\u623f\u6e90\");\n\n    user = user1.find(\"\u6210\u90fd\u5e02\u6b66\u4faf\u533a\u5929\u5e9c\u4e94\u8857\u767d\u9a6c\u7a0b\u5e8f\u5458\", mediator);  // \u5f00\u59cb\u627e\u623f\u5b50\n    System.out.println(user);   // \u6210\u529f\u627e\u5230\u5bf9\u5e94\u623f\u6e90\n}\n</code></pre> <p>\u4e2d\u4ecb\u8005\u6a21\u5f0f\u4f18\u5316\u4e86\u539f\u6709\u7684\u590d\u6742\u591a\u5bf9\u591a\u5173\u7cfb\uff0c\u800c\u662f\u5c06\u5176\u7b80\u5316\u4e3a\u4e00\u5bf9\u591a\u7684\u5173\u7cfb\uff0c\u66f4\u5bb9\u6613\u7406\u89e3\u3002</p>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_34","title":"\u5907\u5fd8\u5f55\u6a21\u5f0f","text":"<p>\u5907\u5fd8\u5f55\u6a21\u5f0f\uff0c\u5c31\u4e3a\u6211\u4eec\u7684\u8f6f\u4ef6\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u56de\u6eaf\u7684\u65f6\u95f4\u8282\u70b9\uff0c\u53ef\u80fd\u6211\u4eec\u7a0b\u5e8f\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u67d0\u4e00\u6b65\u51fa\u73b0\u4e86\u9519\u8bef\uff0c\u8fd9\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u56de\u5230\u4e4b\u524d\u7684\u67d0\u4e2a\u88ab\u4fdd\u5b58\u7684\u8282\u70b9\u4e0a\u91cd\u65b0\u6765\u8fc7\uff0c\u6211\u4eec\u5e73\u65f6\u7f16\u8f91\u6587\u672c\u7684\u65f6\u5019\uff0c\u5f53\u6211\u4eec\u7f16\u8f91\u51fa\u73b0\u9519\u8bef\u65f6\uff0c\u5c31\u9700\u8981\u64a4\u56de\uff0c\u800c\u6211\u4eec\u53ea\u9700\u8981\u6309\u4e0b <code>Ctrl+Z</code> \u5c31\u53ef\u4ee5\u56de\u5230\u4e0a\u4e00\u6b65\uff0c\u8fd9\u6837\u5c31\u5927\u5927\u65b9\u4fbf\u4e86\u6211\u4eec\u7684\u6587\u672c\u7f16\u8f91\u3002</p> <p>\u8fd9\u91cc\u6211\u4eec\u5c31\u6a21\u62df\u4e00\u4e0b\u5bf9\u8c61\u7684\u72b6\u6001\u4fdd\u5b58\uff1a</p> Java<pre><code>public class Student {\n    private String currentWork;   // \u5f53\u524d\u6b63\u5728\u505a\u7684\u4e8b\u60c5\n    private int percentage;   // \u5f53\u524d\u7684\u5de5\u4f5c\u5b8c\u6210\u767e\u5206\u6bd4\n\n    public void work(String currentWork) {\n        this.currentWork = currentWork;\n        this.percentage = new Random().nextInt(100);\n    }\n\n    @Override\n    public String toString() {\n        return \"\u6211\u73b0\u5728\u6b63\u5728\u505a\uff1a\"+currentWork+\" (\u8fdb\u5ea6\uff1a\"+percentage+\"%)\";\n    }\n}\n</code></pre> <p>\u63a5\u7740\u7f16\u5199\u4e00\u4e2a\u72b6\u6001\u4fdd\u5b58\u7c7b\uff0c\u6765\u4fdd\u5b58\u5b83\u5728\u67d0\u4e00\u65f6\u523b\u7684\u72b6\u6001\uff1a</p> Java<pre><code>public class State {\n    final String currentWork;\n    final int percentage;\n\n    State(String currentWork, int percentage) {   //\u4ec5\u5f00\u653e\u7ed9\u540c\u4e00\u4e2a\u5305\u4e0b\u7684Student\u7c7b\u4f7f\u7528\n        this.currentWork = currentWork;\n        this.percentage = percentage;\n    }\n}\n</code></pre> <p>\u5c06\u72b6\u6001\u7684\u4fdd\u5b58\u548c\u6062\u590d\u64cd\u4f5c\u90fd\u5b9e\u73b0\u4e00\u4e0b\uff1a</p> Java<pre><code>public class Student {\n    ...\n\n    public State save(){\n        return new State(currentWork, percentage);\n    }\n\n    public void restore(State state){\n        this.currentWork = state.currentWork;\n        this.percentage = state.percentage;\n    }\n\n    ...\n}\n</code></pre> <p>\u6d4b\u8bd5\uff1a</p> Java<pre><code>public static void main(String[] args) {\n    Student student = new Student();\n    student.work(\"\u5b66Java\");   //\u5f00\u59cb\u5b66Java\n    System.out.println(student);\n\n    State savedState = student.save();   //\u4fdd\u5b58\u4e00\u4e0b\u5f53\u524d\u7684\u72b6\u6001\n\n    student.work(\"\u6253\u7535\u52a8\");   //\u521a\u6253\u5f00B\u7ad9\u64ad\u653e\u89c6\u9891\uff0c\u5b66\u4e00\u534a\u5f00\u59cb\u6446\u70c2\u4e86\n    System.out.println(student);\n\n    student.restore(savedState);   //\u4e24\u7ea7\u53cd\u8f6c\uff01\u56de\u5230\u4e0a\u4e00\u4e2a\u4fdd\u5b58\u7684\u72b6\u6001\n    System.out.println(student);   //\u56de\u5230\u5b66Java\u7684\u72b6\u6001\n}\n</code></pre>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_35","title":"\u89c2\u5bdf\u8005\u6a21\u5f0f","text":"<p>\u89c2\u5bdf\u8005\u6a21\u5f0f\uff08Observer Pattern\uff09 \u662f\u4e00\u79cd\u884c\u4e3a\u578b\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u7528\u4e8e\u5728\u5bf9\u8c61\u4e4b\u95f4\u5efa\u7acb\u4e00\u79cd\u4e00\u5bf9\u591a\u7684\u4f9d\u8d56\u5173\u7cfb\u3002\u5f53\u4e00\u4e2a\u5bf9\u8c61\uff08\u79f0\u4e3a\u4e3b\u9898\u6216\u88ab\u89c2\u5bdf\u8005\uff09\u7684\u72b6\u6001\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u6240\u6709\u4f9d\u8d56\u4e8e\u5b83\u7684\u5bf9\u8c61\uff08\u79f0\u4e3a\u89c2\u5bdf\u8005\uff09\u90fd\u4f1a\u81ea\u52a8\u6536\u5230\u901a\u77e5\u5e76\u66f4\u65b0\u3002</p> <p>\u6838\u5fc3\u4f5c\u7528 + \u89e3\u8026\uff1a\u89c2\u5bdf\u8005\u6a21\u5f0f\u5c06\u4e3b\u9898\u548c\u89c2\u5bdf\u8005\u89e3\u8026\uff0c\u4f7f\u5f97\u5b83\u4eec\u53ef\u4ee5\u72ec\u7acb\u53d8\u5316\uff0c\u800c\u4e0d\u4f1a\u76f8\u4e92\u5f71\u54cd\u3002 + \u5b9e\u65f6\u66f4\u65b0\uff1a\u5f53\u4e3b\u9898\u7684\u72b6\u6001\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u6240\u6709\u89c2\u5bdf\u8005\u80fd\u591f\u5b9e\u65f6\u6536\u5230\u901a\u77e5\u5e76\u66f4\u65b0\u81ea\u8eab\u72b6\u6001\u3002 + \u52a8\u6001\u8ba2\u9605\uff1a\u89c2\u5bdf\u8005\u53ef\u4ee5\u52a8\u6001\u5730\u8ba2\u9605\u6216\u53d6\u6d88\u8ba2\u9605\u4e3b\u9898\uff0c\u7075\u6d3b\u6027\u9ad8\u3002</p> <p>\u9002\u7528\u573a\u666f + \u5f53\u4e00\u4e2a\u5bf9\u8c61\u7684\u6539\u53d8\u9700\u8981\u540c\u65f6\u6539\u53d8\u5176\u4ed6\u5bf9\u8c61\uff0c\u4e14\u4e0d\u77e5\u9053\u5177\u4f53\u6709\u591a\u5c11\u5bf9\u8c61\u9700\u8981\u6539\u53d8\u65f6\u3002 + \u5f53\u4e00\u4e2a\u5bf9\u8c61\u9700\u8981\u901a\u77e5\u5176\u4ed6\u5bf9\u8c61\uff0c\u4f46\u4e0d\u5e0c\u671b\u4e0e\u8fd9\u4e9b\u5bf9\u8c61\u7d27\u5bc6\u8026\u5408\u65f6\u3002 + \u4f8b\u5982\uff1a\u4e8b\u4ef6\u5904\u7406\u7cfb\u7edf\u3001\u6d88\u606f\u901a\u77e5\u7cfb\u7edf\u3001GUI \u6846\u67b6\u4e2d\u7684\u4e8b\u4ef6\u76d1\u542c\u7b49\u3002</p> <p>\u5728 Java \u4e2d\uff0c\u4e00\u4e2a\u5bf9\u8c61\u7684\u72b6\u6001\u53d1\u751f\u6539\u53d8\uff0c\u53ef\u80fd\u5c31\u4f1a\u5f71\u54cd\u5230\u5176\u4ed6\u7684\u5bf9\u8c61\uff0c\u4e0e\u4e4b\u76f8\u5173\u7684\u5bf9\u8c61\u53ef\u80fd\u4e5f\u4f1a\u8054\u52a8\u7684\u8fdb\u884c\u6539\u53d8\u3002\u8fd8\u6709\u6211\u4eec\u4e4b\u524d\u9047\u5230\u8fc7\u7684\u76d1\u542c\u5668\u673a\u5236\uff0c\u5f53\u5177\u4f53\u7684\u4e8b\u4ef6\u89e6\u53d1\u65f6\uff0c\u6211\u4eec\u5728\u4e00\u5f00\u59cb\u521b\u5efa\u7684\u76d1\u542c\u5668\u5c31\u53ef\u4ee5\u6267\u884c\u76f8\u5173\u7684\u903b\u8f91\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u89c2\u5bdf\u8005\u6a21\u5f0f\u6765\u5b9e\u73b0\u8fd9\u6837\u7684\u529f\u80fd\uff0c\u5f53\u5bf9\u8c61\u53d1\u751f\u6539\u53d8\u65f6\uff0c\u89c2\u5bdf\u8005\u80fd\u591f\u7acb\u5373\u89c2\u5bdf\u5230\u5e76\u8fdb\u884c\u4e00\u4e9b\u8054\u52a8\u64cd\u4f5c\uff0c\u6211\u4eec\u5148\u5b9a\u4e49\u4e00\u4e2a\u89c2\u5bdf\u8005\u63a5\u53e3\uff1a</p> Java<pre><code>public interface Observer {   // \u89c2\u5bdf\u8005\u63a5\u53e3\n    void update();   // \u5f53\u5bf9\u8c61\u6709\u66f4\u65b0\u65f6\uff0c\u4f1a\u56de\u8c03\u6b64\u65b9\u6cd5\n}\n</code></pre> <p>\u5199\u4e00\u4e2a\u652f\u6301\u89c2\u5bdf\u8005\u7684\u5b9e\u4f53\u7c7b\uff1a</p> Java<pre><code>public class Subject {\n    private final Set&lt;Observer&gt; observerSet = new HashSet&lt;&gt;();\n\n    public void observe(Observer observer) {   // \u6dfb\u52a0\u89c2\u5bdf\u8005\n        observerSet.add(observer);\n    }\n\n    public void modify() {   // \u6a21\u62df\u5bf9\u8c61\u8fdb\u884c\u4fee\u6539\n        observerSet.forEach(Observer::update);   // \u5f53\u5bf9\u8c61\u53d1\u751f\u4fee\u6539\u65f6\uff0c\u4f1a\u901a\u77e5\u6240\u6709\u7684\u89c2\u5bdf\u8005\uff0c\u5e76\u8fdb\u884c\u65b9\u6cd5\u56de\u8c03\n    }\n}\n</code></pre> <p>\u6d4b\u8bd5\uff1a</p> Java<pre><code>public static void main(String[] args) {\n    Subject subject = new Subject();\n    subject.observe(() -&gt; System.out.println(\"\u6211\u662f\u4e00\u53f7\u89c2\u5bdf\u8005\uff01\"));\n    subject.observe(() -&gt; System.out.println(\"\u6211\u662f\u4e8c\u53f7\u89c2\u5bdf\u8005\uff01\"));\n    subject.modify();\n}\n</code></pre> <p>\u6b64\u5916\uff0cJDK \u4e5f\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u89c2\u5bdf\u8005\u6a21\u5f0f\u63a5\u53e3\uff1a</p> Java<pre><code>import java.util.Observable;    // java.util\u5305\u4e0b\u63d0\u4f9b\u7684\u89c2\u5bdf\u8005\u62bd\u8c61\u7c7b\n\npublic class Subject extends Observable {   // \u7ee7\u627f\u6b64\u62bd\u8c61\u7c7b\u8868\u793a\u652f\u6301\u89c2\u5bdf\u8005\n\n    public void modify(){\n        System.out.println(\"\u5bf9\u5bf9\u8c61\u8fdb\u884c\u4fee\u6539\uff01\");\n        this.setChanged();    // \u5f53\u5bf9\u5bf9\u8c61\u4fee\u6539\u540e\uff0c\u9700\u8981setChanged\u6765\u8bbe\u5b9a\u4e3a\u5df2\u4fee\u6539\u72b6\u6001\n        this.notifyObservers(new Date());   // \u4f7f\u7528notifyObservers\u65b9\u6cd5\u6765\u901a\u77e5\u6240\u6709\u7684\u89c2\u5bdf\u8005\n          // \u6ce8\u610f\u53ea\u6709\u5df2\u4fee\u6539\u72b6\u6001\u4e0b\u901a\u77e5\u89c2\u5bdf\u8005\u624d\u4f1a\u6709\u6548\uff0c\u5e76\u4e14\u53ef\u4ee5\u7ed9\u89c2\u5bdf\u8005\u4f20\u9012\u53c2\u6570\uff0c\u8fd9\u91cc\u4f20\u9012\u4e86\u4e00\u4e2a\u65f6\u95f4\u5bf9\u8c61\n    }\n}\n</code></pre> <p>\u6d4b\u8bd5\uff1a</p> Java<pre><code>public static void main(String[] args) {\n    Subject subject = new Subject();\n    subject.addObserver((o, arg) -&gt; System.out.println(\"\u76d1\u542c\u5230\u53d8\u5316\uff0c\u5e76\u5f97\u5230\u53c2\u6570\uff1a\"+arg));  \n      //\u6ce8\u610f\u8fd9\u91cc\u7684Observer\u662fjava.util\u5305\u4e0b\u63d0\u4f9b\u7684\n    subject.modify();   //\u8fdb\u884c\u4fee\u6539\u64cd\u4f5c\n}\n</code></pre>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_36","title":"\u72b6\u6001\u6a21\u5f0f","text":"<p>\u5728\u6807\u51c6\u5927\u6c14\u538b\u4e0b\uff0c\u6c34\u5728 0 \u5ea6\u65f6\u4f1a\u7ed3\u51b0\u53d8\u6210\u56fa\u6001\uff0c\u5728 0-100 \u5ea6\u4e4b\u95f4\u65f6\uff0c\u4f1a\u5448\u73b0\u6db2\u6001\uff0c100 \u5ea6\u4ee5\u4e0a\u4f1a\u53d8\u6210\u6c14\u6001\uff0c\u6c34\u8fd9\u79cd\u7269\u8d28\u5728\u4e0d\u540c\u7684\u6e29\u5ea6\u4e0b\u5448\u73b0\u51fa\u4e0d\u540c\u7684\u72b6\u6001\uff0c\u800c\u6211\u4eec\u7684\u5bf9\u8c61\uff0c\u53ef\u80fd\u4e5f\u4f1a\u50cf\u8fd9\u6837\u5b58\u5728\u5f88\u591a\u79cd\u72b6\u6001\uff0c\u751a\u81f3\u5728\u4e0d\u540c\u7684\u72b6\u6001\u4e0b\u4f1a\u6709\u4e0d\u540c\u7684\u884c\u4e3a\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u72b6\u6001\u6a21\u5f0f\u6765\u5b9e\u73b0\u3002</p> <p>\u6211\u4eec\u6765\u8bbe\u8ba1\u4e00\u4e2a\u5b66\u751f\u7c7b\uff0c\u7136\u540e\u5b66\u751f\u7684\u5b66\u4e60\u65b9\u6cd5\u4f1a\u6839\u636e\u72b6\u6001\u4e0d\u540c\u800c\u53d1\u751f\u6539\u53d8\uff0c\u6211\u4eec\u5148\u8bbe\u8ba1\u4e00\u4e2a\u72b6\u6001\u679a\u4e3e\uff1a</p> Java<pre><code>public enum State {   // \u72b6\u6001\u76f4\u63a5\u4f7f\u7528\u679a\u4e3e\u5b9a\u4e49\n    NORMAL, LAZY\n}\n</code></pre> <p>\u7f16\u5199\u5b66\u751f\u7c7b\uff1a</p> Java<pre><code>public class Student {\n\n    public class Student {\n\n    private State state;   // \u4f7f\u7528\u4e00\u4e2a\u6210\u5458\u6765\u5b58\u50a8\u72b6\u6001\n\n    public void setState(State state) {\n        this.state = state;\n    }\n\n    public void study(){  \n        switch (state) {   // \u6839\u636e\u4e0d\u540c\u7684\u72b6\u6001\uff0c\u5b66\u4e60\u65b9\u6cd5\u4f1a\u6709\u4e0d\u540c\u7684\u7ed3\u679c\n            case LAZY:\n                System.out.println(\"\u53ea\u8981\u6211\u4e0d\u52aa\u529b\uff0c\u8001\u677f\u5c31\u522b\u60f3\u8fc7\u4e0a\u60f3\u8981\u7684\u751f\u6d3b\uff0c\u5f00\u6446\uff01\");\n                break;\n            case NORMAL:\n                System.out.println(\"\u62fc\u640f\u767e\u5929\uff0c\u6211\u8981\u4e0a\u6e05\u534e\u5927\u5b66\uff01\");\n                break;\n        }\n    }\n}\n</code></pre> <p>\u5728\u4e0d\u540c\u7684\u72b6\u6001\u4e0b\uff0c\u5b66\u4e60\u4f1a\u51fa\u73b0\u4e0d\u540c\u7684\u6548\u679c\uff1a</p> Java<pre><code>public static void main(String[] args) {\n    Student student = new Student();\n    student.setState(State.NORMAL);   // \u5148\u6b63\u5e38\u6a21\u5f0f\n    student.study();\n\n    student.setState(State.LAZY);   // \u5f00\u542f\u6446\u70c2\u6a21\u5f0f\n    student.study();\n}\n</code></pre>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_37","title":"\u7b56\u7565\u6a21\u5f0f","text":"<p>\u6211\u4eec\u53ef\u4ee5\u4e3a\u5bf9\u8c61\u8bbe\u5b9a\u4e00\u79cd\u7b56\u7565\uff0c\u8fd9\u6837\u5bf9\u8c61\u4e4b\u540e\u7684\u884c\u4e3a\u5c31\u4f1a\u6309\u7167\u6211\u4eec\u5728\u4e00\u5f00\u59cb\u6307\u5b9a\u7684\u7b56\u7565\u800c\u51b3\u5b9a\u4e86\uff0c\u770b\u8d77\u6765\u548c\u524d\u9762\u7684\u72b6\u6001\u6a21\u5f0f\u5f88\u50cf\uff0c\u4f46\u662f\uff0c\u5b83\u4e0e\u72b6\u6001\u6a21\u5f0f\u7684\u533a\u522b\u5728\u4e8e\uff0c\u8fd9\u79cd\u8f6c\u6362\u662f\u201c\u4e3b\u52a8\u201d\u7684\uff0c\u662f\u7531\u6211\u4eec\u53bb\u6307\u5b9a\uff0c\u800c\u72b6\u6001\u6a21\u5f0f\uff0c\u53ef\u80fd\u662f\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u81ea\u52a8\u5207\u6362\u7684\u3002</p> <p>\u4ee5\u8fd9\u4e2a\u6392\u5e8f\u7c7b\u4e3a\u4f8b\uff0c\u6839\u636e\u4e0d\u540c\u7684\u7b56\u7565\uff0c\u4f1a\u9009\u62e9\u4e0d\u540c\u7684\u6392\u5e8f\u65b9\u6848\uff1a</p> Java<pre><code>public interface Strategy {   //\u7b56\u7565\u63a5\u53e3\uff0c\u4e0d\u540c\u7684\u7b56\u7565\u5b9e\u73b0\u4e5f\u4e0d\u540c\n\n    Strategy SINGLE = Arrays::sort;   //\u5355\u7ebf\u7a0b\u6392\u5e8f\u65b9\u6848\n    Strategy PARALLEL = Arrays::parallelSort;   //\u5e76\u884c\u6392\u5e8f\u65b9\u6848\n\n    void sort(int[] array);\n}\n</code></pre> <p>\u7f16\u5199\u4e00\u4e2a\u6392\u5e8f\u7c7b\uff1a</p> Java<pre><code>public class Sorter {\n\n    private Strategy strategy;   //\u7b56\u7565\n\n    public void setStrategy(Strategy strategy) {\n        this.strategy = strategy;\n    }\n\n    public void sort(int[] array){\n        strategy.sort(array);\n    }\n}\n</code></pre> <p>\u6307\u5b9a\u7b56\u7565\u8fdb\u884c\u6392\u5e8f\uff1a</p> Java<pre><code>public static void main(String[] args) {\n    Sorter sorter = new Sorter();\n    sorter.setStrategy(Strategy.PARALLEL);    //\u6307\u5b9a\u4e3a\u5e76\u884c\u6392\u5e8f\u65b9\u6848\n\n    sorter.sort(new int[]{9, 2, 4, 5, 1, 0, 3, 7});\n}\n</code></pre>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"interview/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_38","title":"\u8bbf\u95ee\u8005\u6a21\u5f0f","text":"<p>\u533b\u9662\u533b\u751f\u5f00\u7684\u5904\u65b9\u5355\u4e2d\u5305\u542b\u591a\u79cd\u836f\u5143\u7d20\uff0c\u67fb\u770b\u5b83\u7684\u5212\u4ef7\u5458\u548c\u836f\u623f\u5de5\u4f5c\u4eba\u5458\u5bf9\u5b83\u7684\u5904\u7406\u65b9\u5f0f\u4e5f\u4e0d\u540c\uff0c\u5212\u4ef7\u5458\u6839\u636e\u5904\u65b9\u5355\u4e0a\u9762\u7684\u836f\u54c1\u540d\u548c\u6570\u91cf\u8fdb\u884c\u5212\u4ef7\uff0c\u836f\u623f\u5de5\u4f5c\u4eba\u5458\u6839\u636e\u5904\u65b9\u5355\u7684\u5185\u5bb9\u8fdb\u884c\u6293\u836f\uff0c\u76f8\u5bf9\u4e8e\u5904\u65b9\u5355\u6765\u8bf4\uff0c\u5212\u4ef7\u5458\u548c\u836f\u623f\u5de5\u4f5c\u4eba\u5458\u5c31\u662f\u5b83\u7684\u8bbf\u95ee\u8005\uff0c\u4e0d\u8fc7\u8bbf\u95ee\u8005\u7684\u8bbf\u95ee\u65b9\u5f0f\u53ef\u80fd\u4f1a\u4e0d\u540c\u3002</p> <p>\u5728\u6211\u4eec\u7684 Java \u7a0b\u5e8f\u4e2d\uff0c\u4e5f\u53ef\u80fd\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee\u8005\u6a21\u5f0f\u6765\u8fdb\u884c\u8bbe\u8ba1\u3002</p> <p>\u6bd4\u5982\u4e00\u4e2a\u4eba\u5728\u67d0\u6bd4\u8d5b\u83b7\u5956\uff0c\u800c\u4e0d\u540c\u7684\u4eba\u5bf9\u4e8e\u8fd9\u5206\u8363\u8a89\uff0c\u6709\u7740\u4e0d\u540c\u7684\u53cd\u5e94\uff1a</p> Java<pre><code>public class Prize {   //\u5956\n    String name;   //\u6bd4\u8d5b\u540d\u79f0\n    String level;    //\u7b49\u7ea7\n\n    public Prize(String name, String level) {\n        this.name = name;\n        this.level = level;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getLevel() {\n        return level;\n    }\n}\n</code></pre> <p>\u5b9a\u4e49\u8bbf\u95ee\u8005\u63a5\u53e3\uff1a</p> Java<pre><code>public interface Visitor {\n    void visit(Prize prize);   //visit\u65b9\u6cd5\u6765\u8bbf\u95ee\u6211\u4eec\u7684\u5956\u9879\n}\n</code></pre> <p>\u8bbf\u95ee\u8005\u7684\u5b9e\u73b0\uff1a</p> <p>::: code-tabs @tab Teacher. java Java<pre><code>public class Teacher implements Visitor {   //\u6307\u5bfc\u8001\u5e08\u4f5c\u4e3a\u4e00\u4e2a\u8bbf\u95ee\u8005\n    @Override\n    public void visit(Prize prize) {   //\u5b83\u53ea\u5173\u5fc3\u4f60\u5f97\u4e86\u4ec0\u4e48\u5956\u4ee5\u53ca\u662f\u51e0\u7b49\u5956\uff0c\u8fd9\u4e5f\u5173\u4e4e\u8001\u5e08\u7684\u8363\u8a89\n        System.out.println(\"\u4f60\u5f97\u5956\u662f\u4ec0\u4e48\u5956\uff1f\"+prize.name);\n        System.out.println(\"\u4f60\u5f97\u4e86\u51e0\u7b49\u5956\uff1f\"+prize.level);\n    }\n}\n</code></pre></p> <p>@tab Boss. java Java<pre><code>public class Boss implements Visitor{    //\u4f60\u7684\u516c\u53f8\u8001\u677f\u4f5c\u4e3a\u4e00\u4e2a\u8bbf\u95ee\u8005\n    @Override\n    public void visit(Prize prize) {   //\u4f60\u7684\u8001\u677f\u53ea\u5173\u5fc3\u8fd9\u4e9b\u80fd\u4e0d\u80fd\u4e3a\u516c\u53f8\u5e26\u6765\u4ec0\u4e48\u6548\u76ca\uff0c\u5956\u672c\u8eab\u5e76\u4e0d\u91cd\u8981\n        System.out.println(\"\u4f60\u7684\u5956\u9879\u5927\u4e48\uff0c\u80fd\u591f\u4e3a\u516c\u53f8\u5e26\u6765\u4ec0\u4e48\u6548\u76ca\u4e48\uff1f\");\n        System.out.println(\"\u8fd8\u4e0d\u5982\u8001\u8001\u5b9e\u5b9e\u52a0\u73ed\u7ed9\u6211\u591a\u5e72\u5e72\uff0c\u522b\u53bb\u641e\u8fd9\u4e9b\u6ca1\u7528\u7684\");\n    }\n}\n</code></pre></p> <p>@tab Classmate. java Python<pre><code>public class Classmate implements Visitor{   //\u4f60\u7684\u540c\u5b66\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u8bbf\u95ee\u8005\n    @Override\n    public void visit(Prize prize) {   //\u4f60\u7684\u540c\u5b66\u4e5f\u5173\u5fc3\u4f60\u5f97\u4e86\u4ec0\u4e48\u5956\uff0c\u4e0d\u8fc7\u662f\u56e0\u4e3a\u4f60\u662f\u4ed6\u7684\u5956\u5b66\u91d1\u7ade\u4e89\u5bf9\u624b\uff0c\u4ed6\u5176\u5b9e\u5e76\u4e0d\u5e0c\u671b\u4f60\u5f97\u5956\n        System.out.println(\"\u4f60\u5f97\u4e86\"+prize.name+\"\u5956\u554a\uff0c\u8fd8\u53ef\u4ee5\");\n        System.out.println(\"\u4e0d\u8fc7\u8fd9\u4e2a\u5956\u6ca1\u4ec0\u4e48\u542b\u91d1\u91cf\uff0c\u4e0b\u6b21\u522b\u53bb\u4e86\");\n    }\n}\n</code></pre></p> <p>@tab Family. java Java<pre><code>public class Family implements Visitor{    //\u4f60\u7684\u5bb6\u4eba\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u8bbf\u95ee\u8005\n    @Override\n    public void visit(Prize prize) {   //\u4f60\u7684\u5bb6\u4eba\u5e76\u4e0d\u662f\u6700\u5173\u5fc3\u4f60\u5f97\u4e86\u4ec0\u4e48\u5956\uff0c\u800c\u662f\u5148\u5173\u5fc3\u4f60\u81ea\u5df1\u7136\u540e\u624d\u662f\u5956\u9879\uff0c\u4ed6\u4eec\u624d\u662f\u771f\u6b63\u5e0c\u671b\u4f60\u597d\u7684\u4eba\u3002\u8fd9\u4e2a\u4e16\u754c\u5f88\u6b8b\u9177\uff0c\u53ef\u80fd\u4f60\u4f1a\u88ab\u6b3a\u8d1f\u5f97\u904d\u4f53\u9cde\u4f24\uff0c\u53ef\u80fd\u4f60\u4f1a\u89c9\u5f97\u6d3b\u7740\u5982\u6b64\u8270\u96be\uff0c\u4f46\u662f\u4f60\u7684\u80cc\u540e\u81f3\u5c11\u8fd8\u6709\u7231\u4f60\u7684\u4eba\uff0c\u4e3a\u4e86\u4ed6\u4eec\uff0c\u600e\u80fd\u5c31\u6b64\u9a7b\u8db3\u3002\n        System.out.println(\"\u5b69\u5b50\uff0c\u8f9b\u82e6\u4e86\uff0c\u6709\u6ca1\u6709\u597d\u597d\u7167\u987e\u81ea\u5df1\u554a\");\n        System.out.println(\"\u4f60\u5f97\u4e86\u4ec0\u4e48\u5956\u554a\uff1f\"+prize.name+\"\uff0c\u5f88\u4e0d\u9519\uff0c\u8981\u7ee7\u7eed\u52a0\u6cb9\u554a\uff01\");\n    }\n}\n</code></pre> :::</p> <p>\u8fd9\u91cc\u6211\u4eec\u5c31\u8bbe\u8ba1\u4e86\u56db\u79cd\u8bbf\u95ee\u8005\uff0c\u4f46\u662f\u4e0d\u540c\u7684\u8bbf\u95ee\u8005\u5bf9\u4e8e\u67d0\u4e00\u4ef6\u4e8b\u52a1\u7684\u5904\u7406\u53ef\u80fd\u4f1a\u4e0d\u540c\u3002\u8bbf\u95ee\u8005\u6a21\u5f0f\u628a\u6570\u636e\u7ed3\u6784\u548c\u4f5c\u7528\u4e8e\u7ed3\u6784\u4e0a\u7684\u64cd\u4f5c\u89e3\u8026\uff0c\u4f7f\u5f97\u64cd\u4f5c\u96c6\u5408\u53ef\u76f8\u5bf9\u81ea\u7531\u5730\u6f14\u5316\uff0c\u6211\u4eec\u4e0a\u9762\u5c31\u662f\u5c06\u5956\u9879\u672c\u8eab\u7684\u5c5e\u6027\u548c\u5bf9\u4e8e\u5956\u9879\u7684\u4e0d\u540c\u64cd\u4f5c\u8fdb\u884c\u4e86\u5206\u79bb\u3002</p>","tags":["\u9762\u8bd5","\u8bbe\u8ba1\u6a21\u5f0f"]},{"location":"leetcode/problems/1361.%20%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%A0%91/","title":"['1361. \u9a8c\u8bc1\u4e8c\u53c9\u6811']","text":"C++<pre><code>class Solution {\npublic:\n\u00a0 \u00a0 bool validateBinaryTreeNodes(int n, vector&lt;int&gt;&amp; leftChild, vector&lt;int&gt;&amp; rightChild) {\n\u00a0 \u00a0 \u00a0 \u00a0 vector&lt;vector&lt;int&gt;&gt; adj(n);\n\u00a0 \u00a0 \u00a0 \u00a0 vector&lt;int&gt; in(n, 0);\n\u00a0 \u00a0 \u00a0 \u00a0 for (int u = 0; u &lt; n; u++) {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 int v = leftChild[u];\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (v == -1) continue;\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 adj[u].push_back(v);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 in[v]++;\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 for (int u = 0; u &lt; n; u++) {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 int v = rightChild[u];\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (v == -1) continue;\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 adj[u].push_back(v);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 in[v]++;\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 int cnt = 0;\n\u00a0 \u00a0 \u00a0 \u00a0 int u = 0;\n\n\u00a0 \u00a0 \u00a0 \u00a0 for (int i = 0; i &lt; n; i++) {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (in[i] == 0) {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cnt++;\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 u = i;\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 if (cnt != 1) {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return false;\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 queue&lt;int&gt; q;\n\u00a0 \u00a0 \u00a0 \u00a0 vector&lt;int&gt; vis(n, 0);\n\u00a0 \u00a0 \u00a0 \u00a0 q.push(u);\n\u00a0 \u00a0 \u00a0 \u00a0 vis[u] = 1;\n\u00a0 \u00a0 \u00a0 \u00a0 cnt = 1;\n\u00a0 \u00a0 \u00a0 \u00a0 while (q.size()) {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 int p = q.front();\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 q.pop();\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for (auto&amp; v : adj[p]) {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cnt++;\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (!vis[v]) {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 vis[v] = 1;\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 q.push(v);\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 return cnt == n;\n\u00a0 \u00a0 }\n};\n</code></pre>"},{"location":"leetcode/top-100-liked/hash/","title":"['\u54c8\u5e0c']","text":""},{"location":"leetcode/top-100-liked/hash/#1","title":"1 \u4e24\u6570\u4e4b\u548c","text":"<p>\u9898\u76ee\u94fe\u63a5</p> <p>::: code-tabs @tab cpp C++<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        const int n = nums.size();\n        unordered_map&lt;int, int&gt; mp;\n        for (int i = 0; i &lt; n; i++) {\n            int j = target - nums[i];\n            if (mp.count(j)) {\n                return {i, mp[j]};\n            } else {\n                mp[nums[i]] = i;\n            }\n        }\n        return {-1, -1};\n    }\n};\n</code></pre></p> <p>@tab java Java<pre><code>class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        int n = nums.length;\n        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n        for (int i = 0; i &lt; n; i++) {\n            int x = nums[i];\n            int y = target - x;\n            if (map.get(y) != null) {\n                return new int[]{map.get(y), i};\n            } else {\n                map.put(x, i);\n            }\n        }\n        return null;\n    }\n}\n</code></pre></p> <p>@tab python Python<pre><code>class Solution:\n    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:\n        mp = {}\n        for i, num in enumerate(nums):\n            j = target - num\n            if j in mp:\n                return [i, mp[j]]\n            else:\n                mp[num] = i\n        return [-1, -1]\n</code></pre></p> <p>@tab go Go<pre><code>func twoSum(nums []int, target int) []int {\n    mp := map[int]int{}\n    for i, num := range nums {\n        j := target - num\n        if index, ok := mp[j]; ok {\n            return []int{i, index}\n        } else {\n            mp[num] = i\n        }\n    }\n    return []int{-1, -1}\n}\n</code></pre> :::</p>"},{"location":"leetcode/top-100-liked/hash/#49","title":"49 \u5b57\u6bcd\u5f02\u4f4d\u8bcd\u5206\u7ec4","text":"<p>\u9898\u76ee\u94fe\u63a5</p> <p>::: code-tabs @tab cpp C++<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;string&gt;&gt; groupAnagrams(vector&lt;string&gt;&amp; strs) {\n        vector&lt;vector&lt;string&gt;&gt; res;\n        map&lt;string, vector&lt;string&gt;&gt; mp;\n        for (string s : strs) {\n            string t = s;\n            sort(t.begin(), t.end());\n            mp[t].push_back(s);\n        }\n        for (auto&amp; [k, v] : mp) {\n            res.push_back(v);\n        }\n        return res;\n    }\n};\n</code></pre></p> <p>@tab java Java<pre><code>class Solution {\n    public List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) {\n        List&lt;List&lt;String&gt;&gt; res = new ArrayList&lt;&gt;();\n        Map&lt;String, List&lt;String&gt;&gt; map = new HashMap&lt;&gt;();\n\n        for (String s : strs) {\n            char[] charArray = s.toCharArray();\n            Arrays.sort(charArray);\n            String sortedStr = new String(charArray);\n\n            if (!map.containsKey(sortedStr)) {\n                map.put(sortedStr, new ArrayList&lt;&gt;());\n            }\n            map.get(sortedStr).add(s);\n        }\n\n        for (List&lt;String&gt; list : map.values()) {\n            res.add(list);\n        }\n\n        return res;\n    }\n}\n</code></pre></p> <p>@tab python Python<pre><code>class Solution:\n    def groupAnagrams(self, strs: List[str]) -&gt; List[List[str]]:\n        res = []\n        mp = defaultdict(list)\n\n        for s in strs:\n            sorted_s = ''.join(sorted(s))\n            mp[sorted_s].append(s)\n\n        for value in mp.values():\n            res.append(value)\n\n        return res\n</code></pre></p> <p>@tab go Go<pre><code>func groupAnagrams(strs []string) [][]string {\n    res := [][]string{}\n    mp := make(map[string][]string)\n\n    for _, s := range strs {\n        // \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5b57\u7b26\u6570\u7ec4\u5e76\u6392\u5e8f\n        chars := strings.Split(s, \"\")\n        sort.Strings(chars)\n        sortedStr := strings.Join(chars, \"\")\n\n        mp[sortedStr] = append(mp[sortedStr], s)\n    }\n\n    for _, v := range mp {\n        res = append(res, v)\n    }\n\n    return res\n}\n</code></pre> :::</p>"},{"location":"leetcode/top-100-liked/hash/#128","title":"128 \u6700\u957f\u8fde\u7eed\u5e8f\u5217","text":"<p>\u9898\u76ee\u94fe\u63a5</p> <p>::: code-tabs @tab cpp C++<pre><code>class Solution {\npublic:\n    int longestConsecutive(vector&lt;int&gt;&amp; nums) {\n        if (nums.empty()) return 0;\n        sort(nums.begin(), nums.end());\n        nums.erase(unique(nums.begin(), nums.end()), nums.end());\n        int ans = 1;\n        int pre = nums[0], len = 1;\n        for (int i = 1; i &lt; nums.size(); i++) {\n            if (nums[i] == pre + 1) {\n                len++;\n            } else {\n                ans = max(ans, len);\n                len = 1;\n            }\n            pre = nums[i];\n        }\n        ans = max(ans, len);\n        return ans;\n    }\n};\n</code></pre></p> <p>@tab java Java<pre><code>class Solution {\n    public int longestConsecutive(int[] nums) {\n        if (nums.length == 0) {\n            return 0;\n        }\n        // \u5229\u7528 TreeSet \u81ea\u52a8\u6392\u5e8f\u5e76\u53bb\u91cd\n        TreeSet&lt;Integer&gt; set = new TreeSet&lt;&gt;();\n        for (int num : nums) {\n            set.add(num);\n        }\n        int ans = 1;\n        int pre = set.first();\n        int len = 1;\n        // \u4ece\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5f00\u59cb\u904d\u5386\n        for (Integer num : set.tailSet(set.first(), false)) {\n            if (num == pre + 1) {\n                len++;\n            } else {\n                ans = Math.max(ans, len);\n                len = 1;\n            }\n            pre = num;\n        }\n        ans = Math.max(ans, len);\n        return ans;\n    }\n}\n</code></pre></p> <p>@tab python Python<pre><code>class Solution:\n    def longestConsecutive(self, nums: List[int]) -&gt; int:\n        if not nums:\n            return 0\n        # \u53bb\u91cd\u5e76\u6392\u5e8f\n        nums = sorted(set(nums))\n        ans = 1\n        pre = nums[0]\n        len_val = 1\n        for num in nums[1:]:\n            if num == pre + 1:\n                len_val += 1\n            else:\n                ans = max(ans, len_val)\n                len_val = 1\n            pre = num\n        ans = max(ans, len_val)\n        return ans\n</code></pre></p> <p>@tab go Go<pre><code>func longestConsecutive(nums []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    // \u6392\u5e8f\n    sort.Ints(nums)\n    // \u53bb\u91cd\n    j := 0\n    for i := 1; i &lt; len(nums); i++ {\n        if nums[i] != nums[j] {\n            j++\n            nums[j] = nums[i]\n        }\n    }\n    nums = nums[:j+1]\n\n    ans := 1\n    pre := nums[0]\n    lenVal := 1\n    for i := 1; i &lt; len(nums); i++ {\n        if nums[i] == pre+1 {\n            lenVal++\n        } else {\n            if lenVal &gt; ans {\n                ans = lenVal\n            }\n            lenVal = 1\n        }\n        pre = nums[i]\n    }\n    if lenVal &gt; ans {\n        ans = lenVal\n    }\n    return ans\n}\n</code></pre> :::</p>"},{"location":"leetcode/top-interview-150/array-string/","title":"['\u6570\u7ec4/\u5b57\u7b26\u4e32']","text":""},{"location":"leetcode/top-interview-150/array-string/#88","title":"88 \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4","text":"<p>\u9898\u76ee\u94fe\u63a5 link</p> <p>\u7ed9\u5b9a\u7684\u6570\u7ec4\u662f\u6709\u5e8f\u7684\uff0c\u90a3\u4e48\u9010\u4e2a\u5bf9\u6bd4\u653e\u5230\u4e00\u4e2a\u65b0\u6570\u7ec4\u4e2d\uff0c\u6700\u540e\u590d\u5236\u7ed9 nums1 \u5373\u53ef\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(m+n)\\)</p> <p>::: code-tabs @tab cpp C++<pre><code>class Solution {\npublic:\n    void merge(vector&lt;int&gt;&amp; nums1, int m, vector&lt;int&gt;&amp; nums2, int n) {\n        vector&lt;int&gt; all;\n        int i = 0, j = 0;\n        while (i &lt; m &amp;&amp; j &lt; n) {\n            if (nums1[i] &lt; nums2[j]) {\n                all.push_back(nums1[i]);\n                i++;\n            } else {\n                all.push_back(nums2[j]);\n                j++;\n            }\n        }\n        while (i &lt; m) all.push_back(nums1[i++]);\n        while (j &lt; n) all.push_back(nums2[j++]);\n        nums1 = all;\n    }\n};\n</code></pre></p> <p>@tab java Java<pre><code>class Solution {\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        int[] all = new int[m + n];\n        int i = 0, j = 0;\n        while (i &lt; m &amp;&amp; j &lt; n) {\n            if (nums1[i] &lt; nums2[j]) {\n                all[i + j] = nums1[i];\n                i++;\n            } else {\n                all[i + j] = nums2[j];\n                j++;\n            }\n        }\n        while (i &lt; m) {\n            all[i + j] = nums1[i];\n            i++;\n        }\n        while (j &lt; n) {\n            all[i + j] = nums2[j];\n            j++;\n        }\n        System.arraycopy(all, 0, nums1, 0, m + n); // \u9ad8\u6548\u590d\u5236\u6570\u7ec4\n    }\n}\n</code></pre> :::</p>"},{"location":"resource-share/good-web/","title":"\u4f18\u8d28\u4e92\u8054\u7f51\u8d44\u6e90\u5206\u4eab","text":""},{"location":"resource-share/good-web/#ai","title":"AI","text":"<ul> <li>AI\u5de5\u5177\u7bb1\u5bfc\u822a \u2013 AMZ123</li> <li>deepseek \u2013 \u6df1\u5ea6\u6c42\u7d22 R1\u53ef\u63a8\u7406</li> <li>\u8c46\u5305 \u2013 \u5b57\u8282\u65d7\u4e0b \u65b0\u589eBeta\u63a8\u7406</li> <li>\u8baf\u98de\u661f\u706b \u2013</li> <li>ChatGPT \u2013 OpenAI</li> <li>Gemini \u2013 Google</li> <li>\u901a\u4e49\u5343\u95ee \u2013 \u963f\u91cc</li> <li>\u667a\u8c31\u6e05\u8a00 \u2013</li> <li>cursor \u2013 \u57fa\u4e8eGPT-4 \u7f16\u7a0b\u9ad8\u624b</li> <li>\u6263\u5b50 \u2013 \u5b57\u8282\u63a8\u51fa\u7684AI\u673a\u5668\u4eba\u548c\u667a\u80fd\u4f53\u521b\u5efa\u5e73\u53f0</li> </ul>"},{"location":"resource-share/good-web/#_1","title":"\u5b66\u4e60\u8d44\u6e90","text":"<ul> <li>\u63d0\u95ee\u6307\u5357 \u2013 \u65e8\u5728\u7528\u7b80\u6d01\u3001\u6e05\u6670\u3001\u53cb\u597d\u7684\u8bed\u8a00\u8868\u8ff0\u4e0e\u63d0\u95ee\u76f8\u5173\u7684\u6ce8\u610f\u4e8b\u9879</li> <li>\u63d0\u95ee\u7684\u667a\u6167 \u2013 LUG @ USTC \u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66 Linux \u7528\u6237\u534f\u4f1a \u5bf9\u82f1\u6587\u539f\u7248\u8fdb\u884c\u7684\u4e2d\u6587\u7ffb\u8bd1</li> <li>Markdown \u4e2d\u6587\u624b\u518c \u2013</li> <li>LaTeX \u5e38\u7528\u516c\u5f0f\u8bed\u6cd5\u603b\u7ed3 \u2013 \u6211\u81ea\u5df1\u5199\u7684</li> <li>\u9886\u57df\u6811 \u2013 \u6c47\u96c6\u5165\u95e8\u7ecf\u5178\u4e66\u7c4d\uff0c\u8ba9\u9886\u57df\u5165\u95e8\u4ece\u6b64\u4e0d\u518d\u56f0\u96be</li> </ul>"},{"location":"resource-share/good-web/#_2","title":"\u8ba1\u7b97\u673a\u79d1\u5b66","text":"<ul> <li>csdiy \u2013 \u2b50CS\u81ea\u5b66\u6307\u5357</li> <li>\u83dc\u9e1f\u6559\u7a0b \u2013 \u5565\u90fd\u6709</li> <li>Git \u6559\u7a0b \u2013 \u6765\u81ea\u5ed6\u96ea\u5cf0</li> <li>Vim \u5feb\u6377\u952e\u901f\u67e5\u8868 \u2013</li> <li>cppreference \u82f1\u6587\u7248 \u2013 c/c++ \u6838\u5fc3\u6982\u5ff5\u3001\u8bed\u6cd5\u5206\u6790</li> <li>cppreference \u4e2d\u6587\u7248 \u2013</li> <li>Java Visualizer \u2013 Java \u4ee3\u7801\u8fd0\u884c\u53ef\u89c6\u5316</li> <li>VisuAlgo \u2013 \u901a\u8fc7\u52a8\u753b\u53ef\u89c6\u5316\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5</li> <li>Data Structure Visualizations \u2013 \u6570\u636e\u7ed3\u6784\u53ef\u89c6\u5316</li> </ul>"},{"location":"resource-share/good-web/#_3","title":"\u6570\u636e\u79d1\u5b66","text":"<ul> <li>UC Irvine Machine Learning Repository \u2013</li> <li>scikit-learn \u2013</li> </ul>"},{"location":"resource-share/good-web/#_4","title":"\u7b97\u6cd5\u7ade\u8d5b","text":"<ul> <li>\u6d1b\u8c37 \u2013</li> <li>\u725b\u5ba2\u7ade\u8d5b \u2013 \u6bcf\u5468\u4e00\u6b21\u5468\u8d5b\uff0c\u6bcf\u6708\u4e24\u6b21\u6708\u8d5b\uff0c\u8bb8\u591a\u9ad8\u6821\u5728\u6b64\u4e3e\u529e\u6821\u8d5b\u3001\u6a21\u62df\u8d5b</li> <li>CodeForces \u2013 \u6765\u81ea\u4fc4\u7f57\u65af \u5168\u7403\u6700\u5927\u7b97\u6cd5\u7ade\u8d5b\u5e73\u53f0\uff0c\u6709\u6d77\u91cf XCPC \u9898\u76ee\u8d44\u6e90</li> <li>AtCoder \u2013 \u6765\u81ea\u65e5\u672c\uff0c\u4e0e CodeForces \u7c7b\u4f3c\uff0c\u6bd4\u8d5b\u65f6\u95f4\u5bf9 cn \u66f4\u53cb\u597d</li> <li>QOJ \u2013 CF \u4e0a\u6ca1\u6709\u7684 XCPC \u9898\u76ee\u53ef\u4ee5\u6765\u8fd9\u91cc\u627e</li> <li>LeetCode \u529b\u6263 \u2013 \u529b\u6263\u6a21\u5f0f\u4e0e ACM \u6a21\u5f0f\u4e0d\u540c\uff0c\u9002\u5408\u6c42\u804c\u8005\u5b66\u4e60</li> <li>CFTracker \u2013 \u6839\u636e CF \u5e73\u53f0 ID \u7edf\u8ba1\u505a\u9898\u60c5\u51b5</li> <li>AtCoder Problems \u2013 \u6839\u636e AtCoder \u5e73\u53f0 ID \u7edf\u8ba1\u505a\u9898\u60c5\u51b5</li> <li>Vjudge \u2013 \u6574\u5408\u6240\u6709\u5e73\u53f0\u7684\u9898\u76ee\u5e76\u652f\u6301\u8fdc\u7a0b\u63d0\u4ea4</li> <li>Acwing \u2013</li> <li>DopplerXD \u7684\u7b97\u6cd5\u6a21\u677f \u2013 \u81ea\u5df1\u6574\u7406\u7684\u7b97\u6cd5\u6a21\u677f</li> <li>jiangly \u7684\u7b97\u6cd5\u6a21\u677f \u2013 by github - hh2048</li> <li>Board - XCPCIO \u2013 XCPC \u7ade\u8d5b\u699c\u5355</li> </ul>"},{"location":"resource-share/good-web/#_5","title":"\u4fe1\u606f\u83b7\u53d6","text":"<ul> <li>\u4eca\u65e5\u70ed\u699c \u2013 \u6574\u5408\u7ad9\uff0c\u4ec0\u4e48\u90fd\u6709</li> <li>AnyKnew \u2013 \u6548\u7387\u54a8\u8be2\uff0c\u9ad8\u6548\u8bfb\u54a8\u8be2\u3002\u597d\u50cf\u6ca1\u6709 https</li> <li>RSS \u8ba2\u9605\u6e90\u63a8\u8350 \u2013 \u5f88\u5168\uff0c\u4f46\u5c11\u90e8\u5206\u4e0d\u53ef\u7528</li> </ul>"},{"location":"resource-share/good-web/#_6","title":"\u5c0f\u5de5\u5177","text":"<ul> <li>\u5373\u65f6\u5de5\u5177 \u2013 \u5728\u7ebf\u5de5\u5177\u7bb1\uff0c\u4e0d\u4ec5\u9650\u4e8e\u7a0b\u5e8f\u5458</li> <li>\u6781\u7b80\u5de5\u5177 \u2013 \u7a0b\u5e8f\u5458\u7684\u8475\u82b1\u5b9d\u5178</li> <li>Qwerty Learner \u2013 \u8fb9\u7ec3\u5b57\u8fb9\u80cc\u5355\u8bcd\uff0c\u597d\u7528\uff01</li> <li>LDTools \u2013 PC \u5e38\u7528\u5de5\u5177\uff0cby \u8001\u5f1f\u4e00\u53f7\u5de5\u4f5c\u5ba4</li> <li>emojimix \u2013 \u751f\u6210 emoji \u6df7\u5408\u8868\u60c5</li> <li>\u4f60\u6ce8\u518c\u8fc7\u54ea\u4e9b\u7f51\u7ad9 \u2013 \u6839\u636e\u624b\u673a\u53f7\u67e5\u8be2\u6ce8\u518c\u8fc7\u7684\u7f51\u7ad9</li> <li>geogebra \u2013 \u6570\u5b66\u6559\u5b66\u5e73\u53f0\uff0c2D/3D \u7ed8\u56fe\uff0c\u79d1\u5b66\u3001\u56fe\u5f62\u8ba1\u7b97\u5668\uff0c\u6570\u5b66\u5b66\u4e60\u8d44\u6e90</li> <li>\u6253\u5b57\u7ec3\u4e60 \u2013 \u624b\u578b\u7ec3\u4e60\u3001\u6d4b\u901f\u7b49</li> <li>Yes Or No? \u2013 \u968f\u673a\u51fa\u73b0 yes \u6216 no \u7684\u89c6\u9891\u7247\u6bb5/\u56fe\u7247\uff0c\u5e2e\u4f60\u51b3\u7b56</li> <li>humanbenchmark \u2013 \u4eba\u7c7b\u7d20\u8d28\u6d4b\u8bd5\uff0c\u53cd\u5e94\u3001\u5b9a\u4f4d\u3001\u77ac\u95f4\u8bb0\u5fc6\u7b49</li> <li>\u4e2d\u5348\u5403\u4ec0\u4e48 \u2013 \u7b80\u6d01\uff0c\u968f\u673a\u5e2e\u4f60\u51b3\u5b9a\u4eca\u5929\u5403\u4ec0\u4e48</li> <li>\u7f51\u7edc\u526a\u5207\u677f \u2013 \u63d0\u4f9b\u6570\u636e\u6682\u5b58\u548c\u4f20\u9001\u670d\u52a1</li> <li>\u4ee3\u7801\u4fbf\u5229\u8d34 \u2013 \u5728\u7ebf\u4ee3\u7801\u5206\u4eab\u5e73\u53f0</li> <li>iLovePDF \u2013 PDF\u7231\u597d\u8005\u7684\u5728\u7ebf\u5de5\u5177\uff0c\u5b8c\u5168\u514d\u8d39\u3001\u6613\u4e8e\u4f7f\u7528\u3001\u4e30\u5bcc\u7684PDF\u5904\u7406\u5de5\u5177\uff0c\u5305\u62ec\uff1a\u5408\u5e76\u3001\u62c6\u5206\u3001\u538b\u7f29\u3001\u8f6c\u6362\u3001\u65cb\u8f6c\u548c\u89e3\u9501PDF\u6587\u4ef6\uff0c\u4ee5\u53ca\u7ed9PDF\u6587\u4ef6\u6dfb\u52a0\u6c34\u5370\u7684\u5de5\u5177\u7b49\u3002</li> </ul>"},{"location":"resource-share/good-web/#_7","title":"\u6e38\u620f","text":"<ul> <li>HLTV \u2013 CS \u6700\u6743\u5a01\u7684\u7ade\u8d5b\u4fe1\u606f\u5e73\u53f0</li> <li>MC\u767e\u79d1 \u2013 \u6700\u5927\u7684Minecraft\u4e2d\u6587\u767e\u79d1</li> <li>\u4e2d\u6587MC Wiki \u2013 \u6700\u8be6\u7ec6\u7684\u6211\u7684\u4e16\u754c\u767e\u79d1</li> <li>VALORANT\u8d5b\u4e8b\u6570\u636e \u2013 \u6570\u636e\u5168\u9762 \u7c7b\u4f3cHLTV</li> <li>\u65e0\u754f\u5951\u7ea6\u8d5b\u4e8b\u5b98\u7f51 \u2013 \u817e\u8baf</li> </ul>"},{"location":"resource-share/good-web/#_8","title":"\u535a\u5ba2\u642d\u5efa","text":"<ul> <li>CC Licenses List \u2013 CC \u7cfb\u5217\u77e5\u8bc6\u5171\u4eab\u8bb8\u53ef\u8bc1</li> <li>wordpress \u4e2d\u6587\u7ad9 \u2013 \u4ee5PHP\u548cMySQL\u4e3a\u5e73\u53f0\u7684\u81ea\u7531\u5f00\u6e90\u7684\u535a\u5ba2\u8f6f\u4ef6\u548c\u5185\u5bb9\u7ba1\u7406\u7cfb\u7edf\uff0c\u8d44\u6e90\u4e30\u5bcc</li> <li>hugo \u2013 \u57fa\u4e8e Go \u5f00\u53d1\u7684\u9759\u6001\u6846\u67b6\uff0c\u76f8\u5e94\u8fc5\u901f</li> <li>VuePress \u2013 Vue \u9a71\u52a8\u7684\u9759\u6001\u7f51\u7ad9\u751f\u6210\u5668\u3002\u672c\u7ad9\u4f7f\u7528\u4e86 VuePress \u6846\u67b6\uff0cPlume \u4e3b\u9898</li> <li>hexo \u2013 \u5feb\u901f\u3001\u7b80\u6d01\u4e14\u9ad8\u6548\u7684\u535a\u5ba2\u6846\u67b6</li> <li>Github Pages \u2013 \u65e0\u9700\u591a\u8a00\uff01</li> <li>mkdocs-material \u2013 \u4e2a\u4eba\u8ba4\u4e3a\u662f mkdocs \u6700\u597d\u7684\u4e3b\u9898\uff0c\u9002\u5408\u7528\u6765\u914d\u5408 GitHub Pages \u642d\u5efa\u4e2a\u4eba\u6587\u6863\u5e93</li> <li>Halo \u2013 \u5f3a\u5927\u6613\u7528\u7684\u5f00\u6e90\u5efa\u7ad9\u5de5\u5177</li> </ul>"},{"location":"resource-share/good-web/#_9","title":"\u524d\u7aef\u5f00\u53d1","text":"<ul> <li>AI/LLM \u6a21\u578b\u56fe\u6807\u96c6 \u2013 \u5f00\u6e90\u77e2\u91cf\u56fe\u6807\u96c6\uff0c\u8986\u76d6\u4e3b\u6d41 AI \u54c1\u724c\u548c\u6a21\u578b\uff0c\u652f\u6301 React / SVG / PNG / WebP</li> <li>iconfont \u2013 \u963f\u91cc\u5df4\u5df4\u77e2\u91cf\u56fe\u6807\u96c6</li> <li>Vue3 \u6587\u6863 \u2013</li> <li>Element Plus \u2013 \u57fa\u4e8e Vue 3\uff0c\u9762\u5411\u8bbe\u8ba1\u5e08\u548c\u5f00\u53d1\u8005\u7684\u7ec4\u4ef6\u5e93</li> <li>arco.design \u2013 \u5b57\u8282\u8df3\u52a8\u51fa\u54c1\u7684\u4f01\u4e1a\u7ea7\u8bbe\u8ba1\u7cfb\u7edf\uff0c\u652f\u6301 Vue \u548c React</li> <li>Ant Design Vue \u2013 \u963f\u91cc\u5f00\u53d1\uff0c\u6709 React \u7248\u672c</li> <li>Web \u5165\u95e8 \u2013</li> <li>\u524d\u7aef\u5b66\u4e60\u8def\u7ebf \u2013 by Github objtube</li> </ul>"},{"location":"resource-share/good-web/#_10","title":"\u540e\u7aef\u5f00\u53d1","text":"<ul> <li>Apipost \u2013 Apipost = Postman + Swagger + Mock + Jmeter \u540e\u7aef\u3001\u524d\u7aef\u3001\u6d4b\u8bd5\uff0c\u540c\u65f6\u5728\u7ebf\u534f\u4f5c\uff0c\u5185\u5bb9\u5b9e\u65f6\u540c\u6b65</li> <li>MyBatis-Plus \u2013 MyBatis-Plus \u662f\u4e00\u4e2a MyBatis \u7684\u589e\u5f3a\u5de5\u5177\uff0c\u5728 MyBatis \u7684\u57fa\u7840\u4e0a\u53ea\u505a\u589e\u5f3a\u4e0d\u505a\u6539\u53d8\uff0c\u4e3a\u7b80\u5316\u5f00\u53d1\u3001\u63d0\u9ad8\u6548\u7387\u800c\u751f\u3002</li> <li>60s API \u2013 \u4e00\u7cfb\u5217 \u9ad8\u8d28\u91cf\u3001\u5f00\u6e90\u3001\u53ef\u9760\u3001\u5168\u7403 CDN \u52a0\u901f \u7684\u5f00\u653e API \u96c6\u5408\u3002</li> </ul>"},{"location":"resource-share/good-web/#_11","title":"\u5176\u4ed6","text":"<ul> <li>Every Second \u2013 \u6bcf\u4e00\u79d2\u80fd\u53d1\u751f\u4ec0\u4e48</li> <li>chrome \u5c0f\u6050\u9f99\u6e38\u620f \u2013 \u8d85\u7ecf\u5178\u5c0f\u6050\u9f99\u6e38\u620f \u65e0\u7f51\u5fc5\u73a9</li> </ul>"},{"location":"blog/","title":"Blog","text":""}]}